{"version":3,"file":"static/js/114.ef355a61.chunk.js","mappings":"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","sources":["../common/button/src/saveButton.tsx","../common/hooks/src/usePrevious.ts","../common/hooks/src/useFormManager.ts","../common/input-number/src/index.tsx","../common/input-text/src/inputText.tsx","../pages/employees-data-page/src/Partials/ModalView.tsx","../pages/employees-data-page/src/constants.ts","../pages/employees-data-page/src/component.tsx"],"sourcesContent":["import React, { memo } from \"react\";\r\nimport { Button } from '@chakra-ui/react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { saveButtonProp } from \"./interface\"\r\n\r\nconst SaveButton = ({\r\n    saveTitle = 'sv',\r\n    onOK,\r\n    disabled,\r\n    width = \"10%\",\r\n    margin = \"5px\",\r\n    padding,\r\n}: saveButtonProp) => {\r\n    const { t } = useTranslation()\r\n    return (\r\n        <>\r\n            <Button colorScheme='blue' onClick={onOK} disabled={disabled} style={{\r\n                width: width,\r\n                margin: margin,\r\n                padding: padding\r\n            }} >{t(saveTitle)}</Button>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default memo(SaveButton)","import { useRef, useEffect } from \"react\";\r\n\r\nconst usePrevious = <T>(value: T): T => {\r\n  const ref = useRef<T>();\r\n\r\n  useEffect(() => {\r\n    ref.current = value;\r\n  });\r\n\r\n  return ref.current as T;\r\n};\r\n\r\nexport default usePrevious;\r\n","import { useState, useCallback, useEffect, useRef } from \"react\";\r\nimport usePrevious from \"./usePrevious\";\r\n\r\ninterface useFormManagerProps {\r\n  initialValues?: any;\r\n  setSelectedRow?: any;\r\n  tableModal?: boolean;\r\n}\r\n\r\nconst useFormManager = ({ initialValues }: useFormManagerProps) => {\r\n  const [state, setState] = useState<typeof initialValues>(initialValues);\r\n\r\n  const hasAnyFieldChangedRef = useRef(false);\r\n  const preValues = usePrevious(initialValues);\r\n\r\n  const areInitialValuesChanged = useCallback(\r\n    () => !Object.is(JSON.stringify(preValues), JSON.stringify(initialValues)),\r\n    [initialValues, preValues]\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (areInitialValuesChanged()) {\r\n      setState({ ...initialValues });\r\n    }\r\n  }, [areInitialValuesChanged, initialValues]);\r\n\r\n  const resetForm = useCallback(() => {\r\n    hasAnyFieldChangedRef.current = false;\r\n    setState(() => initialValues);\r\n    // @ts-ignore\r\n  }, [initialValues]);\r\n\r\n  useEffect(\r\n    () => {\r\n      return resetForm;\r\n    },\r\n    // eslint-disable-next-line\r\n    []\r\n  );\r\n\r\n  const onChange = useCallback(\r\n    (eventData: any) => {\r\n      const { name, value } = eventData;\r\n      setState({ ...state, [name]: value });\r\n    },\r\n    [state]\r\n  );\r\n\r\n  const handleRootState = useCallback((e: any) => {\r\n    setState(e);\r\n  }, []);\r\n\r\n  const handleSelectWithLabelChange = useCallback(\r\n    (eventData: any) => {\r\n      setState({\r\n        ...state,\r\n        [eventData.name]: eventData.value,\r\n        [eventData.selectLabelName]: eventData.label,\r\n      });\r\n    },\r\n    [state]\r\n  );\r\n\r\n  const handleArrayChange = useCallback(\r\n    ({ name, value }: any) => {\r\n      setState({ ...state, [name]: [...state[name], value] });\r\n    },\r\n    [state]\r\n  );\r\n\r\n  return {\r\n    state,\r\n    onChange,\r\n    resetForm,\r\n    handleRootState,\r\n    handleSelectWithLabelChange,\r\n    handleArrayChange,\r\n  };\r\n};\r\n\r\nexport default useFormManager;\r\n","import React, { memo, useCallback } from \"react\";\r\nimport {\r\n    NumberInput,\r\n    NumberInputField,\r\n    // NumberInputStepper,\r\n    // NumberIncrementStepper,\r\n    // NumberDecrementStepper,\r\n    Flex,\r\n    FormLabel\r\n} from '@chakra-ui/react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { inputNumberProp } from \"./interface\";\r\n\r\nconst InputNumber = ({\r\n    disabled,\r\n    value,\r\n    name = \"number\",\r\n    Label = \"\",\r\n    onChange,\r\n    width = \"200px\",\r\n    padding,\r\n    margin = \"10px\",\r\n    step = 1,\r\n    min = 0,\r\n    max\r\n}: inputNumberProp) => {\r\n    const { t } = useTranslation()\r\n\r\n    const handleChange = useCallback((event: { target: { value: number; }; }) => {\r\n        onChange({ name: name, value: +event.target.value })\r\n    }, [name, onChange])\r\n    return (\r\n        <>\r\n            <Flex\r\n                direction=\"column\"\r\n                width={width}\r\n                padding={padding}\r\n                margin={margin}\r\n\r\n            >\r\n                <FormLabel>{t(Label)}</FormLabel>\r\n                <NumberInput step={step} min={min} max={max} isDisabled={disabled} value={value | 0}>\r\n                    {\r\n                        //@ts-ignore\r\n                        <NumberInputField onChange={handleChange} />\r\n                    }\r\n                    {/* <NumberInputStepper>\r\n                        <NumberIncrementStepper />\r\n                        <NumberDecrementStepper />\r\n                    </NumberInputStepper> */}\r\n                </NumberInput>\r\n            </Flex>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default memo(InputNumber)","import React, { memo, useCallback } from \"react\";\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Input, FormLabel, Flex } from '@chakra-ui/react'\r\nimport { InputTextProps } from \"./interface\";\r\n\r\nconst InputText = ({\r\n    disabled,\r\n    value,\r\n    name,\r\n    Label = \"\",\r\n    onChange,\r\n    width = \"200px\",\r\n    type = \"text\",\r\n    placeHolder,\r\n    padding,\r\n    margin = \"10px\",\r\n    className = \"\",\r\n    required = false\r\n}: InputTextProps) => {\r\n    const { t } = useTranslation()\r\n\r\n    const handleChange = useCallback((event: { target: { value: string; }; }) => {\r\n        onChange({ name: name, value: event.target.value })\r\n    }, [name, onChange])\r\n\r\n    return (\r\n        <>\r\n            <Flex\r\n                direction=\"column\"\r\n                width={width}\r\n                padding={padding}\r\n                margin={margin}\r\n            >\r\n                <FormLabel>{t(Label)}</FormLabel>\r\n                <Input\r\n                    placeholder={placeHolder}\r\n                    size='md'\r\n                    isDisabled={disabled}\r\n                    isRequired={required}\r\n                    onChange={handleChange}\r\n                    width=\"100%\"\r\n                    className={className}\r\n                    value={value}\r\n                    type={type}\r\n                />\r\n            </Flex>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default memo(InputText)","import React, { memo, useCallback } from 'react';\r\nimport { useTableControlsButtons } from \"@commons/table\";\r\nimport { ModalViewProp } from \"@commons/global\"\r\nimport { useFormManager } from \"@commons/hooks\";\r\nimport { InputText } from \"@commons/input-text\";\r\nimport InputNumber from \"@commons/input-number\"\r\nimport { SaveButton } from \"@commons/button\"\r\n\r\nconst ModalView = ({\r\n    onClose,\r\n    selectedRow,\r\n    refreshTable\r\n}: ModalViewProp) => {\r\n\r\n\r\n    const {\r\n        onChange,\r\n        state\r\n    } = useFormManager({\r\n        initialValues: {\r\n            ...selectedRow\r\n        }\r\n    })\r\n\r\n    const { onSaveAndInsertion } = useTableControlsButtons({ api: \"POST_EMPLOYEES_TABLE_DATA\", runFetch: refreshTable })\r\n\r\n    const handleSave = useCallback(() => {\r\n        const record = state\r\n        onSaveAndInsertion(record)\r\n        onClose()\r\n    }, [state, onSaveAndInsertion, onClose])\r\n\r\n    return (\r\n        <>\r\n            <InputText\r\n                name='employee_name'\r\n                value={state.employee_name}\r\n                onChange={onChange}\r\n                Label='nm'\r\n                width=\"30%\"\r\n            />\r\n            <InputText\r\n                name='date_of_hiring'\r\n                value={state.date_of_hiring}\r\n                onChange={onChange}\r\n                Label='dtfhrng'\r\n                width=\"30%\"\r\n                type='date'\r\n            />\r\n            <InputNumber\r\n                name='employee_phone'\r\n                value={state.employee_phone}\r\n                onChange={onChange}\r\n                Label='phn'\r\n                width=\"30%\"\r\n            />\r\n            <InputText\r\n                name='employee_address'\r\n                value={state.employee_address}\r\n                onChange={onChange}\r\n                Label='adrs'\r\n                width=\"30%\"\r\n            />\r\n            <InputNumber\r\n                name='employee_mobile'\r\n                value={state.employee_mobile}\r\n                onChange={onChange}\r\n                Label='mbl'\r\n                width=\"30%\"\r\n            />\r\n            <InputText\r\n                name='employee_email'\r\n                value={state.employee_email}\r\n                onChange={onChange}\r\n                Label='eml'\r\n                width=\"30%\"\r\n            />\r\n            <InputText\r\n                name='employee_job_title'\r\n                value={state.employee_job_title}\r\n                onChange={onChange}\r\n                Label='jbtl'\r\n                width=\"22%\"\r\n            />\r\n            <InputNumber\r\n                name='employee_salary'\r\n                value={state.employee_salary}\r\n                onChange={onChange}\r\n                Label='slry'\r\n                width=\"22%\"\r\n            />\r\n            <InputText\r\n                name='employee_attendance_time'\r\n                value={state.employee_attendance_time}\r\n                onChange={onChange}\r\n                Label='atndnctm'\r\n                width=\"22%\"\r\n                type='time'\r\n            />\r\n            <InputText\r\n                name='employee_leaving_time'\r\n                value={state.employee_leaving_time}\r\n                onChange={onChange}\r\n                Label='lvngtm'\r\n                width=\"22%\"\r\n                type='time'\r\n            />\r\n            <SaveButton\r\n                onOK={handleSave}\r\n            />\r\n        </>\r\n    )\r\n};\r\n\r\nexport default memo(ModalView)","export const columns = [\r\n  {\r\n    title: \"nm\",\r\n    dataIndex: \"employee_name\",\r\n    width: 15,\r\n  },\r\n  {\r\n    title: \"dtfhrng\",\r\n    dataIndex: \"date_of_hiring\",\r\n    width: 12,\r\n  },\r\n  {\r\n    title: \"slry\",\r\n    dataIndex: \"employee_salary\",\r\n    width: 10,\r\n  },\r\n  {\r\n    title: \"atndnctm\",\r\n    dataIndex: \"employee_attendance_time\",\r\n    width: 10,\r\n  },\r\n  {\r\n    title: \"lvngtm\",\r\n    dataIndex: \"employee_leaving_time\",\r\n    width: 10,\r\n  },\r\n  {\r\n    title: \"phn\",\r\n    dataIndex: \"employee_phone\",\r\n    width: 15,\r\n  },\r\n  {\r\n    title: \"mbl\",\r\n    dataIndex: \"employee_mobile\",\r\n    width: 15,\r\n  },\r\n  {\r\n    title: \"adrs\",\r\n    dataIndex: \"employee_address\",\r\n    width: 20,\r\n  },\r\n];\r\n","import React, { memo } from 'react';\r\nimport ModalView from \"./Partials/ModalView\";\r\nimport { TableWithApi } from \"@commons/table\";\r\nimport { columns } from \"./constants\";\r\n\r\nconst EmployeesData = () => {\r\n    return (\r\n        <>\r\n            <TableWithApi\r\n                api={\"QUERY_EMPLOYEES_TABLE_DATA\"}\r\n                postApi={\"POST_EMPLOYEES_TABLE_DATA\"}\r\n                columns={columns}\r\n                hideTools={false}\r\n                canEdit={true}\r\n                canAdd={true}\r\n                canDelete={true}\r\n                rowKey={\"employee_id\"}\r\n                ModalContent={ModalView}\r\n                fetchOnFirstRun\r\n            />\r\n        </>\r\n    )\r\n\r\n};\r\n\r\nexport default memo(EmployeesData);\r\n"],"names":["SaveButton","saveTitle","onOK","disabled","width","margin","padding","t","useTranslation","colorScheme","onClick","style","memo","value","ref","useRef","useEffect","current","initialValues","useState","state","setState","hasAnyFieldChangedRef","preValues","usePrevious","areInitialValuesChanged","useCallback","Object","is","JSON","stringify","resetForm","onChange","eventData","name","handleRootState","e","handleSelectWithLabelChange","selectLabelName","label","handleArrayChange","InputNumber","Label","step","min","max","handleChange","event","target","direction","isDisabled","InputText","type","placeHolder","className","required","I","placeholder","size","isRequired","ModalView","onClose","selectedRow","refreshTable","useFormManager","onSaveAndInsertion","useTableControlsButtons","api","runFetch","handleSave","employee_name","date_of_hiring","employee_phone","employee_address","employee_mobile","employee_email","employee_job_title","employee_salary","employee_attendance_time","employee_leaving_time","columns","title","dataIndex","EmployeesData","postApi","hideTools","canEdit","canAdd","canDelete","rowKey","ModalContent","fetchOnFirstRun"],"sourceRoot":""}