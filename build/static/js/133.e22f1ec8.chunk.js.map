{"version":3,"file":"static/js/133.e22f1ec8.chunk.js","mappings":"iQAKMA,EAAW,SAAH,GASQ,IAAD,IARjBC,MAAAA,OAAK,MAAG,GAAE,EACVC,EAAK,EAALA,MACAC,EAAQ,EAARA,SACAC,EAAI,EAAJA,KACAC,EAAK,EAALA,MACAC,EAAQ,EAARA,SACAC,EAAO,EAAPA,QAAQ,EAAD,EACPC,OAAAA,OAAM,MAAG,OAAM,EAEPC,GAAMC,EAAAA,EAAAA,MAAND,EACR,GAA8BE,EAAAA,EAAAA,WAAS,GAAM,eAAtCC,EAAO,KAAEC,EAAU,KACpBC,GAAeC,EAAAA,EAAAA,cAAY,SAACC,IACD,IAAzBA,EAAMC,OAAOL,QACbT,EAAS,CAAEC,KAAMA,EAAMF,MAAO,OACE,IAAzBc,EAAMC,OAAOL,SACpBT,EAAS,CAAEC,KAAMA,EAAMF,MAAO,KAEtC,GAAG,CAACE,EAAMD,IAUV,OARAe,EAAAA,EAAAA,YAAU,WACQ,MAAVhB,EACAW,GAAW,GACM,MAAVX,GACPW,GAAW,EAEnB,GAAG,CAACX,KAGA,+BACI,SAAC,IAAc,CACXiB,UAAWP,EACXT,SAAUW,EACVT,MAAOA,EACPe,WAAYd,EACZC,QAASA,EACTC,OAAQA,EAAO,SAEdC,EAAER,MAInB,EAEA,GAAeoB,EAAAA,EAAAA,MAAKrB,G,UCxCdsB,EAAqB,SAAH,GAAgE,IAA1DC,EAAO,EAAPA,QAASC,EAAgB,EAAhBA,iBAQnC,GAA4BC,EAAAA,EAAAA,GAAe,CAAEC,cAPvB,CAClBC,KAAM,GACNC,YAAa,GACbC,OAAQ,IACRC,aAAc,IACdC,gBAAiB,MAEb5B,EAAQ,EAARA,SAAU6B,EAAK,EAALA,MACVL,EAAiDK,EAAjDL,KAAMC,EAA2CI,EAA3CJ,YAAaK,EAA8BD,EAA9BC,UAAWJ,EAAmBG,EAAnBH,OAAQK,EAAWF,EAAXE,OAEtCC,GAAWC,EAAAA,EAAAA,GAAY,CAC3BC,KAAM,6BADFF,OASR,OACI,+BACI,UAAC,IAAK,CACFlC,MAAM,cACNsB,QAASA,EACTe,QAASd,EACTe,KAXa,WACrBJ,EAAOH,GACPR,GACJ,EAQmC,WAEvB,SAAC,IAAS,CACNgB,MAAM,KACNpC,KAAK,OACLF,MAAOyB,EACPxB,SAAUA,EACVsC,KAAK,OACLpC,MAAM,SAEV,SAAC,IAAa,CACVD,KAAK,cACLD,SAAUA,EACVuC,IAAI,2BACJxC,MAAO0B,EACPY,MAAM,QACNnC,MAAM,MACNsC,gBAAiBpB,KAErB,SAAC,IAAS,CACNkB,KAAK,OACLrC,KAAK,kBACLF,MAAO+B,EACP9B,SAAUA,EACVqC,MAAM,WACNnC,MAAM,SAEV,SAACuC,EAAA,EAAQ,CACLxC,KAAK,SACLF,MAAOgC,EACP/B,SAAUA,EACVqC,MAAM,MACNnC,MAAM,SAEV,SAAC,EAAQ,CACLD,KAAK,SACLH,MAAM,QACNC,MAAO2B,EACP1B,SAAUA,QAK9B,EAEA,GAAekB,EAAAA,EAAAA,MAAKC,E","sources":["../common/check-box/src/CheckBox.tsx","../pages/employee-attendance-page/src/component.tsx"],"sourcesContent":["import React, { memo, useCallback, useEffect, useState } from \"react\";\r\nimport { useTranslation } from 'react-i18next'\r\nimport { Checkbox as ChakraCheckBox } from '@chakra-ui/react'\r\nimport { CheckBoxProps } from \"./interface\";\r\n\r\nconst CheckBox = ({\r\n    label = \"\",\r\n    value,\r\n    onChange,\r\n    name,\r\n    width,\r\n    disabled,\r\n    padding,\r\n    margin = \"10px\"\r\n}: CheckBoxProps) => {\r\n    const { t } = useTranslation()\r\n    const [checked, setChecked] = useState(false)\r\n    const handleChange = useCallback((event: { target: { checked: boolean; }; }) => {\r\n        if (event.target.checked === true) {\r\n            onChange({ name: name, value: \"Y\" })\r\n        } else if (event.target.checked === false) {\r\n            onChange({ name: name, value: \"N\" })\r\n        }\r\n    }, [name, onChange])\r\n\r\n    useEffect(() => {\r\n        if (value === \"Y\") {\r\n            setChecked(true)\r\n        } else if (value === \"N\") {\r\n            setChecked(false)\r\n        }\r\n    }, [value])\r\n\r\n    return (\r\n        <>\r\n            <ChakraCheckBox\r\n                isChecked={checked}\r\n                onChange={handleChange}\r\n                width={width}\r\n                isDisabled={disabled}\r\n                padding={padding}\r\n                margin={margin}\r\n            >\r\n                {t(label)}\r\n            </ChakraCheckBox>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default memo(CheckBox)","import React, { memo } from \"react\";\r\nimport { InputText } from \"@commons/input-text\";\r\nimport { SelectWithApi } from \"@commons/select\";\r\nimport { TextArea } from \"@commons/input-text\";\r\nimport { useFormManager, useMutation } from \"@commons/hooks\";\r\nimport { CheckBox } from \"@commons/check-box\";\r\nimport Modal from \"@commons/modal\";\r\nimport { EmployeeAttendanceProps } from \"./interface\"\r\n\r\nconst EmployeeAttendance = ({ visible, handleCloseModal }: EmployeeAttendanceProps) => {\r\n    const initialValues = {\r\n        date: \"\",\r\n        employee_id: \"\",\r\n        absent: \"N\",\r\n        query_status: \"n\",\r\n        attendance_time: \"\"\r\n    }\r\n    const { onChange, state } = useFormManager({ initialValues: initialValues })\r\n    const { date, employee_id, real_time, absent, reason } = state\r\n\r\n    const { setRow } = useMutation({\r\n        link: \"POST_EMPLOYEE_ATTENDANCE\"\r\n    })\r\n\r\n    const handleSaveButton = () => {\r\n        setRow(state)\r\n        handleCloseModal()\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Modal\r\n                label=\"emplyatndnc\"\r\n                visible={visible}\r\n                onClose={handleCloseModal}\r\n                onOK={handleSaveButton}\r\n            >\r\n                <InputText\r\n                    Label=\"dt\"\r\n                    name=\"date\"\r\n                    value={date}\r\n                    onChange={onChange}\r\n                    type=\"date\"\r\n                    width=\"30%\"\r\n                />\r\n                <SelectWithApi\r\n                    name=\"employee_id\"\r\n                    onChange={onChange}\r\n                    Api=\"QUERY_EMPLOYEE_NAME_LIST\"\r\n                    value={employee_id}\r\n                    Label=\"emply\"\r\n                    width=\"30%\"\r\n                    fetchOnFirstRun={visible}\r\n                />\r\n                <InputText\r\n                    type=\"time\"\r\n                    name=\"attendance_time\"\r\n                    value={real_time}\r\n                    onChange={onChange}\r\n                    Label=\"atndnctm\"\r\n                    width=\"30%\"\r\n                />\r\n                <TextArea\r\n                    name=\"reason\"\r\n                    value={reason}\r\n                    onChange={onChange}\r\n                    Label=\"rsn\"\r\n                    width=\"70%\"\r\n                />\r\n                <CheckBox\r\n                    name=\"absent\"\r\n                    label=\"absnt\"\r\n                    value={absent}\r\n                    onChange={onChange}\r\n                />\r\n            </Modal>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default memo(EmployeeAttendance)"],"names":["CheckBox","label","value","onChange","name","width","disabled","padding","margin","t","useTranslation","useState","checked","setChecked","handleChange","useCallback","event","target","useEffect","isChecked","isDisabled","memo","EmployeeAttendance","visible","handleCloseModal","useFormManager","initialValues","date","employee_id","absent","query_status","attendance_time","state","real_time","reason","setRow","useMutation","link","onClose","onOK","Label","type","Api","fetchOnFirstRun","TextArea"],"sourceRoot":""}