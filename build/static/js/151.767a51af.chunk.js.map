{"version":3,"file":"static/js/151.767a51af.chunk.js","mappings":"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","sources":["../common/hooks/src/usePrevious.ts","../common/hooks/src/useFormManager.ts","../common/radio-box/src/index.tsx","../pages/accounts-summary-page/src/constant.ts","../pages/accounts-summary-page/src/component.tsx","../node_modules/@chakra-ui/form-control/src/form-label.tsx","../node_modules/@chakra-ui/form-control/src/form-control.tsx"],"sourcesContent":["import { useRef, useEffect } from \"react\";\r\n\r\nconst usePrevious = <T>(value: T): T => {\r\n  const ref = useRef<T>();\r\n\r\n  useEffect(() => {\r\n    ref.current = value;\r\n  });\r\n\r\n  return ref.current as T;\r\n};\r\n\r\nexport default usePrevious;\r\n","import { useState, useCallback, useEffect, useRef } from \"react\";\r\nimport usePrevious from \"./usePrevious\";\r\n\r\ninterface useFormManagerProps {\r\n  initialValues?: any;\r\n  setSelectedRow?: any;\r\n  tableModal?: boolean;\r\n}\r\n\r\nconst useFormManager = ({ initialValues }: useFormManagerProps) => {\r\n  const [state, setState] = useState<typeof initialValues>(initialValues);\r\n\r\n  const hasAnyFieldChangedRef = useRef(false);\r\n  const preValues = usePrevious(initialValues);\r\n\r\n  const areInitialValuesChanged = useCallback(\r\n    () => !Object.is(JSON.stringify(preValues), JSON.stringify(initialValues)),\r\n    [initialValues, preValues]\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (areInitialValuesChanged()) {\r\n      setState({ ...initialValues });\r\n    }\r\n  }, [areInitialValuesChanged, initialValues]);\r\n\r\n  const resetForm = useCallback(() => {\r\n    hasAnyFieldChangedRef.current = false;\r\n    setState(() => initialValues);\r\n    // @ts-ignore\r\n  }, [initialValues]);\r\n\r\n  useEffect(\r\n    () => {\r\n      return resetForm;\r\n    },\r\n    // eslint-disable-next-line\r\n    []\r\n  );\r\n\r\n  const onChange = useCallback(\r\n    (eventData: any) => {\r\n      const { name, value } = eventData;\r\n      setState({ ...state, [name]: value });\r\n    },\r\n    [state]\r\n  );\r\n\r\n  const handleRootState = useCallback((e: any) => {\r\n    setState(e);\r\n  }, []);\r\n\r\n  const handleSelectWithLabelChange = useCallback(\r\n    (eventData: any) => {\r\n      setState({\r\n        ...state,\r\n        [eventData.name]: eventData.value,\r\n        [eventData.selectLabelName]: eventData.label,\r\n      });\r\n    },\r\n    [state]\r\n  );\r\n\r\n  const handleArrayChange = useCallback(\r\n    ({ name, value }: any) => {\r\n      setState({ ...state, [name]: [...state[name], value] });\r\n    },\r\n    [state]\r\n  );\r\n\r\n  return {\r\n    state,\r\n    onChange,\r\n    resetForm,\r\n    handleRootState,\r\n    handleSelectWithLabelChange,\r\n    handleArrayChange,\r\n  };\r\n};\r\n\r\nexport default useFormManager;\r\n","import React, { memo, useCallback } from \"react\";\r\nimport { useTranslation } from 'react-i18next'\r\nimport { Radio, RadioGroup, Stack, FormLabel, Flex } from '@chakra-ui/react'\r\nimport { radioBoxProps, option } from \"./interface\"\r\n\r\nconst RadioBox = ({\r\n    name,\r\n    options,\r\n    width,\r\n    onChange,\r\n    value,\r\n    Label,\r\n    margin = \"10px\",\r\n    padding,\r\n    hidden = false\r\n}: radioBoxProps) => {\r\n    const { t } = useTranslation()\r\n    const handleChange = useCallback((value: string | number) => {\r\n        onChange({ name: name, value: value })\r\n    }, [name, onChange])\r\n    return (\r\n        <>\r\n            <Flex\r\n                direction=\"column\"\r\n                width={width}\r\n                padding={padding}\r\n                margin={margin}\r\n                wrap=\"wrap\"\r\n                hidden={hidden}\r\n            >\r\n                <FormLabel fontSize='md' as=\"b\" margin=\"0 0 5px\">{t(Label)}</FormLabel>\r\n                <Flex\r\n                    className=\"css-1xsh6d8\"\r\n                    width=\"100%\"\r\n                >\r\n                    <RadioGroup\r\n                        padding=\"7px\"\r\n                        onChange={handleChange}\r\n                        value={value}\r\n                        width=\"100%\"\r\n                        display=\"flex\"\r\n                        gap=\"15px\"\r\n                        flexWrap=\"wrap\"\r\n                    >\r\n                        {options.map((option: option) => {\r\n                            return (\r\n                                <Stack direction='row'>\r\n                                    <Radio value={option.value} >{t(option.label)}</Radio>\r\n                                </Stack>\r\n                            )\r\n                        })}\r\n                    </RadioGroup>\r\n                </Flex>\r\n            </Flex>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default memo(RadioBox)","export const voucherOptions = [\r\n  {\r\n    label: \"splr\",\r\n    value: \"S\",\r\n  },\r\n  {\r\n    label: \"cstmr\",\r\n    value: \"C\",\r\n  },\r\n  {\r\n    label: \"itms\",\r\n    value: \"I\",\r\n  },\r\n  {\r\n    label: \"expns\",\r\n    value: \"E\",\r\n  },\r\n];\r\n\r\nexport const columns = [\r\n  {\r\n    title: \"id\",\r\n    dataIndex: \"rowKey\",\r\n    width: \"5%\",\r\n  },\r\n  {\r\n    title: \"nm\",\r\n    dataIndex: \"record_name\",\r\n    width: \"10%\",\r\n  },\r\n  {\r\n    title: \"crdt\",\r\n    dataIndex: \"credit\",\r\n    width: \"10%\",\r\n  },\r\n  {\r\n    title: \"dbt\",\r\n    dataIndex: \"debit\",\r\n    width: \"10%\",\r\n  },\r\n  {\r\n    title: \"total\",\r\n    dataIndex: \"total\",\r\n    width: \"10%\",\r\n  },\r\n];\r\n","import React, { memo } from \"react\";\r\nimport RadioBox from \"@commons/radio-box\";\r\nimport { useFormManager } from \"@commons/hooks\";\r\nimport Flex from \"@commons/flex\";\r\nimport { TableWithApi } from \"@commons/table\";\r\nimport { voucherOptions, columns } from \"./constant\"\r\n\r\nconst AccountsSummary = () => {\r\n    const { state, onChange } = useFormManager({ initialValues: { type: \"C\" } })\r\n    return (\r\n        <>\r\n            <Flex bordered width=\"100%\" wrap>\r\n                <RadioBox\r\n                    name=\"type\"\r\n                    onChange={onChange}\r\n                    value={state?.type}\r\n                    Label=\"type\"\r\n                    width=\"47%\"\r\n                    options={voucherOptions}\r\n                />\r\n            </Flex>\r\n            <TableWithApi\r\n                api={\"QUERY_ACCOUNTS_SUMMARY_TABLE\"}\r\n                columns={columns}\r\n                hideTools={false}\r\n                canExcel={true}\r\n                rowKey={\"rowKey\"}\r\n                params={{\r\n                    type: state.type,\r\n                }}\r\n                fetchOnFirstRun\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default memo(AccountsSummary)","import {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { useFormControlContext, useFormControlStyles } from \"./form-control\"\n\nexport interface FormLabelProps\n  extends HTMLChakraProps<\"label\">,\n    ThemingProps<\"FormLabel\"> {\n  /**\n   * @type React.ReactElement\n   */\n  requiredIndicator?: React.ReactElement\n  /**\n   * @type React.ReactNode\n   */\n  optionalIndicator?: React.ReactNode\n}\n\n/**\n * Used to enhance the usability of form controls.\n *\n * It is used to inform users as to what information\n * is requested for a form field.\n *\n * ♿️ Accessibility: Every form field should have a form label.\n */\nexport const FormLabel = forwardRef<FormLabelProps, \"label\">(function FormLabel(\n  passedProps,\n  ref,\n) {\n  const styles = useStyleConfig(\"FormLabel\", passedProps)\n  const props = omitThemingProps(passedProps)\n\n  const {\n    className,\n    children,\n    requiredIndicator = <RequiredIndicator />,\n    optionalIndicator = null,\n    ...rest\n  } = props\n\n  const field = useFormControlContext()\n  const ownProps = field?.getLabelProps(rest, ref) ?? { ref, ...rest }\n\n  return (\n    <chakra.label\n      {...ownProps}\n      className={cx(\"chakra-form__label\", props.className)}\n      __css={{\n        display: \"block\",\n        textAlign: \"start\",\n        ...styles,\n      }}\n    >\n      {children}\n      {field?.isRequired ? requiredIndicator : optionalIndicator}\n    </chakra.label>\n  )\n})\n\nFormLabel.displayName = \"FormLabel\"\n\nexport interface RequiredIndicatorProps extends HTMLChakraProps<\"span\"> {}\n\n/**\n * Used to show a \"required\" text or an asterisks (*) to indicate that\n * a field is required.\n */\nexport const RequiredIndicator = forwardRef<RequiredIndicatorProps, \"span\">(\n  function RequiredIndicator(props, ref) {\n    const field = useFormControlContext()\n    const styles = useFormControlStyles()\n\n    if (!field?.isRequired) return null\n\n    const className = cx(\"chakra-form__required-indicator\", props.className)\n\n    return (\n      <chakra.span\n        {...field?.getRequiredIndicatorProps(props, ref)}\n        __css={styles.requiredIndicator}\n        className={className}\n      />\n    )\n  },\n)\n\nRequiredIndicator.displayName = \"RequiredIndicator\"\n","import { createContext } from \"@chakra-ui/react-context\"\nimport { PropGetter } from \"@chakra-ui/react-types\"\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx, dataAttr } from \"@chakra-ui/shared-utils\"\nimport { useCallback, useId, useState } from \"react\"\n\nconst [FormControlStylesProvider, useFormControlStyles] = createContext<\n  Record<string, SystemStyleObject>\n>({\n  name: `FormControlStylesContext`,\n  errorMessage: `useFormControlStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<FormControl />\" `,\n})\n\nexport { useFormControlContext, useFormControlStyles }\n\nexport interface FormControlOptions {\n  /**\n   * If `true`, the form control will be required. This has 2 side effects:\n   * - The `FormLabel` will show a required indicator\n   * - The form element (e.g, Input) will have `aria-required` set to `true`\n   *\n   * @default false\n   */\n  isRequired?: boolean\n  /**\n   * If `true`, the form control will be disabled. This has 2 side effects:\n   * - The `FormLabel` will have `data-disabled` attribute\n   * - The form element (e.g, Input) will be disabled\n   *\n   * @default false\n   */\n  isDisabled?: boolean\n  /**\n   * If `true`, the form control will be invalid. This has 2 side effects:\n   * - The `FormLabel` and `FormErrorIcon` will have `data-invalid` set to `true`\n   * - The form element (e.g, Input) will have `aria-invalid` set to `true`\n   *\n   * @default false\n   */\n  isInvalid?: boolean\n  /**\n   * If `true`, the form control will be readonly\n   *\n   * @default false\n   */\n  isReadOnly?: boolean\n}\n\ninterface FormControlContext extends FormControlOptions {\n  /**\n   * The label text used to inform users as to what information is\n   * requested for a text field.\n   */\n  label?: string\n  /**\n   * The custom `id` to use for the form control. This is passed directly to the form element (e.g, Input).\n   * - The form element (e.g. Input) gets the `id`\n   * - The form label id: `form-label-${id}`\n   * - The form error text id: `form-error-text-${id}`\n   * - The form helper text id: `form-helper-text-${id}`\n   */\n  id?: string\n}\n\ntype FormControlProviderContext = Omit<\n  ReturnType<typeof useFormControlProvider>,\n  \"getRootProps\" | \"htmlProps\"\n>\n\nconst [FormControlProvider, useFormControlContext] =\n  createContext<FormControlProviderContext>({\n    strict: false,\n    name: \"FormControlContext\",\n  })\n\nfunction useFormControlProvider(props: FormControlContext) {\n  const {\n    id: idProp,\n    isRequired,\n    isInvalid,\n    isDisabled,\n    isReadOnly,\n    ...htmlProps\n  } = props\n\n  // Generate all the required ids\n  const uuid = useId()\n  const id = idProp || `field-${uuid}`\n\n  const labelId = `${id}-label`\n  const feedbackId = `${id}-feedback`\n  const helpTextId = `${id}-helptext`\n\n  /**\n   * Track whether the `FormErrorMessage` has been rendered.\n   * We use this to append its id the `aria-describedby` of the `input`.\n   */\n  const [hasFeedbackText, setHasFeedbackText] = useState(false)\n\n  /**\n   * Track whether the `FormHelperText` has been rendered.\n   * We use this to append its id the `aria-describedby` of the `input`.\n   */\n  const [hasHelpText, setHasHelpText] = useState(false)\n\n  // Track whether the form element (e.g, `input`) has focus.\n  const [isFocused, setFocus] = useState(false)\n\n  const getHelpTextProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      id: helpTextId,\n      ...props,\n      /**\n       * Notify the field context when the help text is rendered on screen,\n       * so we can apply the correct `aria-describedby` to the field (e.g. input, textarea).\n       */\n      ref: mergeRefs(forwardedRef, (node) => {\n        if (!node) return\n        setHasHelpText(true)\n      }),\n    }),\n    [helpTextId],\n  )\n\n  const getLabelProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ref: forwardedRef,\n      \"data-focus\": dataAttr(isFocused),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-readonly\": dataAttr(isReadOnly),\n      id: props.id !== undefined ? props.id : labelId,\n      htmlFor: props.htmlFor !== undefined ? props.htmlFor : id,\n    }),\n    [id, isDisabled, isFocused, isInvalid, isReadOnly, labelId],\n  )\n\n  const getErrorMessageProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      id: feedbackId,\n      ...props,\n      /**\n       * Notify the field context when the error message is rendered on screen,\n       * so we can apply the correct `aria-describedby` to the field (e.g. input, textarea).\n       */\n      ref: mergeRefs(forwardedRef, (node) => {\n        if (!node) return\n        setHasFeedbackText(true)\n      }),\n      \"aria-live\": \"polite\",\n    }),\n    [feedbackId],\n  )\n\n  const getRootProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ...htmlProps,\n      ref: forwardedRef,\n      role: \"group\",\n    }),\n    [htmlProps],\n  )\n\n  const getRequiredIndicatorProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ref: forwardedRef,\n      role: \"presentation\",\n      \"aria-hidden\": true,\n      children: props.children || \"*\",\n    }),\n    [],\n  )\n\n  return {\n    isRequired: !!isRequired,\n    isInvalid: !!isInvalid,\n    isReadOnly: !!isReadOnly,\n    isDisabled: !!isDisabled,\n    isFocused: !!isFocused,\n    onFocus: () => setFocus(true),\n    onBlur: () => setFocus(false),\n    hasFeedbackText,\n    setHasFeedbackText,\n    hasHelpText,\n    setHasHelpText,\n    id,\n    labelId,\n    feedbackId,\n    helpTextId,\n    htmlProps,\n    getHelpTextProps,\n    getErrorMessageProps,\n    getRootProps,\n    getLabelProps,\n    getRequiredIndicatorProps,\n  }\n}\n\nexport interface FormControlProps\n  extends HTMLChakraProps<\"div\">,\n    ThemingProps<\"FormControl\">,\n    FormControlContext {}\n\n/**\n * FormControl provides context such as\n * `isInvalid`, `isDisabled`, and `isRequired` to form elements.\n *\n * This is commonly used in form elements such as `input`,\n * `select`, `textarea`, etc.\n *\n * @see Docs https://chakra-ui.com/docs/components/form-control\n */\nexport const FormControl = forwardRef<FormControlProps, \"div\">(\n  function FormControl(props, ref) {\n    const styles = useMultiStyleConfig(\"Form\", props)\n    const ownProps = omitThemingProps(props)\n    const {\n      getRootProps,\n      htmlProps: _,\n      ...context\n    } = useFormControlProvider(ownProps)\n\n    const className = cx(\"chakra-form-control\", props.className)\n\n    return (\n      <FormControlProvider value={context}>\n        <FormControlStylesProvider value={styles}>\n          <chakra.div\n            {...getRootProps({}, ref)}\n            className={className}\n            __css={styles[\"container\"]}\n          />\n        </FormControlStylesProvider>\n      </FormControlProvider>\n    )\n  },\n)\n\nFormControl.displayName = \"FormControl\"\n\nexport interface FormHelperTextProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * FormHelperText\n *\n * Assistive component that conveys additional guidance\n * about the field, such as how it will be used and what\n * types in values should be provided.\n */\nexport const FormHelperText = forwardRef<FormHelperTextProps, \"div\">(\n  function FormHelperText(props, ref) {\n    const field = useFormControlContext()\n    const styles = useFormControlStyles()\n    const className = cx(\"chakra-form__helper-text\", props.className)\n    return (\n      <chakra.div\n        {...field?.getHelpTextProps(props, ref)}\n        __css={styles.helperText}\n        className={className}\n      />\n    )\n  },\n)\n\nFormHelperText.displayName = \"FormHelperText\"\n"],"names":["value","ref","useRef","useEffect","current","_ref","initialValues","_useState","useState","_useState2","_slicedToArray","state","setState","hasAnyFieldChangedRef","preValues","usePrevious","areInitialValuesChanged","useCallback","Object","is","JSON","stringify","_objectSpread","resetForm","onChange","eventData","name","_defineProperty","handleRootState","e","handleSelectWithLabelChange","_objectSpread3","selectLabelName","label","handleArrayChange","_ref2","concat","_toConsumableArray","RadioBox","options","width","Label","_ref$margin","margin","padding","_ref$hidden","hidden","t","useTranslation","handleChange","_jsx","_Fragment","children","_jsxs","Flex","direction","wrap","FormLabel","fontSize","as","className","RadioGroup","display","gap","flexWrap","map","option","Stack","Radio","memo","voucherOptions","columns","title","dataIndex","AccountsSummary","_useFormManager","useFormManager","type","bordered","TableWithApi","api","hideTools","canExcel","rowKey","params","fetchOnFirstRun","forwardRef","passedProps","_a","styles","useStyleConfig","props","omitThemingProps","_props$requiredIndica","requiredIndicator","jsx","RequiredIndicator","_props$optionalIndica","optionalIndicator","rest","_objectWithoutProperties","_excluded","field","useFormControlContext","ownProps","getLabelProps","jsxs","chakra","cx","__css","textAlign","isRequired","displayName","useFormControlStyles","span","getRequiredIndicatorProps","_createContext","createContext","errorMessage","_createContext2","FormControlStylesProvider","_createContext3","strict","_createContext4","FormControlProvider","FormControl","useMultiStyleConfig","_useFormControlProvid","idProp","id","isInvalid","isDisabled","isReadOnly","htmlProps","uuid","useId","labelId","feedbackId","helpTextId","hasFeedbackText","setHasFeedbackText","_useState3","_useState4","hasHelpText","setHasHelpText","_useState5","_useState6","isFocused","setFocus","getHelpTextProps","props2","arguments","length","undefined","forwardedRef","mergeRefs","node","dataAttr","htmlFor","getErrorMessageProps","getRootProps","role","onFocus","onBlur","useFormControlProvider","context","_excluded2","div","helperText"],"sourceRoot":""}