{"version":3,"file":"static/js/151.b6ae4128.chunk.js","mappings":"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","sources":["../common/Flex/src/index.tsx","../common/modal/src/index.tsx","../common/TableView/src/ApiTable.tsx","../common/button/src/iconButton.tsx","../common/TableView/src/Table.tsx","../common/TableView/src/hooks/useCreateTableActionRef.ts","../common/TableView/src/hooks/useTableControlsButtons.ts","../common/hooks/src/usePrevious.ts","../common/hooks/src/useFormManager.ts","../common/hooks/src/useMutation.ts","../common/radio-box/src/index.tsx","../pages/accounts-summary-page/src/constant.ts","../pages/accounts-summary-page/src/component.tsx"],"sourcesContent":["import React, { memo, useEffect, useState } from \"react\";\r\nimport { Flex as ChackraFlex } from \"@chakra-ui/react\"\r\nimport { flexProp } from \"./interface\"\r\n\r\nconst Flex = ({\r\n    children,\r\n    justifyContent,\r\n    width,\r\n    height,\r\n    padding = \"10px\",\r\n    margin,\r\n    bordered = false,\r\n    backgroundColor,\r\n    borderColor = \"#3c8dcf\",\r\n    borderWidth = \"px\",\r\n    borderRadius = \"5px\",\r\n    flexDirection = \"row\",\r\n    textAlign = \"\",\r\n    hidden = false,\r\n    wrap,\r\n    ...prop\r\n}: any) => {\r\n    const [border, setBorder] = useState(\"\")\r\n    useEffect(() => {\r\n        if (bordered) {\r\n            setBorder(`${borderWidth} solid ${borderColor}`)\r\n        }\r\n    }, [borderColor, borderWidth, bordered])\r\n    return (\r\n        <>\r\n            <ChackraFlex\r\n                width={width}\r\n                height={height}\r\n                padding={padding}\r\n                margin={margin}\r\n                background={backgroundColor}\r\n                borderRadius={borderRadius}\r\n                flexDirection={flexDirection}\r\n                textAlign={textAlign}\r\n                justifyContent={justifyContent}\r\n                hidden={hidden}\r\n                //@ts-ignore\r\n                wrap={wrap ? \"wrap\" : \"\"}\r\n                {...prop}\r\n            >\r\n                {children}\r\n            </ChackraFlex>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default memo(Flex)","import React, { memo } from 'react';\r\nimport { useTranslation } from 'react-i18next'\r\nimport {\r\n    Modal as ModalView,\r\n    ModalOverlay,\r\n    ModalContent,\r\n    ModalHeader,\r\n    ModalFooter,\r\n    ModalBody,\r\n    ModalCloseButton,\r\n    Button,\r\n    Flex\r\n} from '@chakra-ui/react';\r\n\r\ninterface ModalProp {\r\n    visible?: boolean,\r\n    children?: any,\r\n    label: string,\r\n    onOK?: () => void,\r\n    onClose: () => void,\r\n    submitTitle?: string,\r\n    width?: string;\r\n    hideSaveButton?: boolean;\r\n    hideCloseButton?: boolean;\r\n}\r\n\r\nconst Modal = (\r\n    {\r\n        children,\r\n        visible = false,\r\n        label,\r\n        onClose,\r\n        onOK,\r\n        submitTitle = \"smbt\",\r\n        width = \"3xl\",\r\n        hideSaveButton = false,\r\n        hideCloseButton = false\r\n    }: ModalProp\r\n) => {\r\n    const { t } = useTranslation()\r\n    return (\r\n        <>\r\n\r\n            <ModalView isOpen={visible} onClose={onClose} size={width}>\r\n                <ModalOverlay />\r\n                <ModalContent>\r\n                    <ModalHeader>{t(label)}</ModalHeader>\r\n                    <ModalCloseButton />\r\n                    <ModalBody>\r\n                        <Flex w=\"100%\" padding=\"5px\" wrap=\"wrap\">\r\n                            {children}\r\n                        </Flex>\r\n                    </ModalBody>\r\n                    <ModalFooter>\r\n                        <Flex w=\"25%\" justifyContent=\"space-around\">\r\n                            <Button colorScheme='red' mr={3} onClick={onClose} hidden={hideCloseButton}>\r\n                                {t(\"cls\")}\r\n                            </Button>\r\n                            <Button colorScheme='blue' onClick={onOK} hidden={hideSaveButton} >{t(submitTitle)}</Button>\r\n                        </Flex>\r\n                    </ModalFooter>\r\n                </ModalContent>\r\n            </ModalView>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default memo(Modal);","import React, \r\n{ \r\n    memo, \r\n    useState,\r\n    useCallback,\r\n    useImperativeHandle,\r\n    forwardRef\r\n} from \"react\";\r\nimport Table from \"./Table\";\r\nimport { useFetch } from \"@commons/hooks\"\r\nimport Modal from \"@commons/modal\";\r\nimport useTableControlsButtons from \"./hooks/useTableControlsButtons\";\r\nimport { TableWithApiProps } from \"./interface\"\r\n\r\nconst TableWithApi = ({\r\n    api,\r\n    postApi,\r\n    columns,\r\n    ModalContent,\r\n    onClick,\r\n    fetchOnFirstRun = false,\r\n    params,\r\n    checkForParams = false,\r\n    ...tableProps\r\n}: TableWithApiProps,\r\nref: any\r\n) => {\r\n    const { data, runFetch, loading } = useFetch({ link: api, fetchOnFirstRun: fetchOnFirstRun, params: params, checkForParams: true })\r\n    const { onSaveAndInsertion } = useTableControlsButtons({ api: postApi, runFetch: runFetch })\r\n    const [selectedRow, setSelectedRow] = useState({})\r\n    const [modal, setModal] = useState(false);\r\n    const handleAdd = useCallback(() => {\r\n        setSelectedRow({ query_status: \"n\" })\r\n        setModal(true)\r\n    }, [setSelectedRow])\r\n    const handleEdit = useCallback(() => {\r\n        setSelectedRow({ ...selectedRow, query_status: \"u\" })\r\n        setModal(true)\r\n    }, [selectedRow, setSelectedRow])\r\n    const handleDelete = () => {\r\n        onSaveAndInsertion({ ...selectedRow, query_status: \"d\" })\r\n    }\r\n\r\n    const handleCloseModal = useCallback(() => {\r\n        setModal(false)\r\n    }, [])\r\n\r\n\r\n    const handleSelectedRow = (row: any) => {\r\n        setSelectedRow(row)\r\n        if (onClick) onClick(row)\r\n    };\r\n\r\n    useImperativeHandle(ref, () => ({\r\n        runFetch,\r\n        // setTableData: setData,\r\n        // resetTableData,\r\n        // getCurrentDataSource: () => foundDataSource\r\n      }));\r\n\r\n    return (\r\n        <>\r\n            {ModalContent && <Modal\r\n                visible={modal}\r\n                onClose={handleCloseModal}\r\n                hideCloseButton\r\n                hideSaveButton\r\n                label=\"dtls\"\r\n            >\r\n                <ModalContent\r\n                    onClose={handleCloseModal}\r\n                    selectedRow={selectedRow}\r\n                    refreshTable={runFetch}\r\n                />\r\n            </Modal>\r\n            }\r\n            <Table\r\n                dataSource={data?.data}\r\n                columns={columns}\r\n                onAdd={handleAdd}\r\n                onEdit={handleEdit}\r\n                onDelete={handleDelete}\r\n                onSelectedRow={handleSelectedRow}\r\n                loading={loading}\r\n                {...tableProps}\r\n            >\r\n            </Table>\r\n\r\n        </>\r\n    )\r\n}\r\nexport default memo(forwardRef(TableWithApi))","import React, { memo } from \"react\";\r\nimport { iconButtonProp } from \"./interface\"\r\n\r\nconst IconButton = ({\r\n    icon,\r\n    onClick,\r\n    disabled = false,\r\n    width = \"30px\",\r\n    height = \"30px\",\r\n    color,\r\n    margin = \"10px\",\r\n    padding,\r\n    hidden = false\r\n}: iconButtonProp) => {\r\n    return (\r\n        <>\r\n            <button style={{\r\n                border: \"none\",\r\n                width: width,\r\n                height: height,\r\n                backgroundColor: color,\r\n                padding: padding,\r\n                margin: margin,\r\n                borderRadius: \"20px\"\r\n            }} hidden={hidden} onClick={onClick} disabled={disabled} >\r\n                <i className={icon}></i>\r\n            </button>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default memo(IconButton)","import React, { useState, useCallback, useRef } from 'react';\r\nimport { Button, IconButton } from \"@commons/button\";\r\nimport { useLocation } from 'react-router-dom';\r\nimport * as XLSX from \"xlsx\";\r\nimport { useTranslation } from 'react-i18next';\r\nimport ReactToPrint from 'react-to-print';\r\nimport {\r\n    Table as ChakraTable,\r\n    Thead,\r\n    Tbody,\r\n    // Tfoot,\r\n    Text,\r\n    Box,\r\n    Tr,\r\n    Th,\r\n    Td,\r\n    TableContainer,\r\n    Skeleton,\r\n} from '@chakra-ui/react'\r\nimport Flex from \"@commons/flex\";\r\nimport { TableProps, additionalButtonsType } from \"./interface\";\r\n\r\n\r\nconst Table = ({\r\n    dataSource,\r\n    height = \"300px\",\r\n    rowKey = \"rowKey\",\r\n    columns,\r\n    hideTools = true,\r\n    canEdit = false,\r\n    canAdd = false,\r\n    canDelete = false,\r\n    canExcel = false,\r\n    onAdd,\r\n    onEdit,\r\n    onDelete,\r\n    actionColumn = false,\r\n    onAction,\r\n    actionLabel = \"\",\r\n    onSelectedRow,\r\n    label,\r\n    canPrint = false,\r\n    onPrint,\r\n    additionalButtons,\r\n    onSave,\r\n    canSave = false,\r\n    width = \"100%\",\r\n    margin = \"\",\r\n    padding = \"\",\r\n    loading = false,\r\n    onDoubleClick = (e) => { console.log(e) }\r\n}: TableProps) => {\r\n    const { pathname } = useLocation()\r\n    const { t } = useTranslation()\r\n    const [rowSelected, setRowSelected] = useState()\r\n    const handleSelectedRow = useCallback((item: any) => () => {\r\n        if (onSelectedRow) onSelectedRow(item)\r\n        setRowSelected(item)\r\n    }, [onSelectedRow])\r\n\r\n    const handleDouble = useCallback((item: any) => () => {\r\n        if (onDoubleClick) onDoubleClick(item)\r\n        setRowSelected(item)\r\n    }, [onDoubleClick])\r\n\r\n    const onExcel = useCallback(() => {\r\n        const pathName = pathname.replace(\"/\", \"\")\r\n        const wb = XLSX.utils.book_new(),\r\n            //@ts-ignore\r\n            ws = XLSX.utils.json_to_sheet(dataSource)\r\n        XLSX.utils.book_append_sheet(wb, ws, pathName)\r\n        XLSX.writeFile(wb, `${pathName} ${new Date().toUTCString()}.xlsx`)\r\n    }, [dataSource, pathname])\r\n\r\n    const componentRef = useRef();\r\n\r\n    return (\r\n        <>\r\n            <TableContainer width={width} padding={padding} margin={margin}>\r\n                {label && <Text width=\"100%\" textAlign=\"center\" marginBottom=\"7px\" fontSize='md' fontWeight=\"bold\">{t(label)}</Text>}\r\n                <Flex\r\n                    width='100%'\r\n                    padding='0'\r\n                    margin='5px 0'\r\n                    justifyContent='center'\r\n                    hidden={hideTools}\r\n                >\r\n                    <IconButton\r\n                        icon='fa-sharp fa-solid fa-plus'\r\n                        onClick={onAdd}\r\n                        hidden={!canAdd}\r\n                    />\r\n                    <IconButton\r\n                        icon='fa-sharp fa-solid fa-pen-clip'\r\n                        onClick={onEdit}\r\n                        hidden={!canEdit}\r\n                        disabled={!rowSelected}\r\n                    />\r\n                    <IconButton\r\n                        icon='fa-sharp fa-solid fa-trash'\r\n                        onClick={onDelete}\r\n                        hidden={!canDelete}\r\n                        disabled={!rowSelected}\r\n                    />\r\n                    {additionalButtons && additionalButtons.map((button: additionalButtonsType) => {\r\n                        return (\r\n                            <IconButton\r\n                                icon={button.icon}\r\n                                onClick={button.onClick}\r\n                                disabled={button.disabled}\r\n                                hidden={false}\r\n                            />\r\n                        )\r\n                    })}\r\n                    <IconButton\r\n                        icon='fa-solid fa-floppy-disk'\r\n                        onClick={onSave}\r\n                        hidden={!canSave}\r\n                        disabled={!canSave}\r\n                    />\r\n                    <ReactToPrint\r\n                        trigger={() => <IconButton\r\n                            icon='fa-solid fa-print'\r\n                            hidden={!canPrint}\r\n                            disabled={!canPrint}\r\n                        />}\r\n                        //@ts-ignore\r\n                        content={() => {\r\n                            return (\r\n                                componentRef.current\r\n                            )\r\n                        }}\r\n                        documentTitle=\"dd\"\r\n                    />\r\n                    <IconButton\r\n                        icon='fa-sharp fa-regular fa-file-excel'\r\n                        onClick={onExcel}\r\n                        hidden={!canExcel}\r\n                        disabled={!canExcel}\r\n                    />\r\n                </Flex>\r\n                <Skeleton isLoaded={!loading} fadeDuration={0} >\r\n                    <Box overflowY=\"auto\" height={height}>\r\n                        <ChakraTable\r\n                            //@ts-ignore\r\n                            ref={componentRef}\r\n                        >\r\n                            <Thead top={0} position=\"sticky\" bgColor=\"#3edae6\">\r\n                                <Tr>\r\n                                    {columns.map((item: any) => {\r\n                                        return (\r\n                                            <Th maxWidth={item.width} minWidth={item.width}>\r\n                                                {t(item.title)}\r\n                                            </Th>\r\n                                        )\r\n                                    })}\r\n                                    <Th hidden={!actionColumn}>{t(\"actn\")}</Th>\r\n                                </Tr>\r\n                            </Thead>\r\n                            <Tbody>\r\n                                {dataSource?.map((item: any) => {\r\n                                    return (\r\n                                        <Tr key={item[rowKey]} onClick={handleSelectedRow(item)} onDoubleClick={handleDouble(item)} background={`${rowSelected === item ? \"#dbffbf\" : \"\"}`} >\r\n                                            {columns.map((column: any) => {\r\n                                                return (\r\n                                                    <Td maxWidth={column.width} minWidth={column.width}>\r\n                                                        {item[column.dataIndex]}\r\n                                                    </Td>\r\n                                                )\r\n                                            })}\r\n                                            <Td hidden={!actionColumn}>\r\n                                                <Button\r\n                                                    label={actionLabel}\r\n                                                    onClick={() => { onAction(item) }}\r\n                                                />\r\n                                            </Td>\r\n                                        </Tr>\r\n                                    )\r\n                                })}\r\n                            </Tbody>\r\n\r\n                            {/* <Tfoot>\r\n                        <Tr>\r\n                        <Th>To convert</Th>\r\n                        <Th>into</Th>\r\n                        <Th isNumeric>multiply by</Th>\r\n                        </Tr>\r\n                    </Tfoot> */}\r\n\r\n                        </ChakraTable>\r\n\r\n                        {!Array.isArray(dataSource) || dataSource.length === 0 && !loading ? <Flex justifyContent='center' width='100%'>\r\n                            <Text as='b' fontSize='md' color='red'>No Data</Text>\r\n                        </Flex> : <></>}\r\n                    </Box>\r\n                </Skeleton>\r\n            </TableContainer>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Table;","import { useRef, useCallback } from \"react\";\r\n\r\nconst useCreateTableActionRef = ()=>{\r\n\r\n    const tableRef = useRef()\r\n\r\n    const fetchTableData = useCallback(async (params?: any) =>\r\n    //@ts-ignore\r\n    await tableRef.current?.runFetch(params),\r\n  [tableRef])\r\n\r\n    return {\r\n        tableRef,\r\n        fetchTableData\r\n    }\r\n}\r\n\r\nexport default useCreateTableActionRef","import { useCallback } from \"react\";\r\nimport { useMutation } from \"@commons/hooks\";\r\n\r\nconst useTableControlsButtons = ({ api = \"\", runFetch }: any) => {\r\n  const { setRow: newRecord } = useMutation({\r\n    link: api,\r\n    additionalFunctionToRun: runFetch,\r\n    method: \"POST\",\r\n  });\r\n  const { setRow: updateRecord } = useMutation({\r\n    link: api,\r\n    additionalFunctionToRun: runFetch,\r\n    method: \"PUT\",\r\n  });\r\n  const { setRow: deleteRecord } = useMutation({\r\n    link: api,\r\n    additionalFunctionToRun: runFetch,\r\n    method: \"Delete\",\r\n  });\r\n\r\n  const onSaveAndInsertion = useCallback(\r\n    (record: any) => {\r\n      if (record.query_status === \"n\") {\r\n        newRecord(record);\r\n      } else if (record.query_status === \"u\") {\r\n        updateRecord(record);\r\n      } else if (record.query_status === \"d\") {\r\n        deleteRecord(record);\r\n      }\r\n    },\r\n    [newRecord, updateRecord, deleteRecord]\r\n  );\r\n\r\n  return { onSaveAndInsertion };\r\n};\r\n\r\nexport default useTableControlsButtons;\r\n","import { useRef, useEffect } from \"react\";\r\n\r\nconst usePrevious = <T>(value: T): T => {\r\n  const ref = useRef<T>();\r\n\r\n  useEffect(() => {\r\n    ref.current = value;\r\n  });\r\n\r\n  return ref.current as T;\r\n};\r\n\r\nexport default usePrevious;\r\n","import { useState, useCallback, useEffect, useRef } from \"react\";\r\nimport usePrevious from \"./usePrevious\";\r\n\r\ninterface useFormManagerProps {\r\n  initialValues?: any;\r\n  setSelectedRow?: any;\r\n  tableModal?: boolean;\r\n}\r\n\r\nconst useFormManager = ({ initialValues }: useFormManagerProps) => {\r\n  const [state, setState] = useState<typeof initialValues>(initialValues);\r\n\r\n  const hasAnyFieldChangedRef = useRef(false);\r\n  const preValues = usePrevious(initialValues);\r\n\r\n  const areInitialValuesChanged = useCallback(\r\n    () => !Object.is(JSON.stringify(preValues), JSON.stringify(initialValues)),\r\n    [initialValues, preValues]\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (areInitialValuesChanged()) {\r\n      setState({ ...initialValues });\r\n    }\r\n  }, [areInitialValuesChanged, initialValues]);\r\n\r\n  const resetForm = useCallback(() => {\r\n    hasAnyFieldChangedRef.current = false;\r\n    setState(() => initialValues);\r\n    // @ts-ignore\r\n  }, [initialValues]);\r\n\r\n  useEffect(\r\n    () => {\r\n      return resetForm;\r\n    },\r\n    // eslint-disable-next-line\r\n    []\r\n  );\r\n\r\n  const onChange = useCallback(\r\n    (eventData: any) => {\r\n      const { name, value } = eventData;\r\n      setState({ ...state, [name]: value });\r\n    },\r\n    [state]\r\n  );\r\n\r\n  const handleRootState = useCallback((e: any) => {\r\n    setState(e);\r\n  }, []);\r\n\r\n  const handleSelectWithLabelChange = useCallback(\r\n    (eventData: any) => {\r\n      setState({\r\n        ...state,\r\n        [eventData.name]: eventData.value,\r\n        [eventData.selectLabelName]: eventData.label,\r\n      });\r\n    },\r\n    [state]\r\n  );\r\n\r\n  const handleArrayChange = useCallback(\r\n    ({ name, value }: any) => {\r\n      setState({ ...state, [name]: [...state[name], value] });\r\n    },\r\n    [state]\r\n  );\r\n\r\n  return {\r\n    state,\r\n    onChange,\r\n    resetForm,\r\n    handleRootState,\r\n    handleSelectWithLabelChange,\r\n    handleArrayChange,\r\n  };\r\n};\r\n\r\nexport default useFormManager;\r\n","import { useState, useCallback } from \"react\";\r\nimport { useLocalStorage } from \"@commons/hooks\";\r\nimport { API_ID } from \"@commons/global\";\r\nimport { useToast } from \"@chakra-ui/react\";\r\n\r\ninterface useMutationProps {\r\n  link: string;\r\n  noAuthorization?: boolean;\r\n  additionalFunctionToRun?: () => void;\r\n  runOnSuccess?: () => void;\r\n  runOnFail?: () => void;\r\n  method?: string;\r\n}\r\ninterface successType {\r\n  response: string;\r\n}\r\n\r\nconst useMutation = ({\r\n  link = \"\",\r\n  noAuthorization = false,\r\n  additionalFunctionToRun,\r\n  runOnSuccess,\r\n  runOnFail,\r\n  method = \"POST\",\r\n}: useMutationProps) => {\r\n  const toast = useToast();\r\n  //@ts-ignore\r\n  const url = `http://144.24.209.19:9090/api/${API_ID[link]}`;\r\n  const [success, setSuccess] = useState<successType>();\r\n  const { authorization } = useLocalStorage();\r\n  const postData = useCallback(\r\n    async (dataToPost: any) => {\r\n      if (authorization || noAuthorization) {\r\n        const settings = {\r\n          method: method,\r\n          headers: {\r\n            Accept: \"application/json\",\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: `Bearer ${authorization}`,\r\n          },\r\n          body: JSON.stringify(dataToPost),\r\n        };\r\n        try {\r\n          const fetchResponse = await fetch(url, settings);\r\n          const data = await fetchResponse.json();\r\n          if (data.response === \"success\") {\r\n            toast({\r\n              position: \"top-right\",\r\n              title: \"Success\",\r\n              description: `${data.response}`,\r\n              status: \"success\",\r\n              duration: 5000,\r\n              isClosable: true,\r\n            });\r\n            if (runOnSuccess) runOnSuccess();\r\n          } else {\r\n            toast({\r\n              position: \"top-right\",\r\n              title: \"Error\",\r\n              description: `${data.message}`,\r\n              status: \"error\",\r\n              duration: 9000,\r\n              isClosable: true,\r\n            });\r\n            if (runOnFail) runOnFail();\r\n          }\r\n          setSuccess(data);\r\n          if (additionalFunctionToRun) {\r\n            additionalFunctionToRun();\r\n          }\r\n          return data;\r\n        } catch (e) {}\r\n      }\r\n    },\r\n    [\r\n      additionalFunctionToRun,\r\n      authorization,\r\n      method,\r\n      noAuthorization,\r\n      runOnFail,\r\n      runOnSuccess,\r\n      toast,\r\n      url,\r\n    ]\r\n  );\r\n\r\n  const setRow = useCallback(\r\n    (row: any) => {\r\n      postData(row);\r\n    },\r\n    [postData]\r\n  );\r\n\r\n  return { success, setRow };\r\n};\r\n\r\nexport default useMutation;\r\n","import React, { memo, useCallback } from \"react\";\r\nimport { useTranslation } from 'react-i18next'\r\nimport { Radio, RadioGroup, Stack, FormLabel, Flex } from '@chakra-ui/react'\r\nimport { radioBoxProps, option } from \"./interface\"\r\n\r\nconst RadioBox = ({\r\n    name,\r\n    options,\r\n    width,\r\n    onChange,\r\n    value,\r\n    Label,\r\n    margin = \"10px\",\r\n    padding,\r\n    hidden = false,\r\n    disabled= false,\r\n    ...props\r\n}: radioBoxProps) => {\r\n    const { t } = useTranslation()\r\n    const handleChange = useCallback((value: string | number) => {\r\n        onChange({ name: name, value: value })\r\n    }, [name, onChange])\r\n    return (\r\n        <>\r\n            <Flex\r\n                direction=\"column\"\r\n                width={width}\r\n                padding={padding}\r\n                margin={margin}\r\n                wrap=\"wrap\"\r\n                hidden={hidden}\r\n            >\r\n                <FormLabel fontSize='md' as=\"b\" margin=\"0 0 5px\">{t(Label)}</FormLabel>\r\n                <Flex\r\n                    className=\"css-1xsh6d8\"\r\n                    width=\"100%\"\r\n                >\r\n                    <RadioGroup\r\n                        padding=\"7px\"\r\n                        onChange={handleChange}\r\n                        value={value}\r\n                        width=\"100%\"\r\n                        display=\"flex\"\r\n                        gap=\"15px\"\r\n                        flexWrap=\"wrap\"\r\n                        isDisabled={disabled}\r\n                        {...props}\r\n                    >\r\n                        {options.map((option: option) => {\r\n                            return (\r\n                                <Stack direction='row'>\r\n                                    <Radio value={option.value} >{t(option.label)}</Radio>\r\n                                </Stack>\r\n                            )\r\n                        })}\r\n                    </RadioGroup>\r\n                </Flex>\r\n            </Flex>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default memo(RadioBox)","export const voucherOptions = [\r\n  {\r\n    label: \"splr\",\r\n    value: \"S\",\r\n  },\r\n  {\r\n    label: \"cstmr\",\r\n    value: \"C\",\r\n  },\r\n  {\r\n    label: \"itms\",\r\n    value: \"I\",\r\n  },\r\n  {\r\n    label: \"expns\",\r\n    value: \"E\",\r\n  },\r\n];\r\n\r\nexport const columns = [\r\n  {\r\n    title: \"id\",\r\n    dataIndex: \"rowKey\",\r\n    width: \"5%\",\r\n  },\r\n  {\r\n    title: \"nm\",\r\n    dataIndex: \"record_name\",\r\n    width: \"10%\",\r\n  },\r\n  {\r\n    title: \"crdt\",\r\n    dataIndex: \"credit\",\r\n    width: \"10%\",\r\n  },\r\n  {\r\n    title: \"dbt\",\r\n    dataIndex: \"debit\",\r\n    width: \"10%\",\r\n  },\r\n  {\r\n    title: \"total\",\r\n    dataIndex: \"total\",\r\n    width: \"10%\",\r\n  },\r\n];\r\n","import React, { memo, useCallback } from \"react\";\r\nimport RadioBox from \"@commons/radio-box\";\r\nimport { useFormManager } from \"@commons/hooks\";\r\nimport Flex from \"@commons/flex\";\r\nimport { TableWithApi, useCreateTableActionRef } from \"@commons/table\";\r\nimport { Button } from \"@commons/button\"\r\nimport { voucherOptions, columns } from \"./constant\"\r\n\r\nconst AccountsSummary = () => {\r\n    const { state, onChange } = useFormManager({ initialValues: { type: \"C\" } })\r\n    const {\r\n        tableRef,\r\n         fetchTableData,\r\n        } = useCreateTableActionRef()\r\n    const handleSearch = useCallback(() => {\r\n        fetchTableData(\r\n            {\r\n                type: state.type,\r\n            }\r\n        )\r\n    }, [fetchTableData, state.type])\r\n    return (\r\n        <>\r\n            <Flex bordered width=\"100%\" wrap>\r\n                <RadioBox\r\n                    name=\"type\"\r\n                    onChange={onChange}\r\n                    value={state?.type}\r\n                    Label=\"type\"\r\n                    options={voucherOptions}\r\n                />\r\n                  <Button\r\n                        onClick={handleSearch}\r\n                        label=\"search\"\r\n                        width=\"10%\"\r\n                    />\r\n            </Flex>\r\n            <TableWithApi\r\n                ref={tableRef}\r\n                api={\"QUERY_ACCOUNTS_SUMMARY_TABLE\"}\r\n                columns={columns}\r\n                hideTools={false}\r\n                canExcel={true}\r\n                rowKey={\"rowKey\"}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default memo(AccountsSummary)"],"names":["Flex","_ref","children","justifyContent","width","height","_ref$padding","padding","margin","_ref$bordered","bordered","backgroundColor","_ref$borderColor","borderColor","_ref$borderWidth","borderWidth","_ref$borderRadius","borderRadius","_ref$flexDirection","flexDirection","_ref$textAlign","textAlign","_ref$hidden","hidden","wrap","prop","_objectWithoutProperties","_excluded","_useState","useState","_useState2","_slicedToArray","setBorder","useEffect","concat","_jsx","_Fragment","ChackraFlex","_objectSpread","background","memo","Modal","_ref$visible","visible","label","onClose","onOK","_ref$submitTitle","submitTitle","_ref$width","_ref$hideSaveButton","hideSaveButton","_ref$hideCloseButton","hideCloseButton","t","useTranslation","_jsxs","ModalView","isOpen","size","ModalOverlay","ModalContent","ModalHeader","ModalCloseButton","ModalBody","w","ModalFooter","Button","colorScheme","mr","onClick","TableWithApi","ref","api","postApi","columns","_ref$fetchOnFirstRun","fetchOnFirstRun","params","tableProps","checkForParams","_useFetch","useFetch","link","data","runFetch","loading","onSaveAndInsertion","useTableControlsButtons","selectedRow","setSelectedRow","_useState3","_useState4","modal","setModal","handleAdd","useCallback","query_status","handleEdit","handleCloseModal","useImperativeHandle","refreshTable","Table","dataSource","onAdd","onEdit","onDelete","onSelectedRow","row","forwardRef","IconButton","icon","_ref$disabled","disabled","_ref$height","color","_ref$margin","style","border","className","_ref$rowKey","rowKey","_ref$hideTools","hideTools","_ref$canEdit","canEdit","_ref$canAdd","canAdd","_ref$canDelete","canDelete","_ref$canExcel","canExcel","_ref$actionColumn","actionColumn","onAction","_ref$actionLabel","actionLabel","_ref$canPrint","canPrint","additionalButtons","onPrint","onSave","_ref$canSave","canSave","_ref$loading","_ref$onDoubleClick","onDoubleClick","e","console","log","pathname","useLocation","rowSelected","setRowSelected","handleSelectedRow","item","handleDouble","onExcel","pathName","replace","wb","XLSX","book_new","ws","json_to_sheet","book_append_sheet","Date","toUTCString","componentRef","useRef","TableContainer","Text","marginBottom","fontSize","fontWeight","map","button","ReactToPrint","trigger","content","current","documentTitle","Skeleton","isLoaded","fadeDuration","Box","overflowY","ChakraTable","Thead","top","position","bgColor","Tr","Th","maxWidth","minWidth","title","Tbody","column","Td","dataIndex","Array","isArray","length","as","tableRef","fetchTableData","_x","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_tableRef$current","_context","prev","next","abrupt","sent","stop","apply","arguments","_ref$api","newRecord","useMutation","additionalFunctionToRun","method","setRow","updateRecord","deleteRecord","record","value","initialValues","state","setState","hasAnyFieldChangedRef","preValues","usePrevious","areInitialValuesChanged","Object","is","JSON","stringify","resetForm","onChange","eventData","name","_defineProperty","handleRootState","handleSelectWithLabelChange","_objectSpread3","selectLabelName","handleArrayChange","_ref2","_toConsumableArray","_ref$link","_ref$noAuthorization","noAuthorization","runOnSuccess","runOnFail","_ref$method","toast","useToast","url","API_ID","success","setSuccess","authorization","useLocalStorage","postData","dataToPost","settings","fetchResponse","headers","Accept","Authorization","body","fetch","json","response","description","status","duration","isClosable","message","t0","RadioBox","options","Label","props","handleChange","direction","FormLabel","RadioGroup","display","gap","flexWrap","isDisabled","option","Stack","Radio","voucherOptions","AccountsSummary","_useFormManager","useFormManager","type","_useCreateTableAction","useCreateTableActionRef","handleSearch"],"sourceRoot":""}