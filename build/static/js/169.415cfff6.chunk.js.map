{"version":3,"file":"static/js/169.415cfff6.chunk.js","mappings":"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","sources":["../common/button/src/saveButton.tsx","../common/hooks/src/usePrevious.ts","../common/hooks/src/useFormManager.ts","../common/input-text/src/inputText.tsx","../pages/expenses-type-page/src/Partials/ModalView.tsx","../pages/expenses-type-page/src/constant.ts","../pages/expenses-type-page/src/component.tsx"],"sourcesContent":["import React, { memo } from \"react\";\nimport { Button } from '@chakra-ui/react';\nimport { useTranslation } from 'react-i18next';\nimport { saveButtonProp } from \"./interface\"\n\nconst SaveButton = ({\n    saveTitle = 'sv',\n    onOK,\n    disabled,\n    width = \"10%\",\n    margin = \"5px\",\n    padding,\n}: saveButtonProp) => {\n    const { t } = useTranslation()\n    return (\n        <>\n            <Button colorScheme='blue' onClick={onOK} disabled={disabled} style={{\n                width: width,\n                margin: margin,\n                padding: padding\n            }} >{t(saveTitle)}</Button>\n        </>\n    )\n}\n\nexport default memo(SaveButton)","import { useRef, useEffect } from \"react\";\n\nconst usePrevious = <T>(value: T): T => {\n  const ref = useRef<T>();\n\n  useEffect(() => {\n    ref.current = value;\n  });\n\n  return ref.current as T;\n};\n\nexport default usePrevious;\n","import { useState, useCallback, useEffect, useRef } from \"react\";\nimport usePrevious from \"./usePrevious\";\n\ninterface useFormManagerProps {\n  initialValues?: any;\n  setSelectedRow?: any;\n  tableModal?: boolean;\n}\n\nconst useFormManager = ({ initialValues }: useFormManagerProps) => {\n  const [state, setState] = useState<typeof initialValues>(initialValues);\n\n  const hasAnyFieldChangedRef = useRef(false);\n  const preValues = usePrevious(initialValues);\n\n  const areInitialValuesChanged = useCallback(\n    () => !Object.is(JSON.stringify(preValues), JSON.stringify(initialValues)),\n    [initialValues, preValues]\n  );\n\n  useEffect(() => {\n    if (areInitialValuesChanged()) {\n      setState({ ...initialValues });\n    }\n  }, [areInitialValuesChanged, initialValues]);\n\n  const resetForm = useCallback(() => {\n    hasAnyFieldChangedRef.current = false;\n    setState(() => initialValues);\n    // @ts-ignore\n  }, [initialValues]);\n\n  useEffect(\n    () => {\n      return resetForm;\n    },\n    // eslint-disable-next-line\n    []\n  );\n\n  const onChange = useCallback(\n    (eventData: any) => {\n      const { name, value } = eventData;\n      setState({ ...state, [name]: value });\n    },\n    [state]\n  );\n\n  return { state, onChange, resetForm };\n};\n\nexport default useFormManager;\n","import React, { memo, useCallback } from \"react\";\nimport { InputTextProps } from \"./interface\";\nimport { useTranslation } from 'react-i18next';\nimport { Input, FormLabel, Flex } from '@chakra-ui/react'\n\nconst InputText = ({\n    disabled,\n    value,\n    name,\n    Label = \"\",\n    onChange,\n    width = \"200px\",\n    type = \"text\",\n    placeHolder,\n    padding,\n    margin = \"10px\",\n    className = \"\",\n    required = false\n}: InputTextProps) => {\n    const { t } = useTranslation()\n\n    const handleChange = useCallback((event: { target: { value: string; }; }) => {\n        onChange({ name: name, value: event.target.value })\n    }, [name, onChange])\n\n    return (\n        <>\n            <Flex\n                direction=\"column\"\n                width={width}\n                padding={padding}\n                margin={margin}\n            >\n                <FormLabel>{t(Label)}</FormLabel>\n                <Input\n                    placeholder={placeHolder}\n                    size='md'\n                    isDisabled={disabled}\n                    isRequired={required}\n                    onChange={handleChange}\n                    width=\"100%\"\n                    className={className}\n                    value={value}\n                    type={type}\n                />\n            </Flex>\n        </>\n    )\n}\n\nexport default memo(InputText)","import React, { memo } from 'react';\nimport { SaveButton } from \"@commons/button\";\nimport { InputText } from \"@commons/input-text\";\nimport { useFormManager } from \"@commons/hooks\";\nimport { ModalViewProp } from \"@commons/global\";\nimport { useTableControlsButtons } from \"@commons/table\";\n\nconst ModalView = ({\n    onClose,\n    selectedRow,\n    refreshTable\n}: ModalViewProp) => {\n\n    const { onSaveAndInsertion } = useTableControlsButtons({ api: \"POST_EXPENSES_TYPES_TABLE_DATA\", runFetch: refreshTable })\n\n    const { state, onChange } = useFormManager({ initialValues: selectedRow })\n    const { expense_type_name, expense_type_note, query_status, expense_type_id } = state;\n\n    const handleSave = () => {\n        const record = {\n            expense_type_name,\n            expense_type_note,\n            expense_type_id,\n            query_status\n        }\n        onSaveAndInsertion(record)\n        onClose()\n    }\n\n    return (\n        <>\n            <InputText\n                name=\"expense_type_name\"\n                Label='expnsnm'\n                width=\"100%\"\n                onChange={onChange}\n                value={expense_type_name}\n            />\n            <InputText\n                name=\"expense_type_note\"\n                Label='nts'\n                width=\"100%\"\n                onChange={onChange}\n                value={expense_type_note}\n            />\n            <SaveButton\n                onOK={handleSave}\n            />\n        </>\n    )\n};\n\nexport default memo(ModalView)","export const columns = [\n  {\n    title: \"expnsid\",\n    dataIndex: \"expense_type_id\",\n    width: \"23.3%\",\n  },\n  {\n    title: \"expnsnm\",\n    dataIndex: \"expense_type_name\",\n    width: \"43.3%\",\n  },\n  {\n    title: \"nts\",\n    dataIndex: \"expense_type_note\",\n    width: \"33.3%\",\n  },\n];\n","import React, { memo } from \"react\";\nimport ModalView from \"./Partials/ModalView\";\nimport { TableWithApi } from \"@commons/table\";\nimport { columns } from \"./constant\"\n\nconst ExpensesType = () => {\n    return (\n        <>\n            <TableWithApi\n                api={\"QUERY_EXPENSES_TYPES_TABLE_DATA\"}\n                postApi={\"POST_EXPENSES_TYPES_TABLE_DATA\"}\n                columns={columns}\n                hideTools={false}\n                canEdit={true}\n                canAdd={true}\n                canDelete={true}\n                rowKey={\"expense_id\"}\n                ModalContent={ModalView}\n                fetchOnFirstRun\n            />\n        </>\n    )\n}\n\nexport default memo(ExpensesType)"],"names":["SaveButton","saveTitle","onOK","disabled","width","margin","padding","t","useTranslation","colorScheme","onClick","style","memo","value","ref","useRef","useEffect","current","initialValues","useState","state","setState","hasAnyFieldChangedRef","preValues","usePrevious","areInitialValuesChanged","useCallback","Object","is","JSON","stringify","resetForm","onChange","eventData","name","InputText","Label","type","placeHolder","className","required","handleChange","event","target","direction","I","placeholder","size","isDisabled","isRequired","ModalView","onClose","selectedRow","refreshTable","onSaveAndInsertion","useTableControlsButtons","api","runFetch","useFormManager","expense_type_name","expense_type_note","query_status","expense_type_id","columns","title","dataIndex","ExpensesType","postApi","hideTools","canEdit","canAdd","canDelete","rowKey","ModalContent","fetchOnFirstRun"],"sourceRoot":""}