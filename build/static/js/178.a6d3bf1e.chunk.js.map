{"version":3,"file":"static/js/178.a6d3bf1e.chunk.js","mappings":"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","sources":["../common/pdf-viewer/src/hooks/usePdfViewerControl.ts","../common/pdf-viewer/src/index.tsx","../common/confirmation-modal/src/index.tsx","../common/TableView/src/ApiTable.tsx","../common/TableView/src/hooks/useCreateTableActionRef.ts","../common/TableView/src/hooks/useTableControlsButtons.ts","../common/hooks/src/useMutation.ts","../common/page-title/src/baseTitle.tsx","../common/modal/src/style.ts","../common/modal/src/index.tsx","../pages/customers-summary-page/src/constant.ts","../pages/customers-summary-page/src/component.tsx"],"sourcesContent":["import { useRef, useCallback } from \"react\";\r\n\r\nconst usePdfViewerControl = ()=>{\r\n\r\n    const PDFRef = useRef()\r\n\r\n    const handleOpenModal = useCallback(async () =>\r\n    //@ts-ignore\r\n    await PDFRef.current?.handleOpen(),\r\n  [PDFRef])\r\n\r\n    return {\r\n        PDFRef,\r\n        handleOpenModal\r\n    }\r\n}\r\n\r\nexport default usePdfViewerControl","import React, {memo, useImperativeHandle, forwardRef, useState, useCallback} from \"react\";\r\nimport Modal from \"@commons/modal\";\r\n\r\n//TODO: implement pdf viewer type\r\nconst PdfViewer = ({\r\n        reportName,\r\n        params\r\n    }:any,\r\n    ref: any\r\n    ) => {\r\n\r\n        const [visible, setVisible] = useState(false);\r\n        \r\n        const handleOpen = useCallback(()=>{\r\n            setVisible(true);\r\n        },[])\r\n\r\n        const handleClose = useCallback(()=>{\r\n            setVisible(false);\r\n        },[])\r\n\r\n        useImperativeHandle(ref, () => ({\r\n            handleOpen,\r\n            // setTableData: setData,\r\n            // resetTableData: resetData,\r\n            // getCurrentDataSource: data\r\n        }));\r\n\r\n        const computedUrl =`http://192.168.1.250:5000/system_pdf_generate/${reportName}?${new URLSearchParams(params)}`\r\n\r\n    return(\r\n        <Modal\r\n            label=\"PDF Viewer\"\r\n            visible={visible}\r\n            onClose={handleClose}\r\n            noFooter\r\n            width=\"90%\"\r\n            height=\"80%\"\r\n        >\r\n            <object data={computedUrl} width=\"100%\" height=\"100%\">\r\n          {`Your browser does not support pdf files.`}\r\n        </object>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default memo(forwardRef(PdfViewer))\r\nexport * from \"./interface\"\r\nexport {default as usePdfViewerControl} from \"./hooks/usePdfViewerControl\";\r\n","import React, { memo, useCallback } from \"react\";\r\nimport Modal from \"@commons/modal\";\r\nimport {confirmationModal} from \"./interface\"\r\n\r\nconst ConfirmationModal = ({visible, onClose, onConfirm, message}:confirmationModal) => {\r\n\r\n    const handleConfirmation = useCallback(() => {\r\n        onConfirm()\r\n        onClose()\r\n    },[onClose, onConfirm])\r\n\r\n    return (\r\n        <Modal \r\n            label=\"cnfrmtn\"\r\n            visible={visible}\r\n            onClose={onClose}\r\n            width=\"25%\"\r\n            onOK={handleConfirmation}\r\n            submitTitle=\"cnfrm\"\r\n        >\r\n            {message ? message : \"Are you want to continue ?\"}\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default memo(ConfirmationModal)\r\nexport * from \"./interface\"","import React,\r\n{\r\n    memo,\r\n    useState,\r\n    useCallback,\r\n    useImperativeHandle,\r\n    forwardRef,\r\n    useMemo\r\n} from \"react\";\r\nimport PdfViewer, {usePdfViewerControl} from \"@commons/pdf-viewer\";\r\nimport { useFetch } from \"@commons/hooks\"\r\nimport Modal from \"@commons/modal\";\r\nimport ConfirmationModal from \"@commons/confirmation-modal\"\r\nimport Table from \"./Table\";\r\nimport useTableControlsButtons from \"./hooks/useTableControlsButtons\";\r\nimport { TableWithApiProps } from \"./interface\"\r\n\r\n//TODO: change the ref type\r\n\r\nconst TableWithApi = ({\r\n    api,\r\n    postApi,\r\n    columns,\r\n    ModalContent,\r\n    onClick,\r\n    fetchOnFirstRun = false,\r\n    params,\r\n    checkForParams = false,\r\n    modalWidth = \"60%\",\r\n    printProps,\r\n    reportName,\r\n    ...tableProps\r\n}: TableWithApiProps,\r\n    ref: any\r\n) => {\r\n    const { data, runFetch, loading, setData, resetData } = useFetch({ link: api, fetchOnFirstRun: fetchOnFirstRun, params: params, checkForParams: checkForParams })\r\n    const { onSaveAndInsertion } = useTableControlsButtons({ api: postApi, runFetch: runFetch })\r\n    const {PDFRef, handleOpenModal} = usePdfViewerControl()\r\n    const [selectedRow, setSelectedRow] = useState({})\r\n    const [modal, setModal] = useState(false);\r\n    const [confirmModal, setConfirmModal] = useState(false);\r\n    const handleAdd = useCallback(() => {\r\n        setSelectedRow({ query_status: \"n\" })\r\n        setModal(true)\r\n    }, [setSelectedRow])\r\n    const handleEdit = useCallback(() => {\r\n        setSelectedRow({ ...selectedRow, query_status: \"u\" })\r\n        setModal(true)\r\n    }, [selectedRow, setSelectedRow])\r\n    const handleDelete = () => {\r\n        onSaveAndInsertion({ ...selectedRow, query_status: \"d\" })\r\n    }\r\n\r\n    const handleCloseModal = useCallback(() => {\r\n        setModal(false)\r\n    }, [])\r\n\r\n    const handleCloseConfirmModal = useCallback(() => {setConfirmModal(false)},[])\r\n    const handleOpenConfirmModal = useCallback(() => {setConfirmModal(true)},[])\r\n\r\n    const handleSelectedRow = (row: any) => {\r\n        setSelectedRow(row)\r\n        if (onClick) onClick(row)\r\n    };\r\n\r\n    const foundDataSource = useMemo(\r\n        () => data?.data,\r\n        [data?.data]\r\n      );\r\n\r\n      const handlePrint = useCallback(() => {\r\n        selectedRow && handleOpenModal() \r\n      },[handleOpenModal, selectedRow])\r\n\r\n    useImperativeHandle(ref, () => ({\r\n        runFetch,\r\n        setTableData: setData,\r\n        resetTableData: resetData,\r\n        getCurrentDataSource: () => foundDataSource,\r\n    }));\r\n\r\n    return (\r\n        <>\r\n            {ModalContent && <Modal\r\n                visible={modal}\r\n                onClose={handleCloseModal}\r\n                hideCloseButton\r\n                hideSaveButton\r\n                label=\"dtls\"\r\n                noFooter\r\n                width={modalWidth}\r\n            >\r\n                <ModalContent\r\n                    onClose={handleCloseModal}\r\n                    selectedRow={selectedRow}\r\n                    refreshTable={runFetch}\r\n                />\r\n            </Modal>\r\n            }\r\n            <ConfirmationModal\r\n                visible={confirmModal}\r\n                onConfirm={handleDelete}\r\n                onClose={handleCloseConfirmModal}\r\n            />\r\n            <PdfViewer\r\n                ref={PDFRef}\r\n                reportName={reportName}\r\n                params={printProps}\r\n            />\r\n            <Table\r\n                dataSource={data?.data}\r\n                columns={columns}\r\n                onAdd={handleAdd}\r\n                onEdit={handleEdit}\r\n                onPrint={handlePrint}\r\n                onDelete={handleOpenConfirmModal}\r\n                onSelectedRow={handleSelectedRow}\r\n                loading={loading}\r\n                {...tableProps}\r\n            >\r\n            </Table>\r\n\r\n        </>\r\n    )\r\n}\r\nexport default memo(forwardRef(TableWithApi))","import { useRef, useCallback } from \"react\";\r\n\r\nconst useCreateTableActionRef = ()=>{\r\n\r\n    const tableRef = useRef()\r\n\r\n    const fetchTableData = useCallback(async (params?: any) =>\r\n    //@ts-ignore\r\n    await tableRef.current?.runFetch(params),\r\n  [tableRef])\r\n\r\n  const getTableData = useCallback(\r\n    //@ts-ignore\r\n    () => tableRef.current?.getCurrentDataSource() || [],\r\n    [tableRef]\r\n  );\r\n\r\n  const setTableData = useCallback(\r\n    //@ts-ignore\r\n    (newTableData: any) => tableRef.current?.setTableData(newTableData) || [],\r\n    [tableRef]\r\n  );\r\n\r\n  const resetTable = useCallback(\r\n    //@ts-ignore\r\n    () => tableRef.current?.resetTableData() || [],\r\n    [tableRef]\r\n  );\r\n\r\n    return {\r\n        tableRef,\r\n        fetchTableData,\r\n        getTableData,\r\n        setTableData,\r\n        resetTable\r\n    }\r\n}\r\n\r\nexport default useCreateTableActionRef","import { useCallback } from \"react\";\r\nimport { useMutation } from \"@commons/hooks\";\r\n\r\nconst useTableControlsButtons = ({ api = \"\", runFetch }: any) => {\r\n  const { setRow: newRecord } = useMutation({\r\n    link: api,\r\n    additionalFunctionToRun: runFetch,\r\n    method: \"POST\",\r\n  });\r\n  const { setRow: updateRecord } = useMutation({\r\n    link: api,\r\n    additionalFunctionToRun: runFetch,\r\n    method: \"PUT\",\r\n  });\r\n  const { setRow: deleteRecord } = useMutation({\r\n    link: api,\r\n    additionalFunctionToRun: runFetch,\r\n    method: \"Delete\",\r\n  });\r\n\r\n  const onSaveAndInsertion = useCallback(\r\n    (record: any) => {\r\n      if (record.query_status === \"n\") {\r\n        newRecord(record);\r\n      } else if (record.query_status === \"u\") {\r\n        updateRecord(record);\r\n      } else if (record.query_status === \"d\") {\r\n        deleteRecord(record);\r\n      }\r\n    },\r\n    [newRecord, updateRecord, deleteRecord]\r\n  );\r\n\r\n  return { onSaveAndInsertion };\r\n};\r\n\r\nexport default useTableControlsButtons;\r\n","import { useState, useCallback } from \"react\";\r\nimport { useLocalStorage } from \"@commons/hooks\";\r\nimport { API_ID } from \"@commons/global\";\r\nimport { useToast } from \"@chakra-ui/react\";\r\n\r\ninterface useMutationProps {\r\n  link: string;\r\n  noAuthorization?: boolean;\r\n  additionalFunctionToRun?: () => void;\r\n  runOnSuccess?: () => void;\r\n  runOnFail?: () => void;\r\n  method?: string;\r\n}\r\ninterface successType {\r\n  response: string;\r\n}\r\n\r\nconst useMutation = ({\r\n  link = \"\",\r\n  noAuthorization = false,\r\n  additionalFunctionToRun,\r\n  runOnSuccess,\r\n  runOnFail,\r\n  method = \"POST\",\r\n}: useMutationProps) => {\r\n  const toast = useToast();\r\n  //@ts-ignore\r\n  const url = `http://192.168.1.250:5000/api/${API_ID[link]}`;\r\n  const [success, setSuccess] = useState<successType>();\r\n  const { authorization } = useLocalStorage();\r\n  const postData = useCallback(\r\n    async (dataToPost: any) => {\r\n      if (authorization || noAuthorization) {\r\n        const settings = {\r\n          method: method,\r\n          headers: {\r\n            Accept: \"application/json\",\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: `Bearer ${authorization}`,\r\n          },\r\n          body: JSON.stringify(dataToPost),\r\n        };\r\n        try {\r\n          const fetchResponse = await fetch(url, settings);\r\n          const data = await fetchResponse.json();\r\n          if (data.response === \"success\") {\r\n            toast({\r\n              position: \"top-right\",\r\n              title: \"Success\",\r\n              description: `${data.response}`,\r\n              status: \"success\",\r\n              duration: 5000,\r\n              isClosable: true,\r\n            });\r\n            if (runOnSuccess) runOnSuccess();\r\n          } else {\r\n            toast({\r\n              position: \"top-right\",\r\n              title: \"Error\",\r\n              description: `${data.message}`,\r\n              status: \"error\",\r\n              duration: 9000,\r\n              isClosable: true,\r\n            });\r\n            if (runOnFail) runOnFail();\r\n          }\r\n          setSuccess(data);\r\n          if (additionalFunctionToRun) {\r\n            additionalFunctionToRun();\r\n          }\r\n          return data;\r\n        } catch (e) {}\r\n      }\r\n    },\r\n    [\r\n      additionalFunctionToRun,\r\n      authorization,\r\n      method,\r\n      noAuthorization,\r\n      runOnFail,\r\n      runOnSuccess,\r\n      toast,\r\n      url,\r\n    ]\r\n  );\r\n\r\n  const setRow = useCallback(\r\n    (row: any) => {\r\n      postData(row);\r\n    },\r\n    [postData]\r\n  );\r\n\r\n  return { success, setRow };\r\n};\r\n\r\nexport default useMutation;\r\n","import React, { memo } from 'react'\r\nimport { useTranslation } from 'react-i18next'\r\n\r\nconst BaseTitle = ({\r\n    value,\r\n    margin,\r\n    padding,\r\n    width = \"\",\r\n    fontSize = \"\",\r\n    color,\r\n    backgroundColor\r\n}: any) => {\r\n    const { t } = useTranslation()\r\n    return (\r\n        <>\r\n            <strong\r\n                style={{\r\n                    padding: padding,\r\n                    margin: margin,\r\n                    width: width,\r\n                    fontSize: fontSize,\r\n                    color: color,\r\n                    backgroundColor: backgroundColor\r\n                }}>\r\n                {t(value)}\r\n            </strong>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default memo(BaseTitle)","import styled from \"@emotion/styled\";\r\n\r\nexport const ModalContainer = styled.div`\r\n  position: absolute;\r\n\ttop: 0;\r\n\tleft: 0;\r\n\tright: 0;\r\n\tbottom: 0;\r\n\tdisplay: flex;\r\n\talign-items: center;\r\n\tjustify-content: center;\r\n\tbackground-color: rgba(0, 0, 0, 0.5);\r\n    z-index: 1;\r\n`\r\n\r\nexport const ModalContent = styled.div<{width: string, height?: string}>`\r\n /* position: relative;\r\n    margin: 5% auto;\r\n    padding: 20px;\r\n    border: 1px solid #888;\r\n    width: ${({width})=> width};\r\n    height: ${({height})=> height};\r\n    background-color: white;\r\n    border-radius: 15px; */\r\n    /* max-height: 90vh;\r\n\tmax-width: 500px; */\r\n    width: ${({width})=> width};\r\n    height: ${({height})=> height};\r\n\tmargin-left: auto;\r\n\tmargin-right: auto;\r\n\tbackground-color: #fff;\r\n\tborder-radius: 15px;\r\n\toverflow: hidden;\r\n\tdisplay: flex;\r\n\tflex-direction: column;\r\n\tbox-shadow: 0 15px 30px 0 rgba(#000, 0.25);\r\n\t@media (max-width: 600px) {\r\n\t\twidth: 90%;\r\n\t}\r\n`\r\n\r\nexport const ModalHeader = styled.div`\r\n\tpadding: 15px 32px;\r\n\tborder-bottom: 1px solid #ddd;\r\n\tdisplay: flex;\r\n\talign-items: center;\r\n\tjustify-content: space-between;\r\n`\r\n\r\nexport const ModalBody = styled.div`\r\n\tpadding: 10px 32px;\r\n\toverflow-y: auto;\r\n    height: 100%;\r\n`\r\n\r\nexport const ModalFooter = styled.div`\r\n    padding: 15px 32px;\r\n\tdisplay: flex;\r\n\talign-items: center;\r\n\tjustify-content: flex-end;\r\n\tborder-top: 1px solid #ddd;\r\n\tgap: 12px;\r\n\tposition: relative;\r\n\t&:after {\r\n\t\tcontent: \"\";\r\n\t\tdisplay: block;\r\n\t\tposition: absolute;\r\n\t\ttop: -51px;\r\n\t\tleft: 24px;\r\n\t\tright: 24px;\r\n\t\theight: 50px;\r\n\t\tflex-shrink: 0;\r\n\t\tbackground-image: linear-gradient(to top, rgba(#fff, 0.75), transparent);\r\n\t\tpointer-events: none;\r\n\t}\r\n`","import React, { memo } from 'react';\r\nimport {Button} from \"@commons/button\";\r\nimport {BaseTitle} from \"@commons/page-title\"\r\nimport Flex from \"@commons/flex\"\r\nimport {ModalContainer, ModalContent, ModalHeader, ModalBody, ModalFooter} from \"./style\"\r\n\r\ninterface ModalProp {\r\n    visible?: boolean,\r\n    children?: any,\r\n    label: string,\r\n    onOK?: () => void,\r\n    onClose?: () => void,\r\n    submitTitle?: string,\r\n    width?: string;\r\n    hideSaveButton?: boolean;\r\n    hideCloseButton?: boolean;\r\n    height?: string;\r\n    noFooter?: boolean;\r\n}\r\n\r\nconst Modal = (\r\n    {\r\n        children,\r\n        visible = false,\r\n        label,\r\n        onClose,\r\n        onOK,\r\n        submitTitle = \"smbt\",\r\n        width = \"90%\",\r\n        height = \"auto\",\r\n        hideSaveButton = false,\r\n        hideCloseButton = false,\r\n        noFooter = false\r\n    }: ModalProp\r\n) => {\r\n\r\n    return (\r\n        <>\r\n        {visible &&\r\n            <ModalContainer hidden={!visible}>\r\n  <ModalContent width={width} height={height}>\r\n    <ModalHeader>\r\n        <BaseTitle value={label} />\r\n        <Button label='&times;' backGround='none' margin='0' padding='0' data-dismiss=\"modal\" onClick={onClose} />\r\n    </ModalHeader>\r\n\r\n    <ModalBody>\r\n        <Flex width=\"100%\" padding=\"0\" wrap=\"wrap\" height=\"100%\">\r\n      {children}\r\n      </Flex>\r\n    </ModalBody>\r\n\r\n    {!noFooter &&\r\n        <ModalFooter hidden={noFooter}>\r\n            {!hideSaveButton && <Button onClick={onOK} label={submitTitle} hidden={hideSaveButton} width='20%' margin='0' />}\r\n            {!hideCloseButton && <Button onClick={onClose} label='cls' hidden={hideCloseButton} width='20%' backGround='red' margin='0' />}\r\n        </ModalFooter>\r\n    }\r\n  </ModalContent>\r\n</ModalContainer>\r\n        }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default memo(Modal);","export const columns = [\r\n  {\r\n    title: \"cstmr\",\r\n    dataIndex: \"customer_name\",\r\n    width: \"13%\",\r\n  },\r\n  {\r\n    title: \"dt\",\r\n    dataIndex: \"date\",\r\n    width: \"13%\",\r\n  },\r\n  {\r\n    title: \"crdt\",\r\n    dataIndex: \"credit\",\r\n    width: \"15%\",\r\n  },\r\n  {\r\n    title: \"dbt\",\r\n    dataIndex: \"debit\",\r\n    width: \"15%\",\r\n  },\r\n  {\r\n    title: \"blnc\",\r\n    dataIndex: \"balance\",\r\n    width: \"15%\",\r\n  },\r\n  {\r\n    title: \"dscrptn\",\r\n    dataIndex: \"description\",\r\n    width: \"25%\",\r\n  },\r\n];\r\n","import React, { memo, useCallback } from \"react\";\r\nimport Flex from \"@commons/flex\";\r\nimport InputText from \"@commons/input-text/src/inputText\";\r\nimport { SelectWithApi } from \"@commons/select\";\r\nimport { TableWithApi, useCreateTableActionRef } from \"@commons/table\";\r\nimport { useFormManager } from \"@commons/hooks\";\r\nimport { SearchAndClearButton } from \"@commons/button\";\r\nimport { columns } from \"./constant\";\r\n\r\nconst CustomersSummaryPage = () => {\r\n    const { state, onChange } = useFormManager({ initialValues: { date_from: \"\", date_to: \"\", customer_id: \"\" } })\r\n    const {\r\n        tableRef,\r\n        fetchTableData,\r\n    } = useCreateTableActionRef()\r\n\r\n    const handleSearch = useCallback(() => {\r\n        fetchTableData(\r\n            {\r\n                customer_id: state.customer_id,\r\n                // date_from: state.date_from,\r\n                // date_to: state.date_to\r\n            }\r\n        )\r\n    }, [fetchTableData, state.customer_id])\r\n    return (\r\n        <>\r\n            <Flex width=\"100%\" flexDirection=\"column\">\r\n                <Flex width=\"100%\" >\r\n                    <SelectWithApi\r\n                        label=\"cstmr\"\r\n                        fetchOnFirstRun\r\n                        name=\"customer_id\"\r\n                        value={state.customer_id}\r\n                        onChange={onChange}\r\n                        api=\"QUERY_CUSTOMERS_LIST\"\r\n                    />\r\n                    <InputText\r\n                        name=\"date_from\"\r\n                        type=\"date\"\r\n                        label=\"frm\"\r\n                        onChange={onChange}\r\n                    />\r\n                    <InputText\r\n                        name=\"date_to\"\r\n                        type=\"date\"\r\n                        label=\"to\"\r\n                        onChange={onChange}\r\n                    />\r\n                    <SearchAndClearButton\r\n                        onSearch={handleSearch}\r\n                        width=\"20%\"\r\n                    />\r\n                </Flex>\r\n                <TableWithApi\r\n                    ref={tableRef}\r\n                    api={\"QUERY_CUSTOMER_SUMMARY_TABLE\"}\r\n                    columns={columns}\r\n                    rowKey={\"rowKey\"}\r\n                    hideTools={false}\r\n                    canExcel\r\n                />\r\n            </Flex>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default memo(CustomersSummaryPage)"],"names":["usePdfViewerControl","PDFRef","useRef","handleOpenModal","useCallback","async","_PDFRef$current","current","handleOpen","PdfViewer","_ref","ref","reportName","params","visible","setVisible","useState","handleClose","useImperativeHandle","computedUrl","concat","URLSearchParams","_jsx","Modal","label","onClose","noFooter","width","height","children","data","memo","forwardRef","ConfirmationModal","onConfirm","message","handleConfirmation","onOK","submitTitle","TableWithApi","api","postApi","columns","ModalContent","onClick","fetchOnFirstRun","checkForParams","modalWidth","printProps","tableProps","runFetch","loading","setData","resetData","useFetch","link","onSaveAndInsertion","useTableControlsButtons","selectedRow","setSelectedRow","modal","setModal","confirmModal","setConfirmModal","handleAdd","query_status","handleEdit","handleCloseModal","handleCloseConfirmModal","handleOpenConfirmModal","foundDataSource","useMemo","handlePrint","setTableData","resetTableData","getCurrentDataSource","_jsxs","_Fragment","hideCloseButton","hideSaveButton","refreshTable","handleDelete","Table","dataSource","onAdd","onEdit","onPrint","onDelete","onSelectedRow","row","useCreateTableActionRef","tableRef","fetchTableData","_tableRef$current","getTableData","_tableRef$current2","newTableData","_tableRef$current3","resetTable","_tableRef$current4","setRow","newRecord","useMutation","additionalFunctionToRun","method","updateRecord","deleteRecord","record","noAuthorization","runOnSuccess","runOnFail","toast","useToast","url","API_ID","success","setSuccess","authorization","useLocalStorage","postData","settings","headers","Accept","Authorization","body","JSON","stringify","dataToPost","fetchResponse","fetch","json","response","position","title","description","status","duration","isClosable","e","BaseTitle","value","margin","padding","fontSize","color","backgroundColor","t","useTranslation","style","ModalContainer","styled","div","_templateObject","_taggedTemplateLiteral","_templateObject2","_ref2","_ref3","_ref4","ModalHeader","_templateObject3","ModalBody","_templateObject4","ModalFooter","_templateObject5","hidden","Button","backGround","Flex","wrap","dataIndex","CustomersSummaryPage","state","onChange","useFormManager","initialValues","date_from","date_to","customer_id","handleSearch","flexDirection","SelectWithApi","name","InputText","type","SearchAndClearButton","onSearch","rowKey","hideTools","canExcel"],"sourceRoot":""}