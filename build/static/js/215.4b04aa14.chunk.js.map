{"version":3,"file":"static/js/215.4b04aa14.chunk.js","mappings":"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","sources":["../common/hooks/src/usePrevious.ts","../common/hooks/src/useFormManager.ts","../common/input-text/src/inputText.tsx","../pages/casher-receipt-voucher-page/src/constant.ts","../pages/casher-receipt-voucher-page/src/component.tsx"],"sourcesContent":["import { useRef, useEffect } from \"react\";\n\nconst usePrevious = <T>(value: T): T => {\n  const ref = useRef<T>();\n\n  useEffect(() => {\n    ref.current = value;\n  });\n\n  return ref.current as T;\n};\n\nexport default usePrevious;\n","import { useState, useCallback, useEffect, useRef } from \"react\";\nimport usePrevious from \"./usePrevious\";\n\ninterface useFormManagerProps {\n  initialValues?: any;\n  setSelectedRow?: any;\n  tableModal?: boolean;\n}\n\nconst useFormManager = ({ initialValues }: useFormManagerProps) => {\n  const [state, setState] = useState<typeof initialValues>(initialValues);\n\n  const hasAnyFieldChangedRef = useRef(false);\n  const preValues = usePrevious(initialValues);\n\n  const areInitialValuesChanged = useCallback(\n    () => !Object.is(JSON.stringify(preValues), JSON.stringify(initialValues)),\n    [initialValues, preValues]\n  );\n\n  useEffect(() => {\n    if (areInitialValuesChanged()) {\n      setState({ ...initialValues });\n    }\n  }, [areInitialValuesChanged, initialValues]);\n\n  const resetForm = useCallback(() => {\n    hasAnyFieldChangedRef.current = false;\n    setState(() => initialValues);\n    // @ts-ignore\n  }, [initialValues]);\n\n  useEffect(\n    () => {\n      return resetForm;\n    },\n    // eslint-disable-next-line\n    []\n  );\n\n  const onChange = useCallback(\n    (eventData: any) => {\n      const { name, value } = eventData;\n      setState({ ...state, [name]: value });\n    },\n    [state]\n  );\n\n  return { state, onChange, resetForm };\n};\n\nexport default useFormManager;\n","import React, { memo, useCallback } from \"react\";\nimport { InputTextProps } from \"./interface\";\nimport { useTranslation } from 'react-i18next';\nimport { Input, FormLabel, Flex } from '@chakra-ui/react'\n\nconst InputText = ({\n    disabled,\n    value,\n    name,\n    Label = \"\",\n    onChange,\n    width = \"200px\",\n    type = \"text\",\n    placeHolder,\n    padding,\n    margin = \"10px\",\n    className = \"\",\n    required = false\n}: InputTextProps) => {\n    const { t } = useTranslation()\n\n    const handleChange = useCallback((event: { target: { value: string; }; }) => {\n        onChange({ name: name, value: event.target.value })\n    }, [name, onChange])\n\n    return (\n        <>\n            <Flex\n                direction=\"column\"\n                width={width}\n                padding={padding}\n                margin={margin}\n            >\n                <FormLabel>{t(Label)}</FormLabel>\n                <Input\n                    placeholder={placeHolder}\n                    size='md'\n                    isDisabled={disabled}\n                    isRequired={required}\n                    onChange={handleChange}\n                    width=\"100%\"\n                    className={className}\n                    value={value}\n                    type={type}\n                />\n            </Flex>\n        </>\n    )\n}\n\nexport default memo(InputText)","export const columns = [\n        {\n            title: \"dt\",\n            dataIndex: \"date\",\n            width: \"10%\"\n        },\n        {\n            title: \"amnt\",\n            dataIndex: \"amount\",\n            width: \"10%\"\n        },\n        {\n            title: \"vchrnm\",\n            dataIndex: \"voucher_name\",\n            width: \"10%\"\n        },\n        {\n            title: \"cstmrnm\",\n            dataIndex: \"customer_name\",\n            width: \"15%\"\n        },\n        {\n            title: \"splrnm\",\n            dataIndex: \"supplier_name\",\n            width: \"15%\"\n        },\n        {\n            title: \"nts\",\n            dataIndex: \"notes\",\n            width: \"10%\"\n        }\n    ]\n\nexport const voucherOptions = [\n    {\n        label: \"splr\",\n        value: 1,\n    },\n    {\n        label: \"cstmr\",\n        value: 2,\n    }\n]","import React, { memo } from \"react\";\nimport Flex from \"@commons/flex\";\nimport InputText from \"@commons/input-text/src/inputText\";\nimport { TableWithApi } from \"@commons/table\";\nimport { columns } from \"./constant\";\nimport { useFormManager } from \"@commons/hooks\";\nimport ModalView from \"./Partials/modalView\"\n\nconst CasherReceiptVoucher = () => {\n\n    const { state, onChange } = useFormManager({ initialValues: { date_from: \"\", date_to: \"\" } })\n\n    return (\n        <>\n            <Flex width=\"100%\" flexDirection=\"column\">\n                <Flex width=\"100%\" >\n                    <InputText name=\"date_from\" type=\"date\" Label=\"from\" onChange={onChange} />\n                    <InputText name=\"date_to\" type=\"date\" Label=\"to\" onChange={onChange} />\n                </Flex>\n                <TableWithApi\n                    api={\"QUERY_CASHER_RECEIPT_VOUCHER_TABLE_DATA\"}\n                    postApi={\"POST_CASHER_RECEIPT_VOUCHER_TABLE_DATA\"}\n                    columns={columns}\n                    hideTools={false}\n                    canEdit={true}\n                    canAdd={true}\n                    canDelete={true}\n                    rowKey={\"receipt_voucher_id\"}\n                    params={{\n                        date_from: state.date_from,\n                        date_to: state.date_to\n                    }}\n                    ModalContent\n                    fetchOnFirstRun\n                />\n            </Flex>\n        </>\n    )\n}\n\nexport default memo(CasherReceiptVoucher)"],"names":["value","ref","useRef","useEffect","current","initialValues","useState","state","setState","hasAnyFieldChangedRef","preValues","usePrevious","areInitialValuesChanged","useCallback","Object","is","JSON","stringify","resetForm","onChange","eventData","name","InputText","disabled","Label","width","type","placeHolder","padding","margin","className","required","t","useTranslation","handleChange","event","target","direction","I","placeholder","size","isDisabled","isRequired","memo","columns","title","dataIndex","CasherReceiptVoucher","useFormManager","date_from","date_to","flexDirection","api","postApi","hideTools","canEdit","canAdd","canDelete","rowKey","params","ModalContent","fetchOnFirstRun"],"sourceRoot":""}