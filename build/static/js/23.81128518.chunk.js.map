{"version":3,"file":"static/js/23.81128518.chunk.js","mappings":"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","sources":["../common/Flex/src/index.tsx","../common/Select/src/styled.ts","../common/Select/src/select.tsx","../common/Select/src/selectWithApi.tsx","../common/pdf-viewer/src/hooks/usePdfViewerControl.ts","../common/pdf-viewer/src/index.tsx","../common/confirmation-modal/src/index.tsx","../common/TableView/src/ApiTable.tsx","../common/TableView/src/Table.tsx","../common/TableView/src/hooks/useCreateTableActionRef.ts","../common/TableView/src/hooks/useTableControlsButtons.ts","../common/button/src/constants.ts","../common/button/src/iconButton.tsx","../common/hooks/src/usePrevious.ts","../common/hooks/src/useFormManager.ts","../common/hooks/src/useMutation.ts","../common/input-text/src/styled.ts","../common/input-text/src/inputText.tsx","../common/page-title/src/baseTitle.tsx","../common/modal/src/style.ts","../common/modal/src/index.tsx","../pages/supplier-summary-page/src/constant.ts","../pages/supplier-summary-page/src/component.tsx","../node_modules/@chakra-ui/form-control/src/form-label.tsx","../node_modules/@chakra-ui/form-control/src/form-control.tsx"],"sourcesContent":["import React, { memo, useEffect, useState } from \"react\";\r\nimport { Flex as ChackraFlex } from \"@chakra-ui/react\"\r\nimport { flexProp } from \"./interface\"\r\n\r\nconst Flex = ({\r\n    children,\r\n    justifyContent,\r\n    width,\r\n    height,\r\n    padding = \"10px\",\r\n    margin,\r\n    bordered = false,\r\n    backgroundColor,\r\n    borderColor = \"#3c8dcf\",\r\n    borderWidth = \"px\",\r\n    borderRadius = \"5px\",\r\n    flexDirection = \"row\",\r\n    textAlign = \"\",\r\n    hidden = false,\r\n    wrap,\r\n    ...prop\r\n}: any) => {\r\n    const [border, setBorder] = useState(\"\")\r\n    useEffect(() => {\r\n        if (bordered) {\r\n            setBorder(`${borderWidth} solid ${borderColor}`)\r\n        }\r\n    }, [borderColor, borderWidth, bordered])\r\n    return (\r\n        <>\r\n            <ChackraFlex\r\n                width={width}\r\n                height={height}\r\n                padding={padding}\r\n                margin={margin}\r\n                background={backgroundColor}\r\n                borderRadius={borderRadius}\r\n                flexDirection={flexDirection}\r\n                textAlign={textAlign}\r\n                justifyContent={justifyContent}\r\n                hidden={hidden}\r\n                //@ts-ignore\r\n                wrap={wrap ? \"wrap\" : \"\"}\r\n                {...prop}\r\n            >\r\n                {children}\r\n            </ChackraFlex>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default memo(Flex)","import styled from \"@emotion/styled\";\r\n\r\nexport const StyledSelect = styled.select`\r\n  background: #fdfdfd;\r\n  border: 0.5px solid #cbd5e0;\r\n  height: 100%;\r\n  width: 100%;\r\n  border-radius: 7px;\r\n  padding: 0 10px;\r\n`;\r\n\r\nexport const StyledOption = styled.option`\r\n  padding: 100px;\r\n`;\r\n\r\n// export const DropDownContainer = styled.span`\r\n//   margin: 0;\r\n//   min-width: 100%;\r\n//   position: relative;\r\n//   display: inline-block;\r\n//   min-height: 2em;\r\n//   max-height: 2em;\r\n//   overflow: hidden;\r\n//   top: 0.5em;\r\n//   cursor: pointer;\r\n//   text-align: left;\r\n//   white-space: nowrap;\r\n//   color: #444;\r\n//   outline: none;\r\n//   border: 0.06em solid transparent;\r\n//   border-radius: 1em;\r\n//   background-color: #cde4f5;\r\n//   transition: 0.3s all ease-in-out;\r\n\r\n//   &::after {\r\n//     content: \"\";\r\n//     position: absolute;\r\n//     right: 0.8em;\r\n//     top: 0.9em;\r\n//     border: 0.3em solid #3694d7;\r\n//     border-color: #3694d7 transparent transparent transparent;\r\n//     transition: 0.4s all ease-in-out;\r\n//   }\r\n\r\n//   /* &:nth-child(2) {\r\n//     border-top: 0.06em solid #d9d9d9;\r\n//   } */\r\n// `;\r\n\r\n// export const SelectInputRadio = styled.input`\r\n//   width: 1px;\r\n//   height: 1px;\r\n//   display: inline-block;\r\n//   position: absolute;\r\n//   opacity: 0.01;\r\n\r\n//   &:focus {\r\n//     background: #def;\r\n//   }\r\n\r\n//   /* &:checked {\r\n//     display: block;\r\n//     border-top: none;\r\n//     position: absolute;\r\n//     top: 0;\r\n//     width: 100%;\r\n//   } */\r\n// `;\r\n\r\n// export const SelectLabel = styled.label`\r\n//   border-top: 0.06em solid #d9d9d9;\r\n//   display: block;\r\n//   height: 2em;\r\n//   line-height: 2em;\r\n//   padding-left: 1em;\r\n//   padding-right: 3em;\r\n//   cursor: pointer;\r\n//   position: relative;\r\n//   transition: 0.3s color ease-in-out;\r\n// `;\r\n\r\n// <DropDownContainer\r\n//   className={`dropdown-el ${expanded ? \"expanded\" : \"\"}`}\r\n// >\r\n//   {/* <input type=\"radio\" name=\"sortType\" value=\"Relevance\" id=\"sort-relevance\" onClick={handleValue} /><label htmlFor=\"sort-relevance\">Relevance</label> */}\r\n//   <SelectInputRadio type=\"radio\" />\r\n//   <SelectLabel htmlFor=\"sort-best\">Product Popularity</SelectLabel>\r\n//   <SelectInputRadio\r\n//     onClick={handleValue}\r\n//     type=\"radio\"\r\n//     name=\"sortType\"\r\n//     value=\"PriceIncreasing\"\r\n//     id=\"sort-low\"\r\n//   />\r\n//   <SelectLabel htmlFor=\"sort-low\">Price Low to High</SelectLabel>\r\n//   <SelectInputRadio\r\n//     onClick={handleValue}\r\n//     type=\"radio\"\r\n//     name=\"sortType\"\r\n//     value=\"PriceDecreasing\"\r\n//     id=\"sort-high\"\r\n//   />\r\n//   <SelectLabel htmlFor=\"sort-high\">Price High to Low</SelectLabel>\r\n//   <SelectInputRadio\r\n//     onClick={handleValue}\r\n//     type=\"radio\"\r\n//     name=\"sortType\"\r\n//     value=\"ProductBrand\"\r\n//     id=\"sort-brand\"\r\n//   />\r\n//   <SelectLabel htmlFor=\"sort-brand\">Product Brand</SelectLabel>\r\n//   <SelectInputRadio\r\n//     onClick={handleValue}\r\n//     type=\"radio\"\r\n//     name=\"sortType\"\r\n//     value=\"ProductName\"\r\n//     id=\"sort-name\"\r\n//   />\r\n//   <SelectLabel htmlFor=\"sort-name\">Product Name</SelectLabel>\r\n// </DropDownContainer>;\r\n","import React, { memo } from \"react\";\r\nimport { useTranslation } from 'react-i18next';\r\nimport { FormLabel, Flex } from '@chakra-ui/react';\r\nimport { StyledSelect, StyledOption } from \"./styled\"\r\nimport { SelectProps } from \"./interface\";\r\n\r\nconst Select = ({\r\n    height = \"65px\",\r\n    width = \"200px\",\r\n    Options,\r\n    onChange,\r\n    label,\r\n    value = 0,\r\n    name,\r\n    withLabel = false,\r\n    margin = \"10px\",\r\n    padding,\r\n    placeholder = \"Select\",\r\n    selectLabelName = \"label_select\",\r\n}: SelectProps) => {\r\n    const { t } = useTranslation()\r\n    //@ts-ignore\r\n    const handleValue = (event) => {\r\n        if (Array.isArray(Options)) {\r\n            Options.forEach((option) => {\r\n                if (option.value === +event.target.value) {\r\n                    if (withLabel) {\r\n                        onChange({ value: option.value, selectLabelName: selectLabelName, label: option.label, name: name })\r\n                    } else {\r\n                        onChange({ value: option.value, name: name })\r\n                    }\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Flex\r\n                direction=\"column\"\r\n                width={width}\r\n                padding={padding}\r\n                margin={margin}\r\n                height={height}\r\n            >\r\n                <FormLabel fontSize='md' as=\"b\" margin=\"0 0 5px\">{t(label)}</FormLabel>\r\n                <StyledSelect\r\n                    placeholder={t(placeholder)}\r\n                    onChange={handleValue}\r\n                >\r\n                    <StyledOption>{t(\"Select\")}</StyledOption>\r\n                    {Array.isArray(Options) && Options.length !== 0 ? Options.map((Option) => {\r\n                        return (\r\n                            <StyledOption key={Option.value} value={Option.value} selected={value === Option.value && true}> {t(Option.label)}</StyledOption>\r\n                        )\r\n                    }) : <StyledOption disabled>{t(\"No data\")}</StyledOption>}\r\n                </StyledSelect>\r\n            </Flex>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default memo(Select)","import React, { memo } from \"react\";\r\nimport Select from \"./select\";\r\nimport { useFetch } from \"@commons/hooks\"\r\nimport { SelectWithApiProps } from \"./interface\"\r\n\r\nconst SelectWithApi = ({\r\n    width,\r\n    api,\r\n    onChange,\r\n    label,\r\n    name = \"\",\r\n    value = 0,\r\n    withLabel = false,\r\n    padding,\r\n    margin,\r\n    params,\r\n    selectLabelName = \"label_select\"\r\n}: SelectWithApiProps) => {\r\n\r\n    const { data } = useFetch({\r\n        link: api,\r\n        fetchOnFirstRun: true,\r\n        params: params,\r\n        checkForParams: true\r\n    })\r\n\r\n    return (\r\n        <>\r\n            <Select\r\n                Options={data}\r\n                onChange={onChange}\r\n                label={label}\r\n                value={value}\r\n                name={name}\r\n                width={width}\r\n                withLabel={withLabel}\r\n                margin={margin}\r\n                padding={padding}\r\n                selectLabelName={selectLabelName}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default memo(SelectWithApi);","import { useRef, useCallback } from \"react\";\r\n\r\nconst usePdfViewerControl = ()=>{\r\n\r\n    const PDFRef = useRef()\r\n\r\n    const handleOpenModal = useCallback(async () =>\r\n    //@ts-ignore\r\n    await PDFRef.current?.handleOpen(),\r\n  [PDFRef])\r\n\r\n    return {\r\n        PDFRef,\r\n        handleOpenModal\r\n    }\r\n}\r\n\r\nexport default usePdfViewerControl","import React, {memo, useImperativeHandle, forwardRef, useState, useCallback} from \"react\";\r\nimport Modal from \"@commons/modal\";\r\n\r\n//TODO: implement pdf viewer type\r\nconst PdfViewer = ({\r\n        reportName,\r\n        params\r\n    }:any,\r\n    ref: any\r\n    ) => {\r\n\r\n        const [visible, setVisible] = useState(false);\r\n        \r\n        const handleOpen = useCallback(()=>{\r\n            setVisible(true);\r\n        },[])\r\n\r\n        const handleClose = useCallback(()=>{\r\n            setVisible(false);\r\n        },[])\r\n\r\n        useImperativeHandle(ref, () => ({\r\n            handleOpen,\r\n            // setTableData: setData,\r\n            // resetTableData: resetData,\r\n            // getCurrentDataSource: data\r\n        }));\r\n\r\n        const computedUrl =`http://192.168.1.250:5000/system_pdf_generate/${reportName}?${new URLSearchParams(params)}`\r\n\r\n    return(\r\n        <Modal\r\n            label=\"PDF Viewer\"\r\n            visible={visible}\r\n            onClose={handleClose}\r\n            noFooter\r\n            width=\"90%\"\r\n            height=\"80%\"\r\n        >\r\n            <object data={computedUrl} width=\"100%\" height=\"100%\">\r\n          {`Your browser does not support pdf files.`}\r\n        </object>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default memo(forwardRef(PdfViewer))\r\nexport * from \"./interface\"\r\nexport {default as usePdfViewerControl} from \"./hooks/usePdfViewerControl\";\r\n","import React, { memo, useCallback } from \"react\";\r\nimport Modal from \"@commons/modal\";\r\nimport {confirmationModal} from \"./interface\"\r\n\r\nconst ConfirmationModal = ({visible, onClose, onConfirm, message}:confirmationModal) => {\r\n\r\n    const handleConfirmation = useCallback(() => {\r\n        onConfirm()\r\n        onClose()\r\n    },[onClose, onConfirm])\r\n\r\n    return (\r\n        <Modal \r\n            label=\"cnfrmtn\"\r\n            visible={visible}\r\n            onClose={onClose}\r\n            width=\"25%\"\r\n            onOK={handleConfirmation}\r\n            submitTitle=\"cnfrm\"\r\n        >\r\n            {message ? message : \"Are you want to continue ?\"}\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default memo(ConfirmationModal)\r\nexport * from \"./interface\"","import React,\r\n{\r\n    memo,\r\n    useState,\r\n    useCallback,\r\n    useImperativeHandle,\r\n    forwardRef,\r\n    useMemo\r\n} from \"react\";\r\nimport PdfViewer, {usePdfViewerControl} from \"@commons/pdf-viewer\";\r\nimport { useFetch } from \"@commons/hooks\"\r\nimport Modal from \"@commons/modal\";\r\nimport ConfirmationModal from \"@commons/confirmation-modal\"\r\nimport Table from \"./Table\";\r\nimport useTableControlsButtons from \"./hooks/useTableControlsButtons\";\r\nimport { TableWithApiProps } from \"./interface\"\r\n\r\n//TODO: change the ref type\r\n\r\nconst TableWithApi = ({\r\n    api,\r\n    postApi,\r\n    columns,\r\n    ModalContent,\r\n    onClick,\r\n    fetchOnFirstRun = false,\r\n    params,\r\n    checkForParams = false,\r\n    modalWidth = \"60%\",\r\n    printProps,\r\n    reportName,\r\n    ...tableProps\r\n}: TableWithApiProps,\r\n    ref: any\r\n) => {\r\n    const { data, runFetch, loading, setData, resetData } = useFetch({ link: api, fetchOnFirstRun: fetchOnFirstRun, params: params, checkForParams: checkForParams })\r\n    const { onSaveAndInsertion } = useTableControlsButtons({ api: postApi, runFetch: runFetch })\r\n    const {PDFRef, handleOpenModal} = usePdfViewerControl()\r\n    const [selectedRow, setSelectedRow] = useState({})\r\n    const [modal, setModal] = useState(false);\r\n    const [confirmModal, setConfirmModal] = useState(false);\r\n    const handleAdd = useCallback(() => {\r\n        setSelectedRow({ query_status: \"n\" })\r\n        setModal(true)\r\n    }, [setSelectedRow])\r\n    const handleEdit = useCallback(() => {\r\n        setSelectedRow({ ...selectedRow, query_status: \"u\" })\r\n        setModal(true)\r\n    }, [selectedRow, setSelectedRow])\r\n    const handleDelete = () => {\r\n        onSaveAndInsertion({ ...selectedRow, query_status: \"d\" })\r\n    }\r\n\r\n    const handleCloseModal = useCallback(() => {\r\n        setModal(false)\r\n    }, [])\r\n\r\n    const handleCloseConfirmModal = useCallback(() => {setConfirmModal(false)},[])\r\n    const handleOpenConfirmModal = useCallback(() => {setConfirmModal(true)},[])\r\n\r\n    const handleSelectedRow = (row: any) => {\r\n        setSelectedRow(row)\r\n        if (onClick) onClick(row)\r\n    };\r\n\r\n    const foundDataSource = useMemo(\r\n        () => data?.data,\r\n        [data?.data]\r\n      );\r\n\r\n      const handlePrint = useCallback(() => {\r\n        selectedRow && handleOpenModal() \r\n      },[handleOpenModal, selectedRow])\r\n\r\n    useImperativeHandle(ref, () => ({\r\n        runFetch,\r\n        setTableData: setData,\r\n        resetTableData: resetData,\r\n        getCurrentDataSource: () => foundDataSource,\r\n    }));\r\n\r\n    return (\r\n        <>\r\n            {ModalContent && <Modal\r\n                visible={modal}\r\n                onClose={handleCloseModal}\r\n                hideCloseButton\r\n                hideSaveButton\r\n                label=\"dtls\"\r\n                noFooter\r\n                width={modalWidth}\r\n            >\r\n                <ModalContent\r\n                    onClose={handleCloseModal}\r\n                    selectedRow={selectedRow}\r\n                    refreshTable={runFetch}\r\n                />\r\n            </Modal>\r\n            }\r\n            <ConfirmationModal\r\n                visible={confirmModal}\r\n                onConfirm={handleDelete}\r\n                onClose={handleCloseConfirmModal}\r\n            />\r\n            <PdfViewer\r\n                ref={PDFRef}\r\n                reportName={reportName}\r\n                params={printProps}\r\n            />\r\n            <Table\r\n                dataSource={data?.data}\r\n                columns={columns}\r\n                onAdd={handleAdd}\r\n                onEdit={handleEdit}\r\n                onPrint={handlePrint}\r\n                onDelete={handleOpenConfirmModal}\r\n                onSelectedRow={handleSelectedRow}\r\n                loading={loading}\r\n                {...tableProps}\r\n            >\r\n            </Table>\r\n\r\n        </>\r\n    )\r\n}\r\nexport default memo(forwardRef(TableWithApi))","import React, { useState, useCallback, useRef } from \"react\";\r\nimport { Button, IconButton } from \"@commons/button\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport * as XLSX from \"xlsx\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport {\r\n  Table as ChakraTable,\r\n  Thead,\r\n  Tbody,\r\n  // Tfoot,\r\n  Text,\r\n  Box,\r\n  Tr,\r\n  Th,\r\n  Td,\r\n  TableContainer,\r\n  Skeleton,\r\n} from \"@chakra-ui/react\";\r\nimport Flex from \"@commons/flex\";\r\nimport { TableProps, additionalButtonsType } from \"./interface\";\r\n\r\nconst Table = ({\r\n  dataSource,\r\n  height = \"300px\",\r\n  rowKey = \"rowKey\",\r\n  columns,\r\n  hideTools = true,\r\n  canEdit = false,\r\n  canAdd = false,\r\n  canDelete = false,\r\n  canExcel = false,\r\n  onAdd,\r\n  onEdit,\r\n  onDelete,\r\n  actionColumn = false,\r\n  onAction,\r\n  actionLabel = \"\",\r\n  onSelectedRow,\r\n  label,\r\n  canPrint = false,\r\n  onPrint,\r\n  additionalButtons,\r\n  onSave,\r\n  canSave = false,\r\n  width = \"100%\",\r\n  margin = \"\",\r\n  padding = \"\",\r\n  loading = false,\r\n  onDoubleClick,\r\n}: TableProps) => {\r\n  const { pathname } = useLocation();\r\n  const { t } = useTranslation();\r\n  const [rowSelected, setRowSelected] = useState();\r\n  const handleSelectedRow = useCallback(\r\n    (item: any) => () => {\r\n      if (onSelectedRow) onSelectedRow(item);\r\n      setRowSelected(item);\r\n    },\r\n    [onSelectedRow]\r\n  );\r\n\r\n  const handleDouble = useCallback(\r\n    (item: any) => () => {\r\n      if (onDoubleClick) onDoubleClick(item);\r\n      setRowSelected(item);\r\n    },\r\n    [onDoubleClick]\r\n  );\r\n\r\n  const onExcel = useCallback(() => {\r\n    const pathName = pathname.replace(\"/\", \"\");\r\n    const wb = XLSX.utils.book_new(),\r\n      //@ts-ignore\r\n      ws = XLSX.utils.json_to_sheet(dataSource);\r\n    XLSX.utils.book_append_sheet(wb, ws, pathName);\r\n    XLSX.writeFile(wb, `${pathName} ${new Date().toUTCString()}.xlsx`);\r\n  }, [dataSource, pathname]);\r\n\r\n  const componentRef = useRef();\r\n\r\n  return (\r\n    <>\r\n      <TableContainer width={width} padding={padding} margin={margin}>\r\n        {label && (\r\n          <Text\r\n            width=\"100%\"\r\n            textAlign=\"center\"\r\n            marginBottom=\"7px\"\r\n            fontSize=\"md\"\r\n            fontWeight=\"bold\"\r\n          >\r\n            {t(label)}\r\n          </Text>\r\n        )}\r\n        <Flex\r\n          width=\"100%\"\r\n          padding=\"0\"\r\n          margin=\"5px 0\"\r\n          justifyContent=\"center\"\r\n          hidden={hideTools}\r\n        >\r\n          <IconButton iconName=\"plus\" onClick={onAdd} hidden={!canAdd} />\r\n          <IconButton\r\n            iconName=\"edit\"\r\n            onClick={onEdit}\r\n            hidden={!canEdit}\r\n            disabled={!rowSelected}\r\n          />\r\n          <IconButton\r\n            iconName=\"delete\"\r\n            onClick={onDelete}\r\n            hidden={!canDelete}\r\n            disabled={!rowSelected}\r\n          />\r\n          {additionalButtons &&\r\n            additionalButtons.map((button: additionalButtonsType) => {\r\n              return (\r\n                <IconButton\r\n                  iconName={button.icon}\r\n                  onClick={button.onClick}\r\n                  disabled={button.disabled}\r\n                  hidden={false}\r\n                />\r\n              );\r\n            })}\r\n          <IconButton\r\n            iconName=\"save\"\r\n            onClick={onSave}\r\n            hidden={!canSave}\r\n            disabled={!canSave}\r\n          />\r\n          <IconButton\r\n            iconName=\"print\"\r\n            onClick={onPrint}\r\n            hidden={!canPrint}\r\n            disabled={!canPrint}\r\n          />\r\n          <IconButton\r\n            iconName=\"excel\"\r\n            onClick={onExcel}\r\n            hidden={!canExcel}\r\n            disabled={!canExcel}\r\n          />\r\n        </Flex>\r\n        <Skeleton isLoaded={!loading} fadeDuration={0}>\r\n          <Box overflowY=\"auto\" height={height}>\r\n            <ChakraTable\r\n              //@ts-ignore\r\n              ref={componentRef}\r\n            >\r\n              <Thead top={0} position=\"sticky\" bgColor=\"#3edae6\">\r\n                <Tr>\r\n                  {columns.map((item: any) => {\r\n                    return (\r\n                      <Th maxWidth={item.width} minWidth={item.width}>\r\n                        {t(item.title)}\r\n                      </Th>\r\n                    );\r\n                  })}\r\n                  <Th hidden={!actionColumn}>{t(\"actn\")}</Th>\r\n                </Tr>\r\n              </Thead>\r\n              <Tbody>\r\n                {dataSource?.map((item: any) => {\r\n                  return (\r\n                    <Tr\r\n                      key={item[rowKey]}\r\n                      onClick={handleSelectedRow(item)}\r\n                      onDoubleClick={handleDouble(item)}\r\n                      background={`${rowSelected === item ? \"#dbffbf\" : \"\"}`}\r\n                    >\r\n                      {columns.map((column: any) => {\r\n                        return (\r\n                          <Td maxWidth={column.width} minWidth={column.width}>\r\n                            {item[column.dataIndex]}\r\n                          </Td>\r\n                        );\r\n                      })}\r\n                      <Td hidden={!actionColumn}>\r\n                        <Button\r\n                          label={actionLabel}\r\n                          width=\"100%\"\r\n                          onClick={() => {\r\n                            onAction(item);\r\n                          }}\r\n                        />\r\n                      </Td>\r\n                    </Tr>\r\n                  );\r\n                })}\r\n              </Tbody>\r\n\r\n              {/* <Tfoot>\r\n                        <Tr>\r\n                        <Th>To convert</Th>\r\n                        <Th>into</Th>\r\n                        <Th isNumeric>multiply by</Th>\r\n                        </Tr>\r\n                    </Tfoot> */}\r\n            </ChakraTable>\r\n            {(!Array.isArray(dataSource) || dataSource.length === 0) &&\r\n            !loading ? (\r\n              <Flex justifyContent=\"center\" width=\"100%\">\r\n                <Text as=\"b\" fontSize=\"md\" color=\"red\">\r\n                  No Data\r\n                </Text>\r\n              </Flex>\r\n            ) : (\r\n              <></>\r\n            )}\r\n          </Box>\r\n        </Skeleton>\r\n      </TableContainer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Table;\r\n","import { useRef, useCallback } from \"react\";\r\n\r\nconst useCreateTableActionRef = ()=>{\r\n\r\n    const tableRef = useRef()\r\n\r\n    const fetchTableData = useCallback(async (params?: any) =>\r\n    //@ts-ignore\r\n    await tableRef.current?.runFetch(params),\r\n  [tableRef])\r\n\r\n  const getTableData = useCallback(\r\n    //@ts-ignore\r\n    () => tableRef.current?.getCurrentDataSource() || [],\r\n    [tableRef]\r\n  );\r\n\r\n  const setTableData = useCallback(\r\n    //@ts-ignore\r\n    (newTableData: any) => tableRef.current?.setTableData(newTableData) || [],\r\n    [tableRef]\r\n  );\r\n\r\n  const resetTable = useCallback(\r\n    //@ts-ignore\r\n    () => tableRef.current?.resetTableData() || [],\r\n    [tableRef]\r\n  );\r\n\r\n    return {\r\n        tableRef,\r\n        fetchTableData,\r\n        getTableData,\r\n        setTableData,\r\n        resetTable\r\n    }\r\n}\r\n\r\nexport default useCreateTableActionRef","import { useCallback } from \"react\";\r\nimport { useMutation } from \"@commons/hooks\";\r\n\r\nconst useTableControlsButtons = ({ api = \"\", runFetch }: any) => {\r\n  const { setRow: newRecord } = useMutation({\r\n    link: api,\r\n    additionalFunctionToRun: runFetch,\r\n    method: \"POST\",\r\n  });\r\n  const { setRow: updateRecord } = useMutation({\r\n    link: api,\r\n    additionalFunctionToRun: runFetch,\r\n    method: \"PUT\",\r\n  });\r\n  const { setRow: deleteRecord } = useMutation({\r\n    link: api,\r\n    additionalFunctionToRun: runFetch,\r\n    method: \"Delete\",\r\n  });\r\n\r\n  const onSaveAndInsertion = useCallback(\r\n    (record: any) => {\r\n      if (record.query_status === \"n\") {\r\n        newRecord(record);\r\n      } else if (record.query_status === \"u\") {\r\n        updateRecord(record);\r\n      } else if (record.query_status === \"d\") {\r\n        deleteRecord(record);\r\n      }\r\n    },\r\n    [newRecord, updateRecord, deleteRecord]\r\n  );\r\n\r\n  return { onSaveAndInsertion };\r\n};\r\n\r\nexport default useTableControlsButtons;\r\n","import { typeObject } from \"./interface\";\r\n\r\nexport const iconType: typeObject = {\r\n  excel: \"fa-sharp fa-regular fa-file-excel\",\r\n  plus: \"fa-sharp fa-solid fa-plus\",\r\n  edit: \"fa-sharp fa-solid fa-pen-clip\",\r\n  delete: \"fa-sharp fa-solid fa-trash\",\r\n  save: \"fa-solid fa-floppy-disk\",\r\n  print: \"fa-solid fa-print\",\r\n  search: \"fa-solid fa-magnifying-glass\",\r\n  clear: \"fa-solid fa-broom\",\r\n};\r\n","import React, { memo } from \"react\";\r\nimport Button from \"./button\"\r\nimport { iconType } from \"./constants\"\r\nimport { iconButtonProp } from \"./interface\"\r\n\r\nconst IconButton = ({\r\n    iconName,\r\n    backGround = \"none\",\r\n    margin = \"5px\",\r\n    ...prop\r\n}: iconButtonProp) => {\r\n\r\n    const icon = <i className={iconName ? iconType[iconName] : \"\"}></i>\r\n\r\n    return (\r\n        <>\r\n            <Button\r\n                border=\"none\"\r\n                icon={icon}\r\n                padding=\"0\"\r\n                borderRadius=\"20px\"\r\n                margin={margin}\r\n                backGround={backGround}\r\n                {...prop}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default memo(IconButton)","import { useRef, useEffect } from \"react\";\r\n\r\nconst usePrevious = <T>(value: T): T => {\r\n  const ref = useRef<T>();\r\n\r\n  useEffect(() => {\r\n    ref.current = value;\r\n  });\r\n\r\n  return ref.current as T;\r\n};\r\n\r\nexport default usePrevious;\r\n","import { useState, useCallback, useEffect, useRef } from \"react\";\r\nimport usePrevious from \"./usePrevious\";\r\n\r\ninterface useFormManagerProps {\r\n  initialValues?: any;\r\n}\r\n\r\nconst useFormManager = ({ initialValues }: useFormManagerProps) => {\r\n  const [state, setState] = useState<typeof initialValues>(initialValues);\r\n\r\n  const hasAnyFieldChangedRef = useRef(false);\r\n  const preValues = usePrevious(initialValues);\r\n\r\n  const areInitialValuesChanged = useCallback(\r\n    () => !Object.is(JSON.stringify(preValues), JSON.stringify(initialValues)),\r\n    [initialValues, preValues]\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (areInitialValuesChanged()) {\r\n      setState({ ...initialValues });\r\n    }\r\n  }, [areInitialValuesChanged, initialValues]);\r\n\r\n  const resetForm = useCallback(() => {\r\n    hasAnyFieldChangedRef.current = false;\r\n    setState(() => initialValues);\r\n    // @ts-ignore\r\n  }, [initialValues]);\r\n\r\n  useEffect(\r\n    () => {\r\n      return resetForm;\r\n    },\r\n    // eslint-disable-next-line\r\n    []\r\n  );\r\n\r\n  const onChange = useCallback(\r\n    (eventData: any) => {\r\n      const { name, value } = eventData;\r\n      setState({ ...state, [name]: value });\r\n    },\r\n    [state]\r\n  );\r\n\r\n  const handleMultiInput = useCallback((e:any)=>{\r\n    setState({\r\n      ...state,\r\n      ...e\r\n    })\r\n  },[state])\r\n\r\n  const handleSelectWithLabelChange = useCallback(\r\n    (eventData: any) => {\r\n      setState({\r\n        ...state,\r\n        [eventData.name]: eventData.value,\r\n        [eventData.selectLabelName]: eventData.label,\r\n      });\r\n    },\r\n    [state]\r\n  );\r\n\r\n  const handleArrayChange = useCallback(\r\n    ({ name, value }: any) => {\r\n      setState({ ...state, [name]: [...state[name], value] });\r\n    },\r\n    [state]\r\n  );\r\n\r\n  return {\r\n    state,\r\n    onChange,\r\n    resetForm,\r\n    handleRootState: setState,\r\n    handleSelectWithLabelChange,\r\n    handleArrayChange,\r\n    handleMultiInput\r\n  };\r\n};\r\n\r\nexport default useFormManager;\r\n","import { useState, useCallback } from \"react\";\r\nimport { useLocalStorage } from \"@commons/hooks\";\r\nimport { API_ID } from \"@commons/global\";\r\nimport { useToast } from \"@chakra-ui/react\";\r\n\r\ninterface useMutationProps {\r\n  link: string;\r\n  noAuthorization?: boolean;\r\n  additionalFunctionToRun?: () => void;\r\n  runOnSuccess?: () => void;\r\n  runOnFail?: () => void;\r\n  method?: string;\r\n}\r\ninterface successType {\r\n  response: string;\r\n}\r\n\r\nconst useMutation = ({\r\n  link = \"\",\r\n  noAuthorization = false,\r\n  additionalFunctionToRun,\r\n  runOnSuccess,\r\n  runOnFail,\r\n  method = \"POST\",\r\n}: useMutationProps) => {\r\n  const toast = useToast();\r\n  //@ts-ignore\r\n  const url = `http://192.168.1.250:5000/api/${API_ID[link]}`;\r\n  const [success, setSuccess] = useState<successType>();\r\n  const { authorization } = useLocalStorage();\r\n  const postData = useCallback(\r\n    async (dataToPost: any) => {\r\n      if (authorization || noAuthorization) {\r\n        const settings = {\r\n          method: method,\r\n          headers: {\r\n            Accept: \"application/json\",\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: `Bearer ${authorization}`,\r\n          },\r\n          body: JSON.stringify(dataToPost),\r\n        };\r\n        try {\r\n          const fetchResponse = await fetch(url, settings);\r\n          const data = await fetchResponse.json();\r\n          if (data.response === \"success\") {\r\n            toast({\r\n              position: \"top-right\",\r\n              title: \"Success\",\r\n              description: `${data.response}`,\r\n              status: \"success\",\r\n              duration: 5000,\r\n              isClosable: true,\r\n            });\r\n            if (runOnSuccess) runOnSuccess();\r\n          } else {\r\n            toast({\r\n              position: \"top-right\",\r\n              title: \"Error\",\r\n              description: `${data.message}`,\r\n              status: \"error\",\r\n              duration: 9000,\r\n              isClosable: true,\r\n            });\r\n            if (runOnFail) runOnFail();\r\n          }\r\n          setSuccess(data);\r\n          if (additionalFunctionToRun) {\r\n            additionalFunctionToRun();\r\n          }\r\n          return data;\r\n        } catch (e) {}\r\n      }\r\n    },\r\n    [\r\n      additionalFunctionToRun,\r\n      authorization,\r\n      method,\r\n      noAuthorization,\r\n      runOnFail,\r\n      runOnSuccess,\r\n      toast,\r\n      url,\r\n    ]\r\n  );\r\n\r\n  const setRow = useCallback(\r\n    (row: any) => {\r\n      postData(row);\r\n    },\r\n    [postData]\r\n  );\r\n\r\n  return { success, setRow };\r\n};\r\n\r\nexport default useMutation;\r\n","import styled from '@emotion/styled';\r\n\r\nexport const StyledInput = styled.input<any>`\r\nbackground: #fdfdfd;\r\nborder: 0.5px solid #cbd5e0;\r\nheight: 100%;\r\nwidth: 100%;\r\nborder-radius: 7px;\r\npadding: 0 16px;\r\n`\r\n\r\n//`border:  ${required ? `0.5px solid red` : `0.5px solid #cbd5e0`};`","import React, { memo, useCallback } from \"react\";\r\nimport { useTranslation } from 'react-i18next';\r\nimport { FormLabel, Flex } from '@chakra-ui/react'\r\nimport { StyledInput } from \"./styled\"\r\nimport { InputTextProps } from \"./interface\";\r\n\r\nconst InputText = ({\r\n    disabled,\r\n    value,\r\n    name,\r\n    label = \"\",\r\n    onChange,\r\n    height = \"65px\",\r\n    width = \"200px\",\r\n    type = \"text\",\r\n    placeHolder,\r\n    padding,\r\n    margin = \"10px\",\r\n    className = \"\",\r\n    required,\r\n    ...props\r\n}: InputTextProps) => {\r\n    const { t } = useTranslation();\r\n\r\n    const handleChange = useCallback((event: { target: { value: string; }; }) => {\r\n        onChange({ name: name, value: event.target.value })\r\n    }, [name, onChange]);\r\n\r\n    return (\r\n        <>\r\n            <Flex\r\n                direction=\"column\"\r\n                width={width}\r\n                padding={padding}\r\n                margin={margin}\r\n                height={height}\r\n            >\r\n                <FormLabel>{t(label)}</FormLabel>\r\n                <StyledInput\r\n                    placeholder={placeHolder}\r\n                    disabled={disabled}\r\n                    required={required}\r\n                    onChange={handleChange}\r\n                    width=\"100%\"\r\n                    className={className}\r\n                    value={value}\r\n                    type={type}\r\n                    {...props}\r\n                />\r\n            </Flex>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default memo(InputText)","import React, { memo } from 'react'\r\nimport { useTranslation } from 'react-i18next'\r\n\r\nconst BaseTitle = ({\r\n    value,\r\n    margin,\r\n    padding,\r\n    width = \"\",\r\n    fontSize = \"\",\r\n    color,\r\n    backgroundColor\r\n}: any) => {\r\n    const { t } = useTranslation()\r\n    return (\r\n        <>\r\n            <strong\r\n                style={{\r\n                    padding: padding,\r\n                    margin: margin,\r\n                    width: width,\r\n                    fontSize: fontSize,\r\n                    color: color,\r\n                    backgroundColor: backgroundColor\r\n                }}>\r\n                {t(value)}\r\n            </strong>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default memo(BaseTitle)","import styled from \"@emotion/styled\";\r\n\r\nexport const ModalContainer = styled.div`\r\n  position: absolute;\r\n\ttop: 0;\r\n\tleft: 0;\r\n\tright: 0;\r\n\tbottom: 0;\r\n\tdisplay: flex;\r\n\talign-items: center;\r\n\tjustify-content: center;\r\n\tbackground-color: rgba(0, 0, 0, 0.5);\r\n    z-index: 1;\r\n`\r\n\r\nexport const ModalContent = styled.div<{width: string, height?: string}>`\r\n /* position: relative;\r\n    margin: 5% auto;\r\n    padding: 20px;\r\n    border: 1px solid #888;\r\n    width: ${({width})=> width};\r\n    height: ${({height})=> height};\r\n    background-color: white;\r\n    border-radius: 15px; */\r\n    /* max-height: 90vh;\r\n\tmax-width: 500px; */\r\n    width: ${({width})=> width};\r\n    height: ${({height})=> height};\r\n\tmargin-left: auto;\r\n\tmargin-right: auto;\r\n\tbackground-color: #fff;\r\n\tborder-radius: 15px;\r\n\toverflow: hidden;\r\n\tdisplay: flex;\r\n\tflex-direction: column;\r\n\tbox-shadow: 0 15px 30px 0 rgba(#000, 0.25);\r\n\t@media (max-width: 600px) {\r\n\t\twidth: 90%;\r\n\t}\r\n`\r\n\r\nexport const ModalHeader = styled.div`\r\n\tpadding: 15px 32px;\r\n\tborder-bottom: 1px solid #ddd;\r\n\tdisplay: flex;\r\n\talign-items: center;\r\n\tjustify-content: space-between;\r\n`\r\n\r\nexport const ModalBody = styled.div`\r\n\tpadding: 10px 32px;\r\n\toverflow-y: auto;\r\n    height: 100%;\r\n`\r\n\r\nexport const ModalFooter = styled.div`\r\n    padding: 15px 32px;\r\n\tdisplay: flex;\r\n\talign-items: center;\r\n\tjustify-content: flex-end;\r\n\tborder-top: 1px solid #ddd;\r\n\tgap: 12px;\r\n\tposition: relative;\r\n\t&:after {\r\n\t\tcontent: \"\";\r\n\t\tdisplay: block;\r\n\t\tposition: absolute;\r\n\t\ttop: -51px;\r\n\t\tleft: 24px;\r\n\t\tright: 24px;\r\n\t\theight: 50px;\r\n\t\tflex-shrink: 0;\r\n\t\tbackground-image: linear-gradient(to top, rgba(#fff, 0.75), transparent);\r\n\t\tpointer-events: none;\r\n\t}\r\n`","import React, { memo } from 'react';\r\nimport {Button} from \"@commons/button\";\r\nimport {BaseTitle} from \"@commons/page-title\"\r\nimport Flex from \"@commons/flex\"\r\nimport {ModalContainer, ModalContent, ModalHeader, ModalBody, ModalFooter} from \"./style\"\r\n\r\ninterface ModalProp {\r\n    visible?: boolean,\r\n    children?: any,\r\n    label: string,\r\n    onOK?: () => void,\r\n    onClose?: () => void,\r\n    submitTitle?: string,\r\n    width?: string;\r\n    hideSaveButton?: boolean;\r\n    hideCloseButton?: boolean;\r\n    height?: string;\r\n    noFooter?: boolean;\r\n}\r\n\r\nconst Modal = (\r\n    {\r\n        children,\r\n        visible = false,\r\n        label,\r\n        onClose,\r\n        onOK,\r\n        submitTitle = \"smbt\",\r\n        width = \"90%\",\r\n        height = \"auto\",\r\n        hideSaveButton = false,\r\n        hideCloseButton = false,\r\n        noFooter = false\r\n    }: ModalProp\r\n) => {\r\n\r\n    return (\r\n        <>\r\n        {visible &&\r\n            <ModalContainer hidden={!visible}>\r\n  <ModalContent width={width} height={height}>\r\n    <ModalHeader>\r\n        <BaseTitle value={label} />\r\n        <Button label='&times;' backGround='none' margin='0' padding='0' data-dismiss=\"modal\" onClick={onClose} />\r\n    </ModalHeader>\r\n\r\n    <ModalBody>\r\n        <Flex width=\"100%\" padding=\"0\" wrap=\"wrap\" height=\"100%\">\r\n      {children}\r\n      </Flex>\r\n    </ModalBody>\r\n\r\n    {!noFooter &&\r\n        <ModalFooter hidden={noFooter}>\r\n            {!hideSaveButton && <Button onClick={onOK} label={submitTitle} hidden={hideSaveButton} width='20%' margin='0' />}\r\n            {!hideCloseButton && <Button onClick={onClose} label='cls' hidden={hideCloseButton} width='20%' backGround='red' margin='0' />}\r\n        </ModalFooter>\r\n    }\r\n  </ModalContent>\r\n</ModalContainer>\r\n        }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default memo(Modal);","export const columns = [\r\n  {\r\n    title: \"splr\",\r\n    dataIndex: \"supplier_name\",\r\n    width: \"13%\",\r\n  },\r\n  {\r\n    title: \"dt\",\r\n    dataIndex: \"date\",\r\n    width: \"13%\",\r\n  },\r\n  {\r\n    title: \"crdt\",\r\n    dataIndex: \"credit\",\r\n    width: \"15%\",\r\n  },\r\n  {\r\n    title: \"dbt\",\r\n    dataIndex: \"debit\",\r\n    width: \"15%\",\r\n  },\r\n  {\r\n    title: \"blnc\",\r\n    dataIndex: \"balance\",\r\n    width: \"15%\",\r\n  },\r\n  {\r\n    title: \"dscrptn\",\r\n    dataIndex: \"description\",\r\n    width: \"25%\",\r\n  },\r\n];\r\n","import React, { memo, useCallback } from \"react\";\r\nimport Flex from \"@commons/flex\";\r\nimport InputText from \"@commons/input-text/src/inputText\";\r\nimport { SelectWithApi } from \"@commons/select\";\r\nimport { TableWithApi, useCreateTableActionRef } from \"@commons/table\";\r\nimport { useFormManager } from \"@commons/hooks\";\r\nimport { Button } from \"@commons/button\"\r\nimport { columns } from \"./constant\";\r\n\r\nconst SupplierSummaryPage = () => {\r\n    const { state, onChange } = useFormManager({ initialValues: { date_from: \"\", date_to: \"\", supplier_id: \"\" } })\r\n    const {\r\n        tableRef,\r\n         fetchTableData,\r\n        } = useCreateTableActionRef()\r\n\r\n    const handleSearch = useCallback(() => {\r\n        fetchTableData(\r\n            {\r\n                supplier_id: state.supplier_id,\r\n                // date_from: state.date_from,\r\n                // date_to: state.date_to\r\n            }\r\n        )\r\n    }, [fetchTableData, state.supplier_id])\r\n    return (\r\n        <>\r\n            <Flex width=\"100%\" flexDirection=\"column\">\r\n                <Flex width=\"100%\" >\r\n                    <SelectWithApi\r\n                        label=\"splr\"\r\n                        fetchOnFirstRun\r\n                        name=\"supplier_id\"\r\n                        value={state.supplier_id}\r\n                        onChange={onChange}\r\n                        api=\"QUERY_SUPPLIER_LIST\"\r\n                    />\r\n                    <InputText\r\n                        name=\"date_from\"\r\n                        type=\"date\"\r\n                        label=\"frm\"\r\n                        onChange={onChange}\r\n                    />\r\n                    <InputText\r\n                        name=\"date_to\"\r\n                        type=\"date\"\r\n                        label=\"to\"\r\n                        onChange={onChange}\r\n                    />\r\n                        <Button\r\n                        onClick={handleSearch}\r\n                        label=\"search\"\r\n                        width=\"10%\"\r\n                    />\r\n                </Flex>\r\n                <TableWithApi\r\n                    ref={tableRef}\r\n                    api={\"QUERY_SUPPLIER_SUMMARY_TABLE\"}\r\n                    columns={columns}\r\n                    hideTools={false}\r\n                    canExcel\r\n                    rowKey={\"rowKey\"}\r\n                />\r\n            </Flex>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default memo(SupplierSummaryPage)","import {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { useFormControlContext, useFormControlStyles } from \"./form-control\"\n\nexport interface FormLabelProps\n  extends HTMLChakraProps<\"label\">,\n    ThemingProps<\"FormLabel\"> {\n  /**\n   * @type React.ReactElement\n   */\n  requiredIndicator?: React.ReactElement\n  /**\n   * @type React.ReactNode\n   */\n  optionalIndicator?: React.ReactNode\n}\n\n/**\n * Used to enhance the usability of form controls.\n *\n * It is used to inform users as to what information\n * is requested for a form field.\n *\n * ♿️ Accessibility: Every form field should have a form label.\n */\nexport const FormLabel = forwardRef<FormLabelProps, \"label\">(function FormLabel(\n  passedProps,\n  ref,\n) {\n  const styles = useStyleConfig(\"FormLabel\", passedProps)\n  const props = omitThemingProps(passedProps)\n\n  const {\n    className,\n    children,\n    requiredIndicator = <RequiredIndicator />,\n    optionalIndicator = null,\n    ...rest\n  } = props\n\n  const field = useFormControlContext()\n  const ownProps = field?.getLabelProps(rest, ref) ?? { ref, ...rest }\n\n  return (\n    <chakra.label\n      {...ownProps}\n      className={cx(\"chakra-form__label\", props.className)}\n      __css={{\n        display: \"block\",\n        textAlign: \"start\",\n        ...styles,\n      }}\n    >\n      {children}\n      {field?.isRequired ? requiredIndicator : optionalIndicator}\n    </chakra.label>\n  )\n})\n\nFormLabel.displayName = \"FormLabel\"\n\nexport interface RequiredIndicatorProps extends HTMLChakraProps<\"span\"> {}\n\n/**\n * Used to show a \"required\" text or an asterisks (*) to indicate that\n * a field is required.\n */\nexport const RequiredIndicator = forwardRef<RequiredIndicatorProps, \"span\">(\n  function RequiredIndicator(props, ref) {\n    const field = useFormControlContext()\n    const styles = useFormControlStyles()\n\n    if (!field?.isRequired) return null\n\n    const className = cx(\"chakra-form__required-indicator\", props.className)\n\n    return (\n      <chakra.span\n        {...field?.getRequiredIndicatorProps(props, ref)}\n        __css={styles.requiredIndicator}\n        className={className}\n      />\n    )\n  },\n)\n\nRequiredIndicator.displayName = \"RequiredIndicator\"\n","import { createContext } from \"@chakra-ui/react-context\"\nimport { PropGetter } from \"@chakra-ui/react-types\"\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx, dataAttr } from \"@chakra-ui/shared-utils\"\nimport { useCallback, useId, useState } from \"react\"\n\nconst [FormControlStylesProvider, useFormControlStyles] = createContext<\n  Record<string, SystemStyleObject>\n>({\n  name: `FormControlStylesContext`,\n  errorMessage: `useFormControlStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<FormControl />\" `,\n})\n\nexport { useFormControlContext, useFormControlStyles }\n\nexport interface FormControlOptions {\n  /**\n   * If `true`, the form control will be required. This has 2 side effects:\n   * - The `FormLabel` will show a required indicator\n   * - The form element (e.g, Input) will have `aria-required` set to `true`\n   *\n   * @default false\n   */\n  isRequired?: boolean\n  /**\n   * If `true`, the form control will be disabled. This has 2 side effects:\n   * - The `FormLabel` will have `data-disabled` attribute\n   * - The form element (e.g, Input) will be disabled\n   *\n   * @default false\n   */\n  isDisabled?: boolean\n  /**\n   * If `true`, the form control will be invalid. This has 2 side effects:\n   * - The `FormLabel` and `FormErrorIcon` will have `data-invalid` set to `true`\n   * - The form element (e.g, Input) will have `aria-invalid` set to `true`\n   *\n   * @default false\n   */\n  isInvalid?: boolean\n  /**\n   * If `true`, the form control will be readonly\n   *\n   * @default false\n   */\n  isReadOnly?: boolean\n}\n\ninterface FormControlContext extends FormControlOptions {\n  /**\n   * The label text used to inform users as to what information is\n   * requested for a text field.\n   */\n  label?: string\n  /**\n   * The custom `id` to use for the form control. This is passed directly to the form element (e.g, Input).\n   * - The form element (e.g. Input) gets the `id`\n   * - The form label id: `form-label-${id}`\n   * - The form error text id: `form-error-text-${id}`\n   * - The form helper text id: `form-helper-text-${id}`\n   */\n  id?: string\n}\n\ntype FormControlProviderContext = Omit<\n  ReturnType<typeof useFormControlProvider>,\n  \"getRootProps\" | \"htmlProps\"\n>\n\nconst [FormControlProvider, useFormControlContext] =\n  createContext<FormControlProviderContext>({\n    strict: false,\n    name: \"FormControlContext\",\n  })\n\nfunction useFormControlProvider(props: FormControlContext) {\n  const {\n    id: idProp,\n    isRequired,\n    isInvalid,\n    isDisabled,\n    isReadOnly,\n    ...htmlProps\n  } = props\n\n  // Generate all the required ids\n  const uuid = useId()\n  const id = idProp || `field-${uuid}`\n\n  const labelId = `${id}-label`\n  const feedbackId = `${id}-feedback`\n  const helpTextId = `${id}-helptext`\n\n  /**\n   * Track whether the `FormErrorMessage` has been rendered.\n   * We use this to append its id the `aria-describedby` of the `input`.\n   */\n  const [hasFeedbackText, setHasFeedbackText] = useState(false)\n\n  /**\n   * Track whether the `FormHelperText` has been rendered.\n   * We use this to append its id the `aria-describedby` of the `input`.\n   */\n  const [hasHelpText, setHasHelpText] = useState(false)\n\n  // Track whether the form element (e.g, `input`) has focus.\n  const [isFocused, setFocus] = useState(false)\n\n  const getHelpTextProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      id: helpTextId,\n      ...props,\n      /**\n       * Notify the field context when the help text is rendered on screen,\n       * so we can apply the correct `aria-describedby` to the field (e.g. input, textarea).\n       */\n      ref: mergeRefs(forwardedRef, (node) => {\n        if (!node) return\n        setHasHelpText(true)\n      }),\n    }),\n    [helpTextId],\n  )\n\n  const getLabelProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ref: forwardedRef,\n      \"data-focus\": dataAttr(isFocused),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-readonly\": dataAttr(isReadOnly),\n      id: props.id !== undefined ? props.id : labelId,\n      htmlFor: props.htmlFor !== undefined ? props.htmlFor : id,\n    }),\n    [id, isDisabled, isFocused, isInvalid, isReadOnly, labelId],\n  )\n\n  const getErrorMessageProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      id: feedbackId,\n      ...props,\n      /**\n       * Notify the field context when the error message is rendered on screen,\n       * so we can apply the correct `aria-describedby` to the field (e.g. input, textarea).\n       */\n      ref: mergeRefs(forwardedRef, (node) => {\n        if (!node) return\n        setHasFeedbackText(true)\n      }),\n      \"aria-live\": \"polite\",\n    }),\n    [feedbackId],\n  )\n\n  const getRootProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ...htmlProps,\n      ref: forwardedRef,\n      role: \"group\",\n    }),\n    [htmlProps],\n  )\n\n  const getRequiredIndicatorProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ref: forwardedRef,\n      role: \"presentation\",\n      \"aria-hidden\": true,\n      children: props.children || \"*\",\n    }),\n    [],\n  )\n\n  return {\n    isRequired: !!isRequired,\n    isInvalid: !!isInvalid,\n    isReadOnly: !!isReadOnly,\n    isDisabled: !!isDisabled,\n    isFocused: !!isFocused,\n    onFocus: () => setFocus(true),\n    onBlur: () => setFocus(false),\n    hasFeedbackText,\n    setHasFeedbackText,\n    hasHelpText,\n    setHasHelpText,\n    id,\n    labelId,\n    feedbackId,\n    helpTextId,\n    htmlProps,\n    getHelpTextProps,\n    getErrorMessageProps,\n    getRootProps,\n    getLabelProps,\n    getRequiredIndicatorProps,\n  }\n}\n\nexport interface FormControlProps\n  extends HTMLChakraProps<\"div\">,\n    ThemingProps<\"FormControl\">,\n    FormControlContext {}\n\n/**\n * FormControl provides context such as\n * `isInvalid`, `isDisabled`, and `isRequired` to form elements.\n *\n * This is commonly used in form elements such as `input`,\n * `select`, `textarea`, etc.\n *\n * @see Docs https://chakra-ui.com/docs/components/form-control\n */\nexport const FormControl = forwardRef<FormControlProps, \"div\">(\n  function FormControl(props, ref) {\n    const styles = useMultiStyleConfig(\"Form\", props)\n    const ownProps = omitThemingProps(props)\n    const {\n      getRootProps,\n      htmlProps: _,\n      ...context\n    } = useFormControlProvider(ownProps)\n\n    const className = cx(\"chakra-form-control\", props.className)\n\n    return (\n      <FormControlProvider value={context}>\n        <FormControlStylesProvider value={styles}>\n          <chakra.div\n            {...getRootProps({}, ref)}\n            className={className}\n            __css={styles[\"container\"]}\n          />\n        </FormControlStylesProvider>\n      </FormControlProvider>\n    )\n  },\n)\n\nFormControl.displayName = \"FormControl\"\n\nexport interface FormHelperTextProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * FormHelperText\n *\n * Assistive component that conveys additional guidance\n * about the field, such as how it will be used and what\n * types in values should be provided.\n */\nexport const FormHelperText = forwardRef<FormHelperTextProps, \"div\">(\n  function FormHelperText(props, ref) {\n    const field = useFormControlContext()\n    const styles = useFormControlStyles()\n    const className = cx(\"chakra-form__helper-text\", props.className)\n    return (\n      <chakra.div\n        {...field?.getHelpTextProps(props, ref)}\n        __css={styles.helperText}\n        className={className}\n      />\n    )\n  },\n)\n\nFormHelperText.displayName = \"FormHelperText\"\n"],"names":["Flex","_ref","children","justifyContent","width","height","padding","margin","bordered","backgroundColor","borderColor","borderWidth","borderRadius","flexDirection","textAlign","hidden","wrap","prop","border","setBorder","useState","useEffect","concat","_jsx","_Fragment","ChackraFlex","background","memo","StyledSelect","styled","select","_templateObject","_taggedTemplateLiteral","StyledOption","option","_templateObject2","Select","Options","onChange","label","value","name","withLabel","placeholder","selectLabelName","t","useTranslation","_jsxs","direction","FormLabel","fontSize","as","event","Array","isArray","forEach","target","length","map","Option","selected","disabled","SelectWithApi","api","params","data","useFetch","link","fetchOnFirstRun","checkForParams","usePdfViewerControl","PDFRef","useRef","handleOpenModal","useCallback","async","_PDFRef$current","current","handleOpen","PdfViewer","ref","reportName","visible","setVisible","handleClose","useImperativeHandle","computedUrl","URLSearchParams","Modal","onClose","noFooter","forwardRef","ConfirmationModal","onConfirm","message","handleConfirmation","onOK","submitTitle","TableWithApi","postApi","columns","ModalContent","onClick","modalWidth","printProps","tableProps","runFetch","loading","setData","resetData","onSaveAndInsertion","useTableControlsButtons","selectedRow","setSelectedRow","modal","setModal","confirmModal","setConfirmModal","handleAdd","query_status","handleEdit","handleCloseModal","handleCloseConfirmModal","handleOpenConfirmModal","foundDataSource","useMemo","handlePrint","setTableData","resetTableData","getCurrentDataSource","hideCloseButton","hideSaveButton","refreshTable","handleDelete","Table","dataSource","onAdd","onEdit","onPrint","onDelete","onSelectedRow","row","rowKey","hideTools","canEdit","canAdd","canDelete","canExcel","actionColumn","onAction","actionLabel","canPrint","additionalButtons","onSave","canSave","onDoubleClick","pathname","useLocation","rowSelected","setRowSelected","handleSelectedRow","item","handleDouble","onExcel","pathName","replace","wb","XLSX","book_new","ws","json_to_sheet","book_append_sheet","Date","toUTCString","componentRef","TableContainer","Text","marginBottom","fontWeight","IconButton","iconName","button","icon","Skeleton","isLoaded","fadeDuration","Box","overflowY","ChakraTable","Thead","top","position","bgColor","Tr","Th","maxWidth","minWidth","title","Tbody","column","Td","dataIndex","Button","color","useCreateTableActionRef","tableRef","fetchTableData","_tableRef$current","getTableData","_tableRef$current2","newTableData","_tableRef$current3","resetTable","_tableRef$current4","setRow","newRecord","useMutation","additionalFunctionToRun","method","updateRecord","deleteRecord","record","iconType","excel","plus","edit","delete","save","print","search","clear","backGround","className","initialValues","state","setState","hasAnyFieldChangedRef","preValues","usePrevious","areInitialValuesChanged","Object","is","JSON","stringify","resetForm","eventData","handleMultiInput","e","handleSelectWithLabelChange","handleArrayChange","_ref2","handleRootState","noAuthorization","runOnSuccess","runOnFail","toast","useToast","url","API_ID","success","setSuccess","authorization","useLocalStorage","postData","settings","headers","Accept","Authorization","body","dataToPost","fetchResponse","fetch","json","response","description","status","duration","isClosable","StyledInput","input","InputText","type","placeHolder","required","props","handleChange","BaseTitle","style","ModalContainer","div","_ref3","_ref4","ModalHeader","_templateObject3","ModalBody","_templateObject4","ModalFooter","_templateObject5","SupplierSummaryPage","useFormManager","date_from","date_to","supplier_id","handleSearch","passedProps","_a","styles","useStyleConfig","omitThemingProps","requiredIndicator","jsx","RequiredIndicator","optionalIndicator","rest","field","useFormControlContext","ownProps","getLabelProps","jsxs","chakra","cx","__css","display","isRequired","displayName","useFormControlStyles","span","getRequiredIndicatorProps","FormControlStylesProvider","createContext","errorMessage","FormControlProvider","strict","FormControl","useMultiStyleConfig","getRootProps","htmlProps","_","context","id","idProp","isInvalid","isDisabled","isReadOnly","uuid","useId","labelId","feedbackId","helpTextId","hasFeedbackText","setHasFeedbackText","hasHelpText","setHasHelpText","isFocused","setFocus","getHelpTextProps","forwardedRef","arguments","undefined","mergeRefs","node","props2","dataAttr","htmlFor","getErrorMessageProps","role","onFocus","onBlur","useFormControlProvider","helperText"],"sourceRoot":""}