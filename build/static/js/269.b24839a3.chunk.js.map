{"version":3,"file":"static/js/269.b24839a3.chunk.js","mappings":"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","sources":["../common/Flex/src/index.tsx","../common/pdf-viewer/src/hooks/usePdfViewerControl.ts","../common/pdf-viewer/src/index.tsx","../common/confirmation-modal/src/index.tsx","../common/TableView/src/ApiTable.tsx","../common/TableView/src/Table.tsx","../common/TableView/src/hooks/useTableControlsButtons.ts","../common/button/src/constants.ts","../common/button/src/iconButton.tsx","../common/check-box/src/styled.ts","../common/check-box/src/CheckBox.tsx","../common/hooks/src/usePrevious.ts","../common/hooks/src/useFormManager.ts","../common/hooks/src/useMutation.ts","../common/input-text/src/styled.ts","../common/input-text/src/inputText.tsx","../common/page-title/src/baseTitle.tsx","../common/modal/src/style.ts","../common/modal/src/index.tsx"],"sourcesContent":["import React, { memo, useEffect, useState } from \"react\";\r\nimport { Flex as ChackraFlex } from \"@chakra-ui/react\"\r\nimport { flexProp } from \"./interface\"\r\n\r\nconst Flex = ({\r\n    children,\r\n    justifyContent,\r\n    width,\r\n    height,\r\n    padding = \"10px\",\r\n    margin,\r\n    bordered = false,\r\n    backgroundColor,\r\n    borderColor = \"#3c8dcf\",\r\n    borderWidth = \"px\",\r\n    borderRadius = \"5px\",\r\n    flexDirection = \"row\",\r\n    textAlign = \"\",\r\n    hidden = false,\r\n    wrap,\r\n    ...prop\r\n}: any) => {\r\n    const [border, setBorder] = useState(\"\")\r\n    useEffect(() => {\r\n        if (bordered) {\r\n            setBorder(`${borderWidth} solid ${borderColor}`)\r\n        }\r\n    }, [borderColor, borderWidth, bordered])\r\n    return (\r\n        <>\r\n            <ChackraFlex\r\n                width={width}\r\n                height={height}\r\n                padding={padding}\r\n                margin={margin}\r\n                background={backgroundColor}\r\n                borderRadius={borderRadius}\r\n                flexDirection={flexDirection}\r\n                textAlign={textAlign}\r\n                justifyContent={justifyContent}\r\n                hidden={hidden}\r\n                //@ts-ignore\r\n                wrap={wrap ? \"wrap\" : \"\"}\r\n                {...prop}\r\n            >\r\n                {children}\r\n            </ChackraFlex>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default memo(Flex)","import { useRef, useCallback } from \"react\";\r\n\r\nconst usePdfViewerControl = ()=>{\r\n\r\n    const PDFRef = useRef()\r\n\r\n    const handleOpenModal = useCallback(async () =>\r\n    //@ts-ignore\r\n    await PDFRef.current?.handleOpen(),\r\n  [PDFRef])\r\n\r\n    return {\r\n        PDFRef,\r\n        handleOpenModal\r\n    }\r\n}\r\n\r\nexport default usePdfViewerControl","import React, {memo, useImperativeHandle, forwardRef, useState, useCallback} from \"react\";\r\nimport Modal from \"@commons/modal\";\r\n\r\n//TODO: implement pdf viewer type\r\nconst PdfViewer = ({\r\n        reportName,\r\n        params\r\n    }:any,\r\n    ref: any\r\n    ) => {\r\n\r\n        const [visible, setVisible] = useState(false);\r\n        \r\n        const handleOpen = useCallback(()=>{\r\n            setVisible(true);\r\n        },[])\r\n\r\n        const handleClose = useCallback(()=>{\r\n            setVisible(false);\r\n        },[])\r\n\r\n        useImperativeHandle(ref, () => ({\r\n            handleOpen,\r\n            // setTableData: setData,\r\n            // resetTableData: resetData,\r\n            // getCurrentDataSource: data\r\n        }));\r\n\r\n        const computedUrl =`http://192.168.1.250:5000/system_pdf_generate/${reportName}?${new URLSearchParams(params)}`\r\n\r\n    return(\r\n        <Modal\r\n            label=\"PDF Viewer\"\r\n            visible={visible}\r\n            onClose={handleClose}\r\n            noFooter\r\n            width=\"90%\"\r\n            height=\"80%\"\r\n        >\r\n            <object data={computedUrl} width=\"100%\" height=\"100%\">\r\n          {`Your browser does not support pdf files.`}\r\n        </object>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default memo(forwardRef(PdfViewer))\r\nexport * from \"./interface\"\r\nexport {default as usePdfViewerControl} from \"./hooks/usePdfViewerControl\";\r\n","import React, { memo, useCallback } from \"react\";\r\nimport Modal from \"@commons/modal\";\r\nimport {confirmationModal} from \"./interface\"\r\n\r\nconst ConfirmationModal = ({visible, onClose, onConfirm, message}:confirmationModal) => {\r\n\r\n    const handleConfirmation = useCallback(() => {\r\n        onConfirm()\r\n        onClose()\r\n    },[onClose, onConfirm])\r\n\r\n    return (\r\n        <Modal \r\n            label=\"cnfrmtn\"\r\n            visible={visible}\r\n            onClose={onClose}\r\n            width=\"25%\"\r\n            onOK={handleConfirmation}\r\n            submitTitle=\"cnfrm\"\r\n        >\r\n            {message ? message : \"Are you want to continue ?\"}\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default memo(ConfirmationModal)\r\nexport * from \"./interface\"","import React,\r\n{\r\n    memo,\r\n    useState,\r\n    useCallback,\r\n    useImperativeHandle,\r\n    forwardRef,\r\n    useMemo\r\n} from \"react\";\r\nimport PdfViewer, {usePdfViewerControl} from \"@commons/pdf-viewer\";\r\nimport { useFetch } from \"@commons/hooks\"\r\nimport Modal from \"@commons/modal\";\r\nimport ConfirmationModal from \"@commons/confirmation-modal\"\r\nimport Table from \"./Table\";\r\nimport useTableControlsButtons from \"./hooks/useTableControlsButtons\";\r\nimport { TableWithApiProps } from \"./interface\"\r\n\r\n//TODO: change the ref type\r\n\r\nconst TableWithApi = ({\r\n    api,\r\n    postApi,\r\n    columns,\r\n    ModalContent,\r\n    onClick,\r\n    fetchOnFirstRun = false,\r\n    params,\r\n    checkForParams = false,\r\n    modalWidth = \"60%\",\r\n    printProps,\r\n    reportName,\r\n    ...tableProps\r\n}: TableWithApiProps,\r\n    ref: any\r\n) => {\r\n    const { data, runFetch, loading, setData, resetData } = useFetch({ link: api, fetchOnFirstRun: fetchOnFirstRun, params: params, checkForParams: checkForParams })\r\n    const { onSaveAndInsertion } = useTableControlsButtons({ api: postApi, runFetch: runFetch })\r\n    const {PDFRef, handleOpenModal} = usePdfViewerControl()\r\n    const [selectedRow, setSelectedRow] = useState({})\r\n    const [modal, setModal] = useState(false);\r\n    const [confirmModal, setConfirmModal] = useState(false);\r\n    const handleAdd = useCallback(() => {\r\n        setSelectedRow({ query_status: \"n\" })\r\n        setModal(true)\r\n    }, [setSelectedRow])\r\n    const handleEdit = useCallback(() => {\r\n        setSelectedRow({ ...selectedRow, query_status: \"u\" })\r\n        setModal(true)\r\n    }, [selectedRow, setSelectedRow])\r\n    const handleDelete = () => {\r\n        onSaveAndInsertion({ ...selectedRow, query_status: \"d\" })\r\n    }\r\n\r\n    const handleCloseModal = useCallback(() => {\r\n        setModal(false)\r\n    }, [])\r\n\r\n    const handleCloseConfirmModal = useCallback(() => {setConfirmModal(false)},[])\r\n    const handleOpenConfirmModal = useCallback(() => {setConfirmModal(true)},[])\r\n\r\n    const handleSelectedRow = (row: any) => {\r\n        setSelectedRow(row)\r\n        if (onClick) onClick(row)\r\n    };\r\n\r\n    const foundDataSource = useMemo(\r\n        () => data?.data,\r\n        [data?.data]\r\n      );\r\n\r\n      const handlePrint = useCallback(() => {\r\n        selectedRow && handleOpenModal() \r\n      },[handleOpenModal, selectedRow])\r\n\r\n    useImperativeHandle(ref, () => ({\r\n        runFetch,\r\n        setTableData: setData,\r\n        resetTableData: resetData,\r\n        getCurrentDataSource: () => foundDataSource,\r\n    }));\r\n\r\n    return (\r\n        <>\r\n            {ModalContent && <Modal\r\n                visible={modal}\r\n                onClose={handleCloseModal}\r\n                hideCloseButton\r\n                hideSaveButton\r\n                label=\"dtls\"\r\n                noFooter\r\n                width={modalWidth}\r\n            >\r\n                <ModalContent\r\n                    onClose={handleCloseModal}\r\n                    selectedRow={selectedRow}\r\n                    refreshTable={runFetch}\r\n                />\r\n            </Modal>\r\n            }\r\n            <ConfirmationModal\r\n                visible={confirmModal}\r\n                onConfirm={handleDelete}\r\n                onClose={handleCloseConfirmModal}\r\n            />\r\n            <PdfViewer\r\n                ref={PDFRef}\r\n                reportName={reportName}\r\n                params={printProps}\r\n            />\r\n            <Table\r\n                dataSource={data?.data}\r\n                columns={columns}\r\n                onAdd={handleAdd}\r\n                onEdit={handleEdit}\r\n                onPrint={handlePrint}\r\n                onDelete={handleOpenConfirmModal}\r\n                onSelectedRow={handleSelectedRow}\r\n                loading={loading}\r\n                {...tableProps}\r\n            >\r\n            </Table>\r\n\r\n        </>\r\n    )\r\n}\r\nexport default memo(forwardRef(TableWithApi))","import React, { useState, useCallback, useRef } from \"react\";\r\nimport { Button, IconButton } from \"@commons/button\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport * as XLSX from \"xlsx\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport {\r\n  Table as ChakraTable,\r\n  Thead,\r\n  Tbody,\r\n  // Tfoot,\r\n  Text,\r\n  Box,\r\n  Tr,\r\n  Th,\r\n  Td,\r\n  TableContainer,\r\n  Skeleton,\r\n} from \"@chakra-ui/react\";\r\nimport Flex from \"@commons/flex\";\r\nimport { TableProps, additionalButtonsType } from \"./interface\";\r\n\r\nconst Table = ({\r\n  dataSource,\r\n  height = \"300px\",\r\n  rowKey = \"rowKey\",\r\n  columns,\r\n  hideTools = true,\r\n  canEdit = false,\r\n  canAdd = false,\r\n  canDelete = false,\r\n  canExcel = false,\r\n  onAdd,\r\n  onEdit,\r\n  onDelete,\r\n  actionColumn = false,\r\n  onAction,\r\n  actionLabel = \"\",\r\n  onSelectedRow,\r\n  label,\r\n  canPrint = false,\r\n  onPrint,\r\n  additionalButtons,\r\n  onSave,\r\n  canSave = false,\r\n  width = \"100%\",\r\n  margin = \"\",\r\n  padding = \"\",\r\n  loading = false,\r\n  onDoubleClick,\r\n}: TableProps) => {\r\n  const { pathname } = useLocation();\r\n  const { t } = useTranslation();\r\n  const [rowSelected, setRowSelected] = useState();\r\n  const handleSelectedRow = useCallback(\r\n    (item: any) => () => {\r\n      if (onSelectedRow) onSelectedRow(item);\r\n      setRowSelected(item);\r\n    },\r\n    [onSelectedRow]\r\n  );\r\n\r\n  const handleDouble = useCallback(\r\n    (item: any) => () => {\r\n      if (onDoubleClick) onDoubleClick(item);\r\n      setRowSelected(item);\r\n    },\r\n    [onDoubleClick]\r\n  );\r\n\r\n  const onExcel = useCallback(() => {\r\n    const pathName = pathname.replace(\"/\", \"\");\r\n    const wb = XLSX.utils.book_new(),\r\n      //@ts-ignore\r\n      ws = XLSX.utils.json_to_sheet(dataSource);\r\n    XLSX.utils.book_append_sheet(wb, ws, pathName);\r\n    XLSX.writeFile(wb, `${pathName} ${new Date().toUTCString()}.xlsx`);\r\n  }, [dataSource, pathname]);\r\n\r\n  const componentRef = useRef();\r\n\r\n  return (\r\n    <>\r\n      <TableContainer width={width} padding={padding} margin={margin}>\r\n        {label && (\r\n          <Text\r\n            width=\"100%\"\r\n            textAlign=\"center\"\r\n            marginBottom=\"7px\"\r\n            fontSize=\"md\"\r\n            fontWeight=\"bold\"\r\n          >\r\n            {t(label)}\r\n          </Text>\r\n        )}\r\n        <Flex\r\n          width=\"100%\"\r\n          padding=\"0\"\r\n          margin=\"5px 0\"\r\n          justifyContent=\"center\"\r\n          hidden={hideTools}\r\n        >\r\n          <IconButton iconName=\"plus\" onClick={onAdd} hidden={!canAdd} />\r\n          <IconButton\r\n            iconName=\"edit\"\r\n            onClick={onEdit}\r\n            hidden={!canEdit}\r\n            disabled={!rowSelected}\r\n          />\r\n          <IconButton\r\n            iconName=\"delete\"\r\n            onClick={onDelete}\r\n            hidden={!canDelete}\r\n            disabled={!rowSelected}\r\n          />\r\n          {additionalButtons &&\r\n            additionalButtons.map((button: additionalButtonsType) => {\r\n              return (\r\n                <IconButton\r\n                  iconName={button.icon}\r\n                  onClick={button.onClick}\r\n                  disabled={button.disabled}\r\n                  hidden={false}\r\n                />\r\n              );\r\n            })}\r\n          <IconButton\r\n            iconName=\"save\"\r\n            onClick={onSave}\r\n            hidden={!canSave}\r\n            disabled={!canSave}\r\n          />\r\n          <IconButton\r\n            iconName=\"print\"\r\n            onClick={onPrint}\r\n            hidden={!canPrint}\r\n            disabled={!canPrint}\r\n          />\r\n          <IconButton\r\n            iconName=\"excel\"\r\n            onClick={onExcel}\r\n            hidden={!canExcel}\r\n            disabled={!canExcel}\r\n          />\r\n        </Flex>\r\n        <Skeleton isLoaded={!loading} fadeDuration={0}>\r\n          <Box overflowY=\"auto\" height={height}>\r\n            <ChakraTable\r\n              //@ts-ignore\r\n              ref={componentRef}\r\n            >\r\n              <Thead top={0} position=\"sticky\" bgColor=\"#3edae6\">\r\n                <Tr>\r\n                  {columns.map((item: any) => {\r\n                    return (\r\n                      <Th maxWidth={item.width} minWidth={item.width}>\r\n                        {t(item.title)}\r\n                      </Th>\r\n                    );\r\n                  })}\r\n                  <Th hidden={!actionColumn}>{t(\"actn\")}</Th>\r\n                </Tr>\r\n              </Thead>\r\n              <Tbody>\r\n                {dataSource?.map((item: any) => {\r\n                  return (\r\n                    <Tr\r\n                      key={item[rowKey]}\r\n                      onClick={handleSelectedRow(item)}\r\n                      onDoubleClick={handleDouble(item)}\r\n                      background={`${rowSelected === item ? \"#dbffbf\" : \"\"}`}\r\n                    >\r\n                      {columns.map((column: any) => {\r\n                        return (\r\n                          <Td maxWidth={column.width} minWidth={column.width}>\r\n                            {item[column.dataIndex]}\r\n                          </Td>\r\n                        );\r\n                      })}\r\n                      <Td hidden={!actionColumn}>\r\n                        <Button\r\n                          label={actionLabel}\r\n                          width=\"100%\"\r\n                          onClick={() => {\r\n                            onAction(item);\r\n                          }}\r\n                        />\r\n                      </Td>\r\n                    </Tr>\r\n                  );\r\n                })}\r\n              </Tbody>\r\n\r\n              {/* <Tfoot>\r\n                        <Tr>\r\n                        <Th>To convert</Th>\r\n                        <Th>into</Th>\r\n                        <Th isNumeric>multiply by</Th>\r\n                        </Tr>\r\n                    </Tfoot> */}\r\n            </ChakraTable>\r\n            {(!Array.isArray(dataSource) || dataSource.length === 0) &&\r\n            !loading ? (\r\n              <Flex justifyContent=\"center\" width=\"100%\">\r\n                <Text as=\"b\" fontSize=\"md\" color=\"red\">\r\n                  No Data\r\n                </Text>\r\n              </Flex>\r\n            ) : (\r\n              <></>\r\n            )}\r\n          </Box>\r\n        </Skeleton>\r\n      </TableContainer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Table;\r\n","import { useCallback } from \"react\";\r\nimport { useMutation } from \"@commons/hooks\";\r\n\r\nconst useTableControlsButtons = ({ api = \"\", runFetch }: any) => {\r\n  const { setRow: newRecord } = useMutation({\r\n    link: api,\r\n    additionalFunctionToRun: runFetch,\r\n    method: \"POST\",\r\n  });\r\n  const { setRow: updateRecord } = useMutation({\r\n    link: api,\r\n    additionalFunctionToRun: runFetch,\r\n    method: \"PUT\",\r\n  });\r\n  const { setRow: deleteRecord } = useMutation({\r\n    link: api,\r\n    additionalFunctionToRun: runFetch,\r\n    method: \"Delete\",\r\n  });\r\n\r\n  const onSaveAndInsertion = useCallback(\r\n    (record: any) => {\r\n      if (record.query_status === \"n\") {\r\n        newRecord(record);\r\n      } else if (record.query_status === \"u\") {\r\n        updateRecord(record);\r\n      } else if (record.query_status === \"d\") {\r\n        deleteRecord(record);\r\n      }\r\n    },\r\n    [newRecord, updateRecord, deleteRecord]\r\n  );\r\n\r\n  return { onSaveAndInsertion };\r\n};\r\n\r\nexport default useTableControlsButtons;\r\n","import { typeObject } from \"./interface\";\r\n\r\nexport const iconType: typeObject = {\r\n  excel: \"fa-sharp fa-regular fa-file-excel\",\r\n  plus: \"fa-sharp fa-solid fa-plus\",\r\n  edit: \"fa-sharp fa-solid fa-pen-clip\",\r\n  delete: \"fa-sharp fa-solid fa-trash\",\r\n  save: \"fa-solid fa-floppy-disk\",\r\n  print: \"fa-solid fa-print\",\r\n  search: \"fa-solid fa-magnifying-glass\",\r\n  clear: \"fa-solid fa-broom\",\r\n};\r\n","import React, { memo } from \"react\";\r\nimport Button from \"./button\"\r\nimport { iconType } from \"./constants\"\r\nimport { iconButtonProp } from \"./interface\"\r\n\r\nconst IconButton = ({\r\n    iconName,\r\n    backGround = \"none\",\r\n    margin = \"5px\",\r\n    ...prop\r\n}: iconButtonProp) => {\r\n\r\n    const icon = <i className={iconName ? iconType[iconName] : \"\"}></i>\r\n\r\n    return (\r\n        <>\r\n            <Button\r\n                border=\"none\"\r\n                icon={icon}\r\n                padding=\"0\"\r\n                borderRadius=\"20px\"\r\n                margin={margin}\r\n                backGround={backGround}\r\n                {...prop}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default memo(IconButton)","import styled from \"@emotion/styled\";\r\nimport { Checkbox } from 'antd';\r\nimport {primaryColors} from \"@commons/global\"\r\nimport { CheckBoxProps } from \"./interface\";\r\n\r\nexport const StyledCheckBox = styled(Checkbox)<CheckBoxProps>`\r\n    width: ${({width})=>width};\r\n    padding: ${({padding})=>padding};\r\n    height: ${({height})=>height};\r\n    margin: ${({margin})=>margin};\r\n   ${({required})=>required && `background-color: ${primaryColors.danger};`}\r\n`","import React, { memo, useCallback } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { StyledCheckBox } from \"./styled\";\r\nimport { CheckBoxProps } from \"./interface\";\r\n\r\nconst CheckBox = ({\r\n  label = \"\",\r\n  value,\r\n  onChange,\r\n  name,\r\n  width,\r\n  height,\r\n  disabled,\r\n  required,\r\n  padding,\r\n  margin = \"10px\",\r\n}: CheckBoxProps) => {\r\n  const { t } = useTranslation();\r\n  const handleChange = useCallback(\r\n    (event: { target: { checked: boolean } }) => {\r\n      if (event.target.checked === true) {\r\n        onChange({ name: name, value: \"Y\" });\r\n      } else if (event.target.checked === false) {\r\n        onChange({ name: name, value: \"N\" });\r\n      }\r\n    },\r\n    [name, onChange]\r\n  );\r\n\r\n  const checked = value === \"Y\" ? true : false;\r\n\r\n  return (\r\n    <>\r\n      <StyledCheckBox \r\n      onChange={handleChange}\r\n      checked={checked}\r\n      width={width}\r\n      height={height}\r\n      disabled={disabled}\r\n      padding={padding}\r\n      margin={margin}\r\n      required={required}\r\n      >\r\n        {t(label)}\r\n    </StyledCheckBox>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default memo(CheckBox);\r\n","import { useRef, useEffect } from \"react\";\r\n\r\nconst usePrevious = <T>(value: T): T => {\r\n  const ref = useRef<T>();\r\n\r\n  useEffect(() => {\r\n    ref.current = value;\r\n  });\r\n\r\n  return ref.current as T;\r\n};\r\n\r\nexport default usePrevious;\r\n","import { useState, useCallback, useEffect, useRef } from \"react\";\r\nimport usePrevious from \"./usePrevious\";\r\n\r\ninterface useFormManagerProps {\r\n  initialValues?: any;\r\n}\r\n\r\nconst useFormManager = ({ initialValues }: useFormManagerProps) => {\r\n  const [state, setState] = useState<typeof initialValues>(initialValues);\r\n\r\n  const hasAnyFieldChangedRef = useRef(false);\r\n  const preValues = usePrevious(initialValues);\r\n\r\n  const areInitialValuesChanged = useCallback(\r\n    () => !Object.is(JSON.stringify(preValues), JSON.stringify(initialValues)),\r\n    [initialValues, preValues]\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (areInitialValuesChanged()) {\r\n      setState({ ...initialValues });\r\n    }\r\n  }, [areInitialValuesChanged, initialValues]);\r\n\r\n  const resetForm = useCallback(() => {\r\n    hasAnyFieldChangedRef.current = false;\r\n    setState(() => initialValues);\r\n    // @ts-ignore\r\n  }, [initialValues]);\r\n\r\n  useEffect(\r\n    () => {\r\n      return resetForm;\r\n    },\r\n    // eslint-disable-next-line\r\n    []\r\n  );\r\n\r\n  const onChange = useCallback(\r\n    (eventData: any) => {\r\n      const { name, value } = eventData;\r\n      setState({ ...state, [name]: value });\r\n    },\r\n    [state]\r\n  );\r\n\r\n  const handleMultiInput = useCallback((e:any)=>{\r\n    setState({\r\n      ...state,\r\n      ...e\r\n    })\r\n  },[state])\r\n\r\n  const handleSelectWithLabelChange = useCallback(\r\n    (eventData: any) => {\r\n      setState({\r\n        ...state,\r\n        [eventData.name]: eventData.value,\r\n        [eventData.selectLabelName]: eventData.label,\r\n      });\r\n    },\r\n    [state]\r\n  );\r\n\r\n  const handleArrayChange = useCallback(\r\n    ({ name, value }: any) => {\r\n      setState({ ...state, [name]: [...state[name], value] });\r\n    },\r\n    [state]\r\n  );\r\n\r\n  return {\r\n    state,\r\n    onChange,\r\n    resetForm,\r\n    handleRootState: setState,\r\n    handleSelectWithLabelChange,\r\n    handleArrayChange,\r\n    handleMultiInput\r\n  };\r\n};\r\n\r\nexport default useFormManager;\r\n","import { useState, useCallback } from \"react\";\r\nimport { useLocalStorage } from \"@commons/hooks\";\r\nimport { API_ID } from \"@commons/global\";\r\nimport { useToast } from \"@chakra-ui/react\";\r\n\r\ninterface useMutationProps {\r\n  link: string;\r\n  noAuthorization?: boolean;\r\n  additionalFunctionToRun?: () => void;\r\n  runOnSuccess?: () => void;\r\n  runOnFail?: () => void;\r\n  method?: string;\r\n}\r\ninterface successType {\r\n  response: string;\r\n}\r\n\r\nconst useMutation = ({\r\n  link = \"\",\r\n  noAuthorization = false,\r\n  additionalFunctionToRun,\r\n  runOnSuccess,\r\n  runOnFail,\r\n  method = \"POST\",\r\n}: useMutationProps) => {\r\n  const toast = useToast();\r\n  //@ts-ignore\r\n  const url = `http://192.168.1.250:5000/api/${API_ID[link]}`;\r\n  const [success, setSuccess] = useState<successType>();\r\n  const { authorization } = useLocalStorage();\r\n  const postData = useCallback(\r\n    async (dataToPost: any) => {\r\n      if (authorization || noAuthorization) {\r\n        const settings = {\r\n          method: method,\r\n          headers: {\r\n            Accept: \"application/json\",\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: `Bearer ${authorization}`,\r\n          },\r\n          body: JSON.stringify(dataToPost),\r\n        };\r\n        try {\r\n          const fetchResponse = await fetch(url, settings);\r\n          const data = await fetchResponse.json();\r\n          if (data.response === \"success\") {\r\n            toast({\r\n              position: \"top-right\",\r\n              title: \"Success\",\r\n              description: `${data.response}`,\r\n              status: \"success\",\r\n              duration: 5000,\r\n              isClosable: true,\r\n            });\r\n            if (runOnSuccess) runOnSuccess();\r\n          } else {\r\n            toast({\r\n              position: \"top-right\",\r\n              title: \"Error\",\r\n              description: `${data.message}`,\r\n              status: \"error\",\r\n              duration: 9000,\r\n              isClosable: true,\r\n            });\r\n            if (runOnFail) runOnFail();\r\n          }\r\n          setSuccess(data);\r\n          if (additionalFunctionToRun) {\r\n            additionalFunctionToRun();\r\n          }\r\n          return data;\r\n        } catch (e) {}\r\n      }\r\n    },\r\n    [\r\n      additionalFunctionToRun,\r\n      authorization,\r\n      method,\r\n      noAuthorization,\r\n      runOnFail,\r\n      runOnSuccess,\r\n      toast,\r\n      url,\r\n    ]\r\n  );\r\n\r\n  const setRow = useCallback(\r\n    (row: any) => {\r\n      postData(row);\r\n    },\r\n    [postData]\r\n  );\r\n\r\n  return { success, setRow };\r\n};\r\n\r\nexport default useMutation;\r\n","import styled from '@emotion/styled';\r\n\r\nexport const StyledInput = styled.input<any>`\r\nbackground: #fdfdfd;\r\nborder: 0.5px solid #cbd5e0;\r\nheight: 100%;\r\nwidth: 100%;\r\nborder-radius: 7px;\r\npadding: 0 16px;\r\n`\r\n\r\n//`border:  ${required ? `0.5px solid red` : `0.5px solid #cbd5e0`};`","import React, { memo, useCallback } from \"react\";\r\nimport { useTranslation } from 'react-i18next';\r\nimport { FormLabel, Flex } from '@chakra-ui/react'\r\nimport { StyledInput } from \"./styled\"\r\nimport { InputTextProps } from \"./interface\";\r\n\r\nconst InputText = ({\r\n    disabled,\r\n    value,\r\n    name,\r\n    label = \"\",\r\n    onChange,\r\n    height = \"65px\",\r\n    width = \"200px\",\r\n    type = \"text\",\r\n    placeHolder,\r\n    padding,\r\n    margin = \"10px\",\r\n    className = \"\",\r\n    required,\r\n    ...props\r\n}: InputTextProps) => {\r\n    const { t } = useTranslation();\r\n\r\n    const handleChange = useCallback((event: { target: { value: string; }; }) => {\r\n        onChange({ name: name, value: event.target.value })\r\n    }, [name, onChange]);\r\n\r\n    return (\r\n        <>\r\n            <Flex\r\n                direction=\"column\"\r\n                width={width}\r\n                padding={padding}\r\n                margin={margin}\r\n                height={height}\r\n            >\r\n                <FormLabel>{t(label)}</FormLabel>\r\n                <StyledInput\r\n                    placeholder={placeHolder}\r\n                    disabled={disabled}\r\n                    required={required}\r\n                    onChange={handleChange}\r\n                    width=\"100%\"\r\n                    className={className}\r\n                    value={value}\r\n                    type={type}\r\n                    {...props}\r\n                />\r\n            </Flex>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default memo(InputText)","import React, { memo } from 'react'\r\nimport { useTranslation } from 'react-i18next'\r\n\r\nconst BaseTitle = ({\r\n    value,\r\n    margin,\r\n    padding,\r\n    width = \"\",\r\n    fontSize = \"\",\r\n    color,\r\n    backgroundColor\r\n}: any) => {\r\n    const { t } = useTranslation()\r\n    return (\r\n        <>\r\n            <strong\r\n                style={{\r\n                    padding: padding,\r\n                    margin: margin,\r\n                    width: width,\r\n                    fontSize: fontSize,\r\n                    color: color,\r\n                    backgroundColor: backgroundColor\r\n                }}>\r\n                {t(value)}\r\n            </strong>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default memo(BaseTitle)","import styled from \"@emotion/styled\";\r\n\r\nexport const ModalContainer = styled.div`\r\n  position: absolute;\r\n\ttop: 0;\r\n\tleft: 0;\r\n\tright: 0;\r\n\tbottom: 0;\r\n\tdisplay: flex;\r\n\talign-items: center;\r\n\tjustify-content: center;\r\n\tbackground-color: rgba(0, 0, 0, 0.5);\r\n    z-index: 1;\r\n`\r\n\r\nexport const ModalContent = styled.div<{width: string, height?: string}>`\r\n /* position: relative;\r\n    margin: 5% auto;\r\n    padding: 20px;\r\n    border: 1px solid #888;\r\n    width: ${({width})=> width};\r\n    height: ${({height})=> height};\r\n    background-color: white;\r\n    border-radius: 15px; */\r\n    /* max-height: 90vh;\r\n\tmax-width: 500px; */\r\n    width: ${({width})=> width};\r\n    height: ${({height})=> height};\r\n\tmargin-left: auto;\r\n\tmargin-right: auto;\r\n\tbackground-color: #fff;\r\n\tborder-radius: 15px;\r\n\toverflow: hidden;\r\n\tdisplay: flex;\r\n\tflex-direction: column;\r\n\tbox-shadow: 0 15px 30px 0 rgba(#000, 0.25);\r\n\t@media (max-width: 600px) {\r\n\t\twidth: 90%;\r\n\t}\r\n`\r\n\r\nexport const ModalHeader = styled.div`\r\n\tpadding: 15px 32px;\r\n\tborder-bottom: 1px solid #ddd;\r\n\tdisplay: flex;\r\n\talign-items: center;\r\n\tjustify-content: space-between;\r\n`\r\n\r\nexport const ModalBody = styled.div`\r\n\tpadding: 10px 32px;\r\n\toverflow-y: auto;\r\n    height: 100%;\r\n`\r\n\r\nexport const ModalFooter = styled.div`\r\n    padding: 15px 32px;\r\n\tdisplay: flex;\r\n\talign-items: center;\r\n\tjustify-content: flex-end;\r\n\tborder-top: 1px solid #ddd;\r\n\tgap: 12px;\r\n\tposition: relative;\r\n\t&:after {\r\n\t\tcontent: \"\";\r\n\t\tdisplay: block;\r\n\t\tposition: absolute;\r\n\t\ttop: -51px;\r\n\t\tleft: 24px;\r\n\t\tright: 24px;\r\n\t\theight: 50px;\r\n\t\tflex-shrink: 0;\r\n\t\tbackground-image: linear-gradient(to top, rgba(#fff, 0.75), transparent);\r\n\t\tpointer-events: none;\r\n\t}\r\n`","import React, { memo } from 'react';\r\nimport {Button} from \"@commons/button\";\r\nimport {BaseTitle} from \"@commons/page-title\"\r\nimport Flex from \"@commons/flex\"\r\nimport {ModalContainer, ModalContent, ModalHeader, ModalBody, ModalFooter} from \"./style\"\r\n\r\ninterface ModalProp {\r\n    visible?: boolean,\r\n    children?: any,\r\n    label: string,\r\n    onOK?: () => void,\r\n    onClose?: () => void,\r\n    submitTitle?: string,\r\n    width?: string;\r\n    hideSaveButton?: boolean;\r\n    hideCloseButton?: boolean;\r\n    height?: string;\r\n    noFooter?: boolean;\r\n}\r\n\r\nconst Modal = (\r\n    {\r\n        children,\r\n        visible = false,\r\n        label,\r\n        onClose,\r\n        onOK,\r\n        submitTitle = \"smbt\",\r\n        width = \"90%\",\r\n        height = \"auto\",\r\n        hideSaveButton = false,\r\n        hideCloseButton = false,\r\n        noFooter = false\r\n    }: ModalProp\r\n) => {\r\n\r\n    return (\r\n        <>\r\n        {visible &&\r\n            <ModalContainer hidden={!visible}>\r\n  <ModalContent width={width} height={height}>\r\n    <ModalHeader>\r\n        <BaseTitle value={label} />\r\n        <Button label='&times;' backGround='none' margin='0' padding='0' data-dismiss=\"modal\" onClick={onClose} />\r\n    </ModalHeader>\r\n\r\n    <ModalBody>\r\n        <Flex width=\"100%\" padding=\"0\" wrap=\"wrap\" height=\"100%\">\r\n      {children}\r\n      </Flex>\r\n    </ModalBody>\r\n\r\n    {!noFooter &&\r\n        <ModalFooter hidden={noFooter}>\r\n            {!hideSaveButton && <Button onClick={onOK} label={submitTitle} hidden={hideSaveButton} width='20%' margin='0' />}\r\n            {!hideCloseButton && <Button onClick={onClose} label='cls' hidden={hideCloseButton} width='20%' backGround='red' margin='0' />}\r\n        </ModalFooter>\r\n    }\r\n  </ModalContent>\r\n</ModalContainer>\r\n        }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default memo(Modal);"],"names":["Flex","_ref","children","justifyContent","width","height","padding","margin","bordered","backgroundColor","borderColor","borderWidth","borderRadius","flexDirection","textAlign","hidden","wrap","prop","border","setBorder","useState","useEffect","concat","_jsx","_Fragment","ChackraFlex","background","memo","usePdfViewerControl","PDFRef","useRef","handleOpenModal","useCallback","async","_PDFRef$current","current","handleOpen","PdfViewer","ref","reportName","params","visible","setVisible","handleClose","useImperativeHandle","computedUrl","URLSearchParams","Modal","label","onClose","noFooter","data","forwardRef","ConfirmationModal","onConfirm","message","handleConfirmation","onOK","submitTitle","TableWithApi","api","postApi","columns","ModalContent","onClick","fetchOnFirstRun","checkForParams","modalWidth","printProps","tableProps","runFetch","loading","setData","resetData","useFetch","link","onSaveAndInsertion","useTableControlsButtons","selectedRow","setSelectedRow","modal","setModal","confirmModal","setConfirmModal","handleAdd","query_status","handleEdit","handleCloseModal","handleCloseConfirmModal","handleOpenConfirmModal","foundDataSource","useMemo","handlePrint","setTableData","resetTableData","getCurrentDataSource","_jsxs","hideCloseButton","hideSaveButton","refreshTable","handleDelete","Table","dataSource","onAdd","onEdit","onPrint","onDelete","onSelectedRow","row","rowKey","hideTools","canEdit","canAdd","canDelete","canExcel","actionColumn","onAction","actionLabel","canPrint","additionalButtons","onSave","canSave","onDoubleClick","pathname","useLocation","t","useTranslation","rowSelected","setRowSelected","handleSelectedRow","item","handleDouble","onExcel","pathName","replace","wb","XLSX","book_new","ws","json_to_sheet","book_append_sheet","Date","toUTCString","componentRef","TableContainer","Text","marginBottom","fontSize","fontWeight","IconButton","iconName","disabled","map","button","icon","Skeleton","isLoaded","fadeDuration","Box","overflowY","ChakraTable","Thead","top","position","bgColor","Tr","Th","maxWidth","minWidth","title","Tbody","column","Td","dataIndex","Button","Array","isArray","length","as","color","setRow","newRecord","useMutation","additionalFunctionToRun","method","updateRecord","deleteRecord","record","iconType","excel","plus","edit","delete","save","print","search","clear","backGround","className","StyledCheckBox","styled","Checkbox","_templateObject","_taggedTemplateLiteral","_ref2","_ref3","_ref4","_ref5","required","primaryColors","danger","CheckBox","value","onChange","name","handleChange","event","target","checked","initialValues","state","setState","hasAnyFieldChangedRef","preValues","usePrevious","areInitialValuesChanged","Object","is","JSON","stringify","resetForm","eventData","handleMultiInput","e","handleSelectWithLabelChange","selectLabelName","handleArrayChange","handleRootState","noAuthorization","runOnSuccess","runOnFail","toast","useToast","url","API_ID","success","setSuccess","authorization","useLocalStorage","postData","settings","headers","Accept","Authorization","body","dataToPost","fetchResponse","fetch","json","response","description","status","duration","isClosable","StyledInput","input","InputText","type","placeHolder","props","direction","FormLabel","placeholder","BaseTitle","style","ModalContainer","div","_templateObject2","ModalHeader","_templateObject3","ModalBody","_templateObject4","ModalFooter","_templateObject5"],"sourceRoot":""}