{"version":3,"file":"static/js/304.39c488af.chunk.js","mappings":"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","sources":["../common/hooks/src/usePrevious.ts","../common/hooks/src/useFormManager.ts","../common/input-text/src/inputText.tsx","../common/check-box/src/CheckBox.tsx","../pages/page-name-page/src/Partials/ModalView.tsx","../pages/page-name-page/src/constants.ts","../pages/page-name-page/src/component.tsx"],"sourcesContent":["import { useRef, useEffect } from \"react\";\n\nconst usePrevious = <T>(value: T): T => {\n  const ref = useRef<T>();\n\n  useEffect(() => {\n    ref.current = value;\n  });\n\n  return ref.current as T;\n};\n\nexport default usePrevious;\n","import { useState, useCallback, useEffect, useRef } from \"react\";\nimport usePrevious from \"./usePrevious\";\n\ninterface useFormManagerProps {\n  initialValues?: any;\n  setSelectedRow?: any;\n  tableModal?: boolean;\n}\n\nconst useFormManager = ({ initialValues }: useFormManagerProps) => {\n  const [state, setState] = useState<typeof initialValues>(initialValues);\n\n  const hasAnyFieldChangedRef = useRef(false);\n  const preValues = usePrevious(initialValues);\n\n  const areInitialValuesChanged = useCallback(\n    () => !Object.is(JSON.stringify(preValues), JSON.stringify(initialValues)),\n    [initialValues, preValues]\n  );\n\n  useEffect(() => {\n    if (areInitialValuesChanged()) {\n      setState({ ...initialValues });\n    }\n  }, [areInitialValuesChanged, initialValues]);\n\n  const resetForm = useCallback(() => {\n    hasAnyFieldChangedRef.current = false;\n    setState(() => initialValues);\n    // @ts-ignore\n  }, [initialValues]);\n\n  useEffect(\n    () => {\n      return resetForm;\n    },\n    // eslint-disable-next-line\n    []\n  );\n\n  const onChange = useCallback(\n    (eventData: any) => {\n      const { name, value } = eventData;\n      setState({ ...state, [name]: value });\n    },\n    [state]\n  );\n\n  const handleRootState = useCallback((e: any) => {\n    setState(e);\n  }, []);\n\n  const handleSelectWithLabelChange = useCallback(\n    (eventData: any) => {\n      setState({\n        ...state,\n        [eventData.name]: eventData.value,\n        [eventData.selectLabelName]: eventData.label,\n      });\n    },\n    [state]\n  );\n\n  const handleArrayChange = useCallback(\n    ({ name, value }: any) => {\n      setState({ ...state, [name]: [...state[name], value] });\n    },\n    [state]\n  );\n\n  return {\n    state,\n    onChange,\n    resetForm,\n    handleRootState,\n    handleSelectWithLabelChange,\n    handleArrayChange,\n  };\n};\n\nexport default useFormManager;\n","import React, { memo, useCallback } from \"react\";\nimport { useTranslation } from 'react-i18next';\nimport { Input, FormLabel, Flex } from '@chakra-ui/react'\nimport { InputTextProps } from \"./interface\";\n\nconst InputText = ({\n    disabled,\n    value,\n    name,\n    Label = \"\",\n    onChange,\n    width = \"200px\",\n    type = \"text\",\n    placeHolder,\n    padding,\n    margin = \"10px\",\n    className = \"\",\n    required = false\n}: InputTextProps) => {\n    const { t } = useTranslation()\n\n    const handleChange = useCallback((event: { target: { value: string; }; }) => {\n        onChange({ name: name, value: event.target.value })\n    }, [name, onChange])\n\n    return (\n        <>\n            <Flex\n                direction=\"column\"\n                width={width}\n                padding={padding}\n                margin={margin}\n            >\n                <FormLabel>{t(Label)}</FormLabel>\n                <Input\n                    placeholder={placeHolder}\n                    size='md'\n                    isDisabled={disabled}\n                    isRequired={required}\n                    onChange={handleChange}\n                    width=\"100%\"\n                    className={className}\n                    value={value}\n                    type={type}\n                />\n            </Flex>\n        </>\n    )\n}\n\nexport default memo(InputText)","import React, { memo, useCallback, useEffect, useState } from \"react\";\nimport { useTranslation } from 'react-i18next'\nimport { Checkbox as ChakraCheckBox } from '@chakra-ui/react'\nimport { CheckBoxProps } from \"./interface\";\n\nconst CheckBox = ({\n    label = \"\",\n    value,\n    onChange,\n    name,\n    width,\n    disabled,\n    padding,\n    margin = \"10px\"\n}: CheckBoxProps) => {\n    const { t } = useTranslation()\n    const [checked, setChecked] = useState(false)\n    const handleChange = useCallback((event: { target: { checked: boolean; }; }) => {\n        if (event.target.checked === true) {\n            onChange({ name: name, value: \"Y\" })\n        } else if (event.target.checked === false) {\n            onChange({ name: name, value: \"N\" })\n        }\n    }, [name, onChange])\n\n    useEffect(() => {\n        if (value === \"Y\") {\n            setChecked(true)\n        } else if (value === \"N\") {\n            setChecked(false)\n        }\n    }, [value])\n\n    return (\n        <>\n            <ChakraCheckBox\n                isChecked={checked}\n                onChange={handleChange}\n                width={width}\n                isDisabled={disabled}\n                padding={padding}\n                margin={margin}\n            >\n                {t(label)}\n            </ChakraCheckBox>\n        </>\n    )\n}\n\nexport default memo(CheckBox)","import React, { memo, useCallback } from 'react';\r\nimport { InputText } from \"@commons/input-text\";\r\nimport { useFormManager } from '@commons/hooks';\r\nimport { ModalViewProp } from \"@commons/global\"\r\nimport { useTableControlsButtons } from \"@commons/table\";\r\nimport { Button } from \"@commons/button\";\r\nimport { CheckBox } from \"@commons/check-box\"\r\n\r\nconst ModalView = ({\r\n    onClose,\r\n    selectedRow,\r\n    refreshTable\r\n}: ModalViewProp) => {\r\n    const {\r\n        state,\r\n        onChange,\r\n    }\r\n        = useFormManager({\r\n            initialValues: {\r\n                ...selectedRow\r\n            }\r\n        })\r\n    const { onSaveAndInsertion } = useTableControlsButtons({ api: \"POST_PAGE_NAME_MAIN_TABLE\", runFetch: refreshTable })\r\n\r\n    const handleSave = useCallback(() => {\r\n        onSaveAndInsertion(state)\r\n        onClose()\r\n    }, [onSaveAndInsertion, state, onClose])\r\n\r\n    return (\r\n        <>\r\n            <InputText\r\n                name=\"page_name\"\r\n                Label='page_name'\r\n                onChange={onChange}\r\n                value={state.page_name}\r\n                width=\"47%\"\r\n            />\r\n            <InputText\r\n                name=\"page_link\"\r\n                Label='page_link'\r\n                onChange={onChange}\r\n                value={state.page_link}\r\n                width=\"47%\"\r\n            />\r\n            <CheckBox\r\n                name=\"page_disabled\"\r\n                label='page_disabled'\r\n                onChange={onChange}\r\n                value={state.page_disabled}\r\n                width=\"47%\"\r\n            />\r\n            <CheckBox\r\n                name=\"run_in_modal\"\r\n                label='run_in_modal'\r\n                onChange={onChange}\r\n                value={state.run_in_modal}\r\n                width=\"47%\"\r\n            />\r\n            <InputText\r\n                name=\"parent_name\"\r\n                Label='parent_name'\r\n                onChange={onChange}\r\n                value={state.parent_name}\r\n                width=\"47%\"\r\n            />\r\n\r\n            <Button\r\n                onClick={handleSave}\r\n                label=\"sv\"\r\n            />\r\n        </>\r\n    )\r\n};\r\n\r\nexport default memo(ModalView)","export const columns = [\n  {\n    title: \"page_name\",\n    dataIndex: \"page_name\",\n    width: \"20%\",\n  },\n  {\n    title: \"page_link\",\n    dataIndex: \"page_link\",\n    width: \"17%\",\n  },\n  {\n    title: \"page_disabled\",\n    dataIndex: \"page_disabled\",\n    width: \"17%\",\n  },\n  {\n    title: \"run_in_modal\",\n    dataIndex: \"run_in_modal\",\n    width: \"17%\",\n  },\n  {\n    title: \"parent_name\",\n    dataIndex: \"parent_name\",\n    width: \"17%\",\n  },\n  {\n    title: \"created_at\",\n    dataIndex: \"created_at\",\n    width: \"20%\",\n  },\n  {\n    title: \"updated_at\",\n    dataIndex: \"updated_at\",\n    width: \"20%\",\n  },\n];\n","import React, { memo } from \"react\";\nimport ModalView from \"./Partials/ModalView\";\nimport { TableWithApi } from \"@commons/table\";\nimport { columns } from \"./constants\"\n\nconst PageName = () => {\n    return (\n        <>\n            <TableWithApi\n                api={\"QUERY_PAGE_NAME_MAIN_TABLE\"}\n                postApi={\"POST_PAGE_NAME_MAIN_TABLE\"}\n                columns={columns}\n                hideTools={false}\n                canEdit={true}\n                canAdd={true}\n                canDelete={true}\n                canExcel\n                rowKey={\"customer_id\"}\n                ModalContent={ModalView}\n                fetchOnFirstRun\n            />\n        </>\n    )\n}\n\nexport default memo(PageName)"],"names":["value","ref","useRef","useEffect","current","initialValues","useState","state","setState","hasAnyFieldChangedRef","preValues","usePrevious","areInitialValuesChanged","useCallback","Object","is","JSON","stringify","resetForm","onChange","eventData","name","handleRootState","e","handleSelectWithLabelChange","selectLabelName","label","handleArrayChange","InputText","disabled","Label","width","type","placeHolder","padding","margin","className","required","t","useTranslation","handleChange","event","target","direction","I","placeholder","size","isDisabled","isRequired","memo","CheckBox","checked","setChecked","isChecked","ModalView","onClose","selectedRow","refreshTable","useFormManager","onSaveAndInsertion","useTableControlsButtons","api","runFetch","handleSave","page_name","page_link","page_disabled","run_in_modal","parent_name","onClick","columns","title","dataIndex","PageName","postApi","hideTools","canEdit","canAdd","canDelete","canExcel","rowKey","ModalContent","fetchOnFirstRun"],"sourceRoot":""}