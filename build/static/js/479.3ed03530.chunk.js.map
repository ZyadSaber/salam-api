{"version":3,"file":"static/js/479.3ed03530.chunk.js","mappings":"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","sources":["../common/Flex/src/index.tsx","../common/TableView/src/ApiTable.tsx","../common/button/src/iconButton.tsx","../common/TableView/src/Table.tsx","../common/TableView/src/hooks/useTableControlsButtons.ts","../common/hooks/src/useMutation.ts","../common/page-title/src/baseTitle.tsx","../common/modal/src/style.ts","../common/modal/src/index.tsx"],"sourcesContent":["import React, { memo, useEffect, useState } from \"react\";\r\nimport { Flex as ChackraFlex } from \"@chakra-ui/react\"\r\nimport { flexProp } from \"./interface\"\r\n\r\nconst Flex = ({\r\n    children,\r\n    justifyContent,\r\n    width,\r\n    height,\r\n    padding = \"10px\",\r\n    margin,\r\n    bordered = false,\r\n    backgroundColor,\r\n    borderColor = \"#3c8dcf\",\r\n    borderWidth = \"px\",\r\n    borderRadius = \"5px\",\r\n    flexDirection = \"row\",\r\n    textAlign = \"\",\r\n    hidden = false,\r\n    wrap,\r\n    ...prop\r\n}: any) => {\r\n    const [border, setBorder] = useState(\"\")\r\n    useEffect(() => {\r\n        if (bordered) {\r\n            setBorder(`${borderWidth} solid ${borderColor}`)\r\n        }\r\n    }, [borderColor, borderWidth, bordered])\r\n    return (\r\n        <>\r\n            <ChackraFlex\r\n                width={width}\r\n                height={height}\r\n                padding={padding}\r\n                margin={margin}\r\n                background={backgroundColor}\r\n                borderRadius={borderRadius}\r\n                flexDirection={flexDirection}\r\n                textAlign={textAlign}\r\n                justifyContent={justifyContent}\r\n                hidden={hidden}\r\n                //@ts-ignore\r\n                wrap={wrap ? \"wrap\" : \"\"}\r\n                {...prop}\r\n            >\r\n                {children}\r\n            </ChackraFlex>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default memo(Flex)","import React,\r\n{\r\n    memo,\r\n    useState,\r\n    useCallback,\r\n    useImperativeHandle,\r\n    forwardRef\r\n} from \"react\";\r\nimport Table from \"./Table\";\r\nimport { useFetch } from \"@commons/hooks\"\r\nimport Modal from \"@commons/modal\";\r\nimport useTableControlsButtons from \"./hooks/useTableControlsButtons\";\r\nimport { TableWithApiProps } from \"./interface\"\r\n\r\n//TODO: change the ref type\r\n\r\nconst TableWithApi = ({\r\n    api,\r\n    postApi,\r\n    columns,\r\n    ModalContent,\r\n    onClick,\r\n    fetchOnFirstRun = false,\r\n    params,\r\n    checkForParams = false,\r\n    modalWidth = \"60%\",\r\n    ...tableProps\r\n}: TableWithApiProps,\r\n    ref: any\r\n) => {\r\n    const { data, runFetch, loading, setData, resetData } = useFetch({ link: api, fetchOnFirstRun: fetchOnFirstRun, params: params, checkForParams: true })\r\n    const { onSaveAndInsertion } = useTableControlsButtons({ api: postApi, runFetch: runFetch })\r\n    const [selectedRow, setSelectedRow] = useState({})\r\n    const [modal, setModal] = useState(false);\r\n    const handleAdd = useCallback(() => {\r\n        setSelectedRow({ query_status: \"n\" })\r\n        setModal(true)\r\n    }, [setSelectedRow])\r\n    const handleEdit = useCallback(() => {\r\n        setSelectedRow({ ...selectedRow, query_status: \"u\" })\r\n        setModal(true)\r\n    }, [selectedRow, setSelectedRow])\r\n    const handleDelete = () => {\r\n        onSaveAndInsertion({ ...selectedRow, query_status: \"d\" })\r\n    }\r\n\r\n    const handleCloseModal = useCallback(() => {\r\n        setModal(false)\r\n    }, [])\r\n\r\n\r\n    const handleSelectedRow = (row: any) => {\r\n        setSelectedRow(row)\r\n        if (onClick) onClick(row)\r\n    };\r\n\r\n    useImperativeHandle(ref, () => ({\r\n        runFetch,\r\n        setTableData: setData,\r\n        resetTableData: resetData,\r\n        getCurrentDataSource: data\r\n    }));\r\n\r\n    return (\r\n        <>\r\n            {ModalContent && <Modal\r\n                visible={modal}\r\n                onClose={handleCloseModal}\r\n                hideCloseButton\r\n                hideSaveButton\r\n                label=\"dtls\"\r\n                noFooter\r\n                width={modalWidth}\r\n            >\r\n                <ModalContent\r\n                    onClose={handleCloseModal}\r\n                    selectedRow={selectedRow}\r\n                    refreshTable={runFetch}\r\n                />\r\n            </Modal>\r\n            }\r\n            <Table\r\n                dataSource={data?.data}\r\n                columns={columns}\r\n                onAdd={handleAdd}\r\n                onEdit={handleEdit}\r\n                onDelete={handleDelete}\r\n                onSelectedRow={handleSelectedRow}\r\n                loading={loading}\r\n                {...tableProps}\r\n            >\r\n            </Table>\r\n\r\n        </>\r\n    )\r\n}\r\nexport default memo(forwardRef(TableWithApi))","import React, { memo } from \"react\";\r\nimport { iconButtonProp } from \"./interface\"\r\n\r\nconst IconButton = ({\r\n    icon,\r\n    onClick,\r\n    disabled = false,\r\n    width = \"30px\",\r\n    height = \"30px\",\r\n    color,\r\n    margin = \"10px\",\r\n    padding,\r\n    hidden = false\r\n}: iconButtonProp) => {\r\n    return (\r\n        <>\r\n            <button style={{\r\n                border: \"none\",\r\n                width: width,\r\n                height: height,\r\n                backgroundColor: color,\r\n                padding: padding,\r\n                margin: margin,\r\n                borderRadius: \"20px\"\r\n            }} hidden={hidden} onClick={onClick} disabled={disabled} >\r\n                <i className={icon}></i>\r\n            </button>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default memo(IconButton)","import React, { useState, useCallback, useRef } from 'react';\r\nimport { Button, IconButton } from \"@commons/button\";\r\nimport { useLocation } from 'react-router-dom';\r\nimport * as XLSX from \"xlsx\";\r\nimport { useTranslation } from 'react-i18next';\r\nimport ReactToPrint from 'react-to-print';\r\nimport {\r\n    Table as ChakraTable,\r\n    Thead,\r\n    Tbody,\r\n    // Tfoot,\r\n    Text,\r\n    Box,\r\n    Tr,\r\n    Th,\r\n    Td,\r\n    TableContainer,\r\n    Skeleton,\r\n} from '@chakra-ui/react'\r\nimport Flex from \"@commons/flex\";\r\nimport { TableProps, additionalButtonsType } from \"./interface\";\r\n\r\n\r\nconst Table = ({\r\n    dataSource,\r\n    height = \"300px\",\r\n    rowKey = \"rowKey\",\r\n    columns,\r\n    hideTools = true,\r\n    canEdit = false,\r\n    canAdd = false,\r\n    canDelete = false,\r\n    canExcel = false,\r\n    onAdd,\r\n    onEdit,\r\n    onDelete,\r\n    actionColumn = false,\r\n    onAction,\r\n    actionLabel = \"\",\r\n    onSelectedRow,\r\n    label,\r\n    canPrint = false,\r\n    onPrint,\r\n    additionalButtons,\r\n    onSave,\r\n    canSave = false,\r\n    width = \"100%\",\r\n    margin = \"\",\r\n    padding = \"\",\r\n    loading = false,\r\n    onDoubleClick = (e) => { console.log(e) }\r\n}: TableProps) => {\r\n    const { pathname } = useLocation()\r\n    const { t } = useTranslation()\r\n    const [rowSelected, setRowSelected] = useState()\r\n    const handleSelectedRow = useCallback((item: any) => () => {\r\n        if (onSelectedRow) onSelectedRow(item)\r\n        setRowSelected(item)\r\n    }, [onSelectedRow])\r\n\r\n    const handleDouble = useCallback((item: any) => () => {\r\n        if (onDoubleClick) onDoubleClick(item)\r\n        setRowSelected(item)\r\n    }, [onDoubleClick])\r\n\r\n    const onExcel = useCallback(() => {\r\n        const pathName = pathname.replace(\"/\", \"\")\r\n        const wb = XLSX.utils.book_new(),\r\n            //@ts-ignore\r\n            ws = XLSX.utils.json_to_sheet(dataSource)\r\n        XLSX.utils.book_append_sheet(wb, ws, pathName)\r\n        XLSX.writeFile(wb, `${pathName} ${new Date().toUTCString()}.xlsx`)\r\n    }, [dataSource, pathname])\r\n\r\n    const componentRef = useRef();\r\n\r\n    return (\r\n        <>\r\n            <TableContainer width={width} padding={padding} margin={margin}>\r\n                {label && <Text width=\"100%\" textAlign=\"center\" marginBottom=\"7px\" fontSize='md' fontWeight=\"bold\">{t(label)}</Text>}\r\n                <Flex\r\n                    width='100%'\r\n                    padding='0'\r\n                    margin='5px 0'\r\n                    justifyContent='center'\r\n                    hidden={hideTools}\r\n                >\r\n                    <IconButton\r\n                        icon='fa-sharp fa-solid fa-plus'\r\n                        onClick={onAdd}\r\n                        hidden={!canAdd}\r\n                    />\r\n                    <IconButton\r\n                        icon='fa-sharp fa-solid fa-pen-clip'\r\n                        onClick={onEdit}\r\n                        hidden={!canEdit}\r\n                        disabled={!rowSelected}\r\n                    />\r\n                    <IconButton\r\n                        icon='fa-sharp fa-solid fa-trash'\r\n                        onClick={onDelete}\r\n                        hidden={!canDelete}\r\n                        disabled={!rowSelected}\r\n                    />\r\n                    {additionalButtons && additionalButtons.map((button: additionalButtonsType) => {\r\n                        return (\r\n                            <IconButton\r\n                                icon={button.icon}\r\n                                onClick={button.onClick}\r\n                                disabled={button.disabled}\r\n                                hidden={false}\r\n                            />\r\n                        )\r\n                    })}\r\n                    <IconButton\r\n                        icon='fa-solid fa-floppy-disk'\r\n                        onClick={onSave}\r\n                        hidden={!canSave}\r\n                        disabled={!canSave}\r\n                    />\r\n                    <IconButton\r\n                        icon='fa-solid fa-print'\r\n                        onClick={onPrint}\r\n                        hidden={!canPrint}\r\n                        disabled={!canPrint}\r\n                    />\r\n                    {/* <ReactToPrint\r\n                        trigger={() => <IconButton\r\n                            icon='fa-solid fa-print'\r\n                            hidden={!canPrint}\r\n                            disabled={!canPrint}\r\n                        />}\r\n                        //@ts-ignore\r\n                        content={() => {\r\n                            return (\r\n                                componentRef.current\r\n                            )\r\n                        }}\r\n                        documentTitle=\"dd\"\r\n                    /> */}\r\n                    <IconButton\r\n                        icon='fa-sharp fa-regular fa-file-excel'\r\n                        onClick={onExcel}\r\n                        hidden={!canExcel}\r\n                        disabled={!canExcel}\r\n                    />\r\n                </Flex>\r\n                <Skeleton isLoaded={!loading} fadeDuration={0} >\r\n                    <Box overflowY=\"auto\" height={height}>\r\n                        <ChakraTable\r\n                            //@ts-ignore\r\n                            ref={componentRef}\r\n                        >\r\n                            <Thead top={0} position=\"sticky\" bgColor=\"#3edae6\">\r\n                                <Tr>\r\n                                    {columns.map((item: any) => {\r\n                                        return (\r\n                                            <Th maxWidth={item.width} minWidth={item.width}>\r\n                                                {t(item.title)}\r\n                                            </Th>\r\n                                        )\r\n                                    })}\r\n                                    <Th hidden={!actionColumn}>{t(\"actn\")}</Th>\r\n                                </Tr>\r\n                            </Thead>\r\n                            <Tbody>\r\n                                {dataSource?.map((item: any) => {\r\n                                    return (\r\n                                        <Tr key={item[rowKey]} onClick={handleSelectedRow(item)} onDoubleClick={handleDouble(item)} background={`${rowSelected === item ? \"#dbffbf\" : \"\"}`} >\r\n                                            {columns.map((column: any) => {\r\n                                                return (\r\n                                                    <Td maxWidth={column.width} minWidth={column.width}>\r\n                                                        {item[column.dataIndex]}\r\n                                                    </Td>\r\n                                                )\r\n                                            })}\r\n                                            <Td hidden={!actionColumn}>\r\n                                                <Button\r\n                                                    label={actionLabel}\r\n                                                    onClick={() => { onAction(item) }}\r\n                                                />\r\n                                            </Td>\r\n                                        </Tr>\r\n                                    )\r\n                                })}\r\n                            </Tbody>\r\n\r\n                            {/* <Tfoot>\r\n                        <Tr>\r\n                        <Th>To convert</Th>\r\n                        <Th>into</Th>\r\n                        <Th isNumeric>multiply by</Th>\r\n                        </Tr>\r\n                    </Tfoot> */}\r\n\r\n                        </ChakraTable>\r\n\r\n                        {!Array.isArray(dataSource) || dataSource.length === 0 && !loading ? <Flex justifyContent='center' width='100%'>\r\n                            <Text as='b' fontSize='md' color='red'>No Data</Text>\r\n                        </Flex> : <></>}\r\n                    </Box>\r\n                </Skeleton>\r\n            </TableContainer>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Table;","import { useCallback } from \"react\";\r\nimport { useMutation } from \"@commons/hooks\";\r\n\r\nconst useTableControlsButtons = ({ api = \"\", runFetch }: any) => {\r\n  const { setRow: newRecord } = useMutation({\r\n    link: api,\r\n    additionalFunctionToRun: runFetch,\r\n    method: \"POST\",\r\n  });\r\n  const { setRow: updateRecord } = useMutation({\r\n    link: api,\r\n    additionalFunctionToRun: runFetch,\r\n    method: \"PUT\",\r\n  });\r\n  const { setRow: deleteRecord } = useMutation({\r\n    link: api,\r\n    additionalFunctionToRun: runFetch,\r\n    method: \"Delete\",\r\n  });\r\n\r\n  const onSaveAndInsertion = useCallback(\r\n    (record: any) => {\r\n      if (record.query_status === \"n\") {\r\n        newRecord(record);\r\n      } else if (record.query_status === \"u\") {\r\n        updateRecord(record);\r\n      } else if (record.query_status === \"d\") {\r\n        deleteRecord(record);\r\n      }\r\n    },\r\n    [newRecord, updateRecord, deleteRecord]\r\n  );\r\n\r\n  return { onSaveAndInsertion };\r\n};\r\n\r\nexport default useTableControlsButtons;\r\n","import { useState, useCallback } from \"react\";\r\nimport { useLocalStorage } from \"@commons/hooks\";\r\nimport { API_ID } from \"@commons/global\";\r\nimport { useToast } from \"@chakra-ui/react\";\r\n\r\ninterface useMutationProps {\r\n  link: string;\r\n  noAuthorization?: boolean;\r\n  additionalFunctionToRun?: () => void;\r\n  runOnSuccess?: () => void;\r\n  runOnFail?: () => void;\r\n  method?: string;\r\n}\r\ninterface successType {\r\n  response: string;\r\n}\r\n\r\nconst useMutation = ({\r\n  link = \"\",\r\n  noAuthorization = false,\r\n  additionalFunctionToRun,\r\n  runOnSuccess,\r\n  runOnFail,\r\n  method = \"POST\",\r\n}: useMutationProps) => {\r\n  const toast = useToast();\r\n  //@ts-ignore\r\n  const url = `http://144.24.209.19:9090/api/${API_ID[link]}`;\r\n  const [success, setSuccess] = useState<successType>();\r\n  const { authorization } = useLocalStorage();\r\n  const postData = useCallback(\r\n    async (dataToPost: any) => {\r\n      if (authorization || noAuthorization) {\r\n        const settings = {\r\n          method: method,\r\n          headers: {\r\n            Accept: \"application/json\",\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: `Bearer ${authorization}`,\r\n          },\r\n          body: JSON.stringify(dataToPost),\r\n        };\r\n        try {\r\n          const fetchResponse = await fetch(url, settings);\r\n          const data = await fetchResponse.json();\r\n          if (data.response === \"success\") {\r\n            toast({\r\n              position: \"top-right\",\r\n              title: \"Success\",\r\n              description: `${data.response}`,\r\n              status: \"success\",\r\n              duration: 5000,\r\n              isClosable: true,\r\n            });\r\n            if (runOnSuccess) runOnSuccess();\r\n          } else {\r\n            toast({\r\n              position: \"top-right\",\r\n              title: \"Error\",\r\n              description: `${data.message}`,\r\n              status: \"error\",\r\n              duration: 9000,\r\n              isClosable: true,\r\n            });\r\n            if (runOnFail) runOnFail();\r\n          }\r\n          setSuccess(data);\r\n          if (additionalFunctionToRun) {\r\n            additionalFunctionToRun();\r\n          }\r\n          return data;\r\n        } catch (e) {}\r\n      }\r\n    },\r\n    [\r\n      additionalFunctionToRun,\r\n      authorization,\r\n      method,\r\n      noAuthorization,\r\n      runOnFail,\r\n      runOnSuccess,\r\n      toast,\r\n      url,\r\n    ]\r\n  );\r\n\r\n  const setRow = useCallback(\r\n    (row: any) => {\r\n      postData(row);\r\n    },\r\n    [postData]\r\n  );\r\n\r\n  return { success, setRow };\r\n};\r\n\r\nexport default useMutation;\r\n","import React, { memo } from 'react'\r\nimport { useTranslation } from 'react-i18next'\r\n\r\nconst BaseTitle = ({\r\n    value,\r\n    margin,\r\n    padding,\r\n    width = \"\",\r\n    fontSize = \"\",\r\n    color,\r\n    backgroundColor\r\n}: any) => {\r\n    const { t } = useTranslation()\r\n    return (\r\n        <>\r\n            <strong\r\n                style={{\r\n                    padding: padding,\r\n                    margin: margin,\r\n                    width: width,\r\n                    fontSize: fontSize,\r\n                    color: color,\r\n                    backgroundColor: backgroundColor\r\n                }}>\r\n                {t(value)}\r\n            </strong>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default memo(BaseTitle)","import styled from \"@emotion/styled\";\r\n\r\nexport const ModalContainer = styled.div`\r\n  position: absolute;\r\n\ttop: 0;\r\n\tleft: 0;\r\n\tright: 0;\r\n\tbottom: 0;\r\n\tdisplay: flex;\r\n\talign-items: center;\r\n\tjustify-content: center;\r\n\tbackground-color: rgba(0, 0, 0, 0.5);\r\n    z-index: 1;\r\n`\r\n\r\nexport const ModalContent = styled.div<{width: string, height?: string}>`\r\n /* position: relative;\r\n    margin: 5% auto;\r\n    padding: 20px;\r\n    border: 1px solid #888;\r\n    width: ${({width})=> width};\r\n    height: ${({height})=> height};\r\n    background-color: white;\r\n    border-radius: 15px; */\r\n    /* max-height: 90vh;\r\n\tmax-width: 500px; */\r\n    width: ${({width})=> width};\r\n    height: ${({height})=> height};\r\n\tmargin-left: auto;\r\n\tmargin-right: auto;\r\n\tbackground-color: #fff;\r\n\tborder-radius: 15px;\r\n\toverflow: hidden;\r\n\tdisplay: flex;\r\n\tflex-direction: column;\r\n\tbox-shadow: 0 15px 30px 0 rgba(#000, 0.25);\r\n\t@media (max-width: 600px) {\r\n\t\twidth: 90%;\r\n\t}\r\n`\r\n\r\nexport const ModalHeader = styled.div`\r\n\tpadding: 5px 32px;\r\n\tborder-bottom: 1px solid #ddd;\r\n\tdisplay: flex;\r\n\talign-items: center;\r\n\tjustify-content: space-between;\r\n`\r\n\r\nexport const ModalBody = styled.div`\r\n\tpadding: 10px 32px;\r\n\toverflow-y: auto;\r\n    height: 100%;\r\n`\r\n\r\nexport const ModalFooter = styled.div`\r\n    padding: 20px 32px;\r\n\tdisplay: flex;\r\n\talign-items: center;\r\n\tjustify-content: flex-end;\r\n\tborder-top: 1px solid #ddd;\r\n\tgap: 12px;\r\n\tposition: relative;\r\n\t&:after {\r\n\t\tcontent: \"\";\r\n\t\tdisplay: block;\r\n\t\tposition: absolute;\r\n\t\ttop: -51px;\r\n\t\tleft: 24px;\r\n\t\tright: 24px;\r\n\t\theight: 50px;\r\n\t\tflex-shrink: 0;\r\n\t\tbackground-image: linear-gradient(to top, rgba(#fff, 0.75), transparent);\r\n\t\tpointer-events: none;\r\n\t}\r\n`","import React, { memo } from 'react';\r\nimport {Button} from \"@commons/button\";\r\nimport {BaseTitle} from \"@commons/page-title\"\r\nimport Flex from \"@commons/flex\"\r\nimport {ModalContainer, ModalContent, ModalHeader, ModalBody, ModalFooter} from \"./style\"\r\n\r\ninterface ModalProp {\r\n    visible?: boolean,\r\n    children?: any,\r\n    label: string,\r\n    onOK?: () => void,\r\n    onClose: () => void,\r\n    submitTitle?: string,\r\n    width?: string;\r\n    hideSaveButton?: boolean;\r\n    hideCloseButton?: boolean;\r\n    height?: string;\r\n    noFooter?: boolean;\r\n}\r\n\r\nconst Modal = (\r\n    {\r\n        children,\r\n        visible = false,\r\n        label,\r\n        onClose,\r\n        onOK,\r\n        submitTitle = \"smbt\",\r\n        width = \"90%\",\r\n        height = \"auto\",\r\n        hideSaveButton = false,\r\n        hideCloseButton = false,\r\n        noFooter = false\r\n    }: ModalProp\r\n) => {\r\n\r\n    return (\r\n        <>\r\n        {visible &&\r\n            <ModalContainer hidden={!visible}>\r\n  <ModalContent width={width} height={height}>\r\n    <ModalHeader>\r\n        <BaseTitle value={label} />\r\n        <Button label='&times;' backGround='none' data-dismiss=\"modal\" onClick={onClose} />\r\n    </ModalHeader>\r\n\r\n    <ModalBody>\r\n        <Flex width=\"100%\" padding=\"0\" wrap=\"wrap\" height=\"100%\">\r\n      {children}\r\n      </Flex>\r\n    </ModalBody>\r\n\r\n    {!noFooter &&\r\n        <ModalFooter hidden={noFooter}>\r\n            {!hideSaveButton && <Button onClick={onOK} label={submitTitle} hidden={hideSaveButton} />}\r\n            {!hideCloseButton && <Button onClick={onClose} label='cls' hidden={hideCloseButton} />}\r\n        </ModalFooter>\r\n    }\r\n  </ModalContent>\r\n</ModalContainer>\r\n        }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default memo(Modal);"],"names":["Flex","_ref","children","justifyContent","width","height","_ref$padding","padding","margin","_ref$bordered","bordered","backgroundColor","_ref$borderColor","borderColor","_ref$borderWidth","borderWidth","_ref$borderRadius","borderRadius","_ref$flexDirection","flexDirection","_ref$textAlign","textAlign","_ref$hidden","hidden","wrap","prop","_objectWithoutProperties","_excluded","_useState","useState","_useState2","_slicedToArray","setBorder","useEffect","concat","_jsx","_Fragment","ChackraFlex","_objectSpread","background","memo","TableWithApi","ref","api","postApi","columns","ModalContent","onClick","_ref$fetchOnFirstRun","fetchOnFirstRun","params","_ref$modalWidth","checkForParams","modalWidth","tableProps","_useFetch","useFetch","link","data","runFetch","loading","setData","resetData","onSaveAndInsertion","useTableControlsButtons","selectedRow","setSelectedRow","_useState3","_useState4","modal","setModal","handleAdd","useCallback","query_status","handleEdit","handleCloseModal","useImperativeHandle","setTableData","resetTableData","getCurrentDataSource","_jsxs","Modal","visible","onClose","hideCloseButton","hideSaveButton","label","noFooter","refreshTable","Table","dataSource","onAdd","onEdit","onDelete","onSelectedRow","row","forwardRef","IconButton","icon","_ref$disabled","disabled","_ref$width","_ref$height","color","_ref$margin","style","border","className","_ref$rowKey","rowKey","_ref$hideTools","hideTools","_ref$canEdit","canEdit","_ref$canAdd","canAdd","_ref$canDelete","canDelete","_ref$canExcel","canExcel","_ref$actionColumn","actionColumn","onAction","_ref$actionLabel","actionLabel","_ref$canPrint","canPrint","onPrint","additionalButtons","onSave","_ref$canSave","canSave","_ref$loading","_ref$onDoubleClick","onDoubleClick","e","console","log","pathname","useLocation","t","useTranslation","rowSelected","setRowSelected","handleSelectedRow","item","handleDouble","onExcel","pathName","replace","wb","XLSX","book_new","ws","json_to_sheet","book_append_sheet","Date","toUTCString","componentRef","useRef","TableContainer","Text","marginBottom","fontSize","fontWeight","map","button","Skeleton","isLoaded","fadeDuration","Box","overflowY","ChakraTable","Thead","top","position","bgColor","Tr","Th","maxWidth","minWidth","title","Tbody","column","Td","dataIndex","Button","Array","isArray","length","as","_ref$api","newRecord","useMutation","additionalFunctionToRun","method","setRow","updateRecord","deleteRecord","record","_ref2","_ref$link","_ref$noAuthorization","noAuthorization","runOnSuccess","runOnFail","_ref$method","toast","useToast","url","API_ID","success","setSuccess","authorization","useLocalStorage","postData","_x","_asyncToGenerator","_regeneratorRuntime","mark","_callee","dataToPost","settings","fetchResponse","_context","prev","next","headers","Accept","Authorization","body","JSON","stringify","fetch","sent","json","response","description","status","duration","isClosable","message","abrupt","t0","stop","apply","arguments","BaseTitle","value","_ref$fontSize","ModalContainer","styled","div","_templateObject","_taggedTemplateLiteral","_templateObject2","_ref3","_ref4","ModalHeader","_templateObject3","ModalBody","_templateObject4","ModalFooter","_templateObject5","_ref$visible","onOK","_ref$submitTitle","submitTitle","_ref$hideSaveButton","_ref$hideCloseButton","_ref$noFooter","backGround"],"sourceRoot":""}