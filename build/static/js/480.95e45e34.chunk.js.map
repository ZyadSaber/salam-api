{"version":3,"file":"static/js/480.95e45e34.chunk.js","mappings":"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","sources":["../common/Select/src/styled.ts","../common/Select/src/select.tsx","../common/Select/src/selectWithApi.tsx","../pages/users-page/src/Partials/ModalView.tsx","../pages/users-page/src/Partials/LinkedPages.tsx","../pages/users-page/src/constants.ts","../pages/users-page/src/component.tsx"],"sourcesContent":["import styled from \"@emotion/styled\";\r\n\r\nexport const StyledSelect = styled.select`\r\n  background: #fdfdfd;\r\n  border: 0.5px solid #cbd5e0;\r\n  height: 100%;\r\n  width: 100%;\r\n  border-radius: 7px;\r\n  padding: 0 10px;\r\n`;\r\n\r\nexport const StyledOption = styled.option`\r\n  padding: 100px;\r\n`;\r\n\r\n// export const DropDownContainer = styled.span`\r\n//   margin: 0;\r\n//   min-width: 100%;\r\n//   position: relative;\r\n//   display: inline-block;\r\n//   min-height: 2em;\r\n//   max-height: 2em;\r\n//   overflow: hidden;\r\n//   top: 0.5em;\r\n//   cursor: pointer;\r\n//   text-align: left;\r\n//   white-space: nowrap;\r\n//   color: #444;\r\n//   outline: none;\r\n//   border: 0.06em solid transparent;\r\n//   border-radius: 1em;\r\n//   background-color: #cde4f5;\r\n//   transition: 0.3s all ease-in-out;\r\n\r\n//   &::after {\r\n//     content: \"\";\r\n//     position: absolute;\r\n//     right: 0.8em;\r\n//     top: 0.9em;\r\n//     border: 0.3em solid #3694d7;\r\n//     border-color: #3694d7 transparent transparent transparent;\r\n//     transition: 0.4s all ease-in-out;\r\n//   }\r\n\r\n//   /* &:nth-child(2) {\r\n//     border-top: 0.06em solid #d9d9d9;\r\n//   } */\r\n// `;\r\n\r\n// export const SelectInputRadio = styled.input`\r\n//   width: 1px;\r\n//   height: 1px;\r\n//   display: inline-block;\r\n//   position: absolute;\r\n//   opacity: 0.01;\r\n\r\n//   &:focus {\r\n//     background: #def;\r\n//   }\r\n\r\n//   /* &:checked {\r\n//     display: block;\r\n//     border-top: none;\r\n//     position: absolute;\r\n//     top: 0;\r\n//     width: 100%;\r\n//   } */\r\n// `;\r\n\r\n// export const SelectLabel = styled.label`\r\n//   border-top: 0.06em solid #d9d9d9;\r\n//   display: block;\r\n//   height: 2em;\r\n//   line-height: 2em;\r\n//   padding-left: 1em;\r\n//   padding-right: 3em;\r\n//   cursor: pointer;\r\n//   position: relative;\r\n//   transition: 0.3s color ease-in-out;\r\n// `;\r\n\r\n// <DropDownContainer\r\n//   className={`dropdown-el ${expanded ? \"expanded\" : \"\"}`}\r\n// >\r\n//   {/* <input type=\"radio\" name=\"sortType\" value=\"Relevance\" id=\"sort-relevance\" onClick={handleValue} /><label htmlFor=\"sort-relevance\">Relevance</label> */}\r\n//   <SelectInputRadio type=\"radio\" />\r\n//   <SelectLabel htmlFor=\"sort-best\">Product Popularity</SelectLabel>\r\n//   <SelectInputRadio\r\n//     onClick={handleValue}\r\n//     type=\"radio\"\r\n//     name=\"sortType\"\r\n//     value=\"PriceIncreasing\"\r\n//     id=\"sort-low\"\r\n//   />\r\n//   <SelectLabel htmlFor=\"sort-low\">Price Low to High</SelectLabel>\r\n//   <SelectInputRadio\r\n//     onClick={handleValue}\r\n//     type=\"radio\"\r\n//     name=\"sortType\"\r\n//     value=\"PriceDecreasing\"\r\n//     id=\"sort-high\"\r\n//   />\r\n//   <SelectLabel htmlFor=\"sort-high\">Price High to Low</SelectLabel>\r\n//   <SelectInputRadio\r\n//     onClick={handleValue}\r\n//     type=\"radio\"\r\n//     name=\"sortType\"\r\n//     value=\"ProductBrand\"\r\n//     id=\"sort-brand\"\r\n//   />\r\n//   <SelectLabel htmlFor=\"sort-brand\">Product Brand</SelectLabel>\r\n//   <SelectInputRadio\r\n//     onClick={handleValue}\r\n//     type=\"radio\"\r\n//     name=\"sortType\"\r\n//     value=\"ProductName\"\r\n//     id=\"sort-name\"\r\n//   />\r\n//   <SelectLabel htmlFor=\"sort-name\">Product Name</SelectLabel>\r\n// </DropDownContainer>;\r\n","import React, { memo } from \"react\";\r\nimport { useTranslation } from 'react-i18next';\r\nimport { FormLabel, Flex } from '@chakra-ui/react';\r\nimport { StyledSelect, StyledOption } from \"./styled\"\r\nimport { SelectProps } from \"./interface\";\r\n\r\nconst Select = ({\r\n    height = \"65px\",\r\n    width = \"200px\",\r\n    Options,\r\n    onChange,\r\n    label,\r\n    value = 0,\r\n    name,\r\n    withLabel = false,\r\n    margin = \"10px\",\r\n    padding,\r\n    placeholder = \"Select\",\r\n    selectLabelName = \"label_select\",\r\n}: SelectProps) => {\r\n    const { t } = useTranslation()\r\n    //@ts-ignore\r\n    const handleValue = (event) => {\r\n        if (Array.isArray(Options)) {\r\n            Options.forEach((option) => {\r\n                if (option.value === +event.target.value) {\r\n                    if (withLabel) {\r\n                        onChange({ value: option.value, selectLabelName: selectLabelName, label: option.label, name: name })\r\n                    } else {\r\n                        onChange({ value: option.value, name: name })\r\n                    }\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Flex\r\n                direction=\"column\"\r\n                width={width}\r\n                padding={padding}\r\n                margin={margin}\r\n                height={height}\r\n            >\r\n                <FormLabel fontSize='md' as=\"b\" margin=\"0 0 5px\">{t(label)}</FormLabel>\r\n                <StyledSelect\r\n                    placeholder={t(placeholder)}\r\n                    onChange={handleValue}\r\n                >\r\n                    <StyledOption>{t(\"Select\")}</StyledOption>\r\n                    {Array.isArray(Options) && Options.length !== 0 ? Options.map((Option) => {\r\n                        return (\r\n                            <StyledOption key={Option.value} value={Option.value} selected={value === Option.value && true}> {t(Option.label)}</StyledOption>\r\n                        )\r\n                    }) : <StyledOption disabled>{t(\"No data\")}</StyledOption>}\r\n                </StyledSelect>\r\n            </Flex>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default memo(Select)","import React, { memo } from \"react\";\r\nimport Select from \"./select\";\r\nimport { useFetch } from \"@commons/hooks\"\r\nimport { SelectWithApiProps } from \"./interface\"\r\n\r\nconst SelectWithApi = ({\r\n    width,\r\n    api,\r\n    onChange,\r\n    label,\r\n    name = \"\",\r\n    value = 0,\r\n    withLabel = false,\r\n    padding,\r\n    margin,\r\n    params,\r\n    selectLabelName = \"label_select\"\r\n}: SelectWithApiProps) => {\r\n\r\n    const { data } = useFetch({\r\n        link: api,\r\n        fetchOnFirstRun: true,\r\n        params: params,\r\n        checkForParams: true\r\n    })\r\n\r\n    return (\r\n        <>\r\n            <Select\r\n                Options={data}\r\n                onChange={onChange}\r\n                label={label}\r\n                value={value}\r\n                name={name}\r\n                width={width}\r\n                withLabel={withLabel}\r\n                margin={margin}\r\n                padding={padding}\r\n                selectLabelName={selectLabelName}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default memo(SelectWithApi);","import React, { memo, useCallback } from 'react';\r\nimport { InputText } from \"@commons/input-text\";\r\nimport { useFormManager } from '@commons/hooks';\r\nimport { ModalViewProp } from \"@commons/global\"\r\nimport { SelectWithApi } from '@commons/select/src';\r\nimport { useTableControlsButtons } from \"@commons/table\";\r\nimport { Button } from \"@commons/button\"\r\n\r\nconst ModalView = ({\r\n    onClose,\r\n    selectedRow,\r\n    refreshTable\r\n}: ModalViewProp) => {\r\n    const {\r\n        state,\r\n        onChange,\r\n    }\r\n        = useFormManager({\r\n            initialValues: {\r\n                ...selectedRow\r\n            }\r\n        })\r\n    const { onSaveAndInsertion } = useTableControlsButtons({ api: \"POST_CUSTOMER_TABLE_DATA\", runFetch: refreshTable })\r\n    const { customer_id, password, confirm_password, user_name, first_name, last_name, user_role, query_status } = state;\r\n\r\n    const handleSave = useCallback(() => {\r\n        const record = {\r\n            user_name,\r\n            first_name,\r\n            last_name,\r\n            user_role,\r\n            customer_id,\r\n            query_status,\r\n            password,\r\n            confirm_password\r\n        }\r\n        onSaveAndInsertion(record)\r\n        onClose()\r\n    }, [user_name, first_name, last_name, user_role, customer_id, query_status, password, confirm_password, onSaveAndInsertion, onClose])\r\n\r\n    return (\r\n        <>\r\n            <InputText\r\n                name=\"user_name\"\r\n                label='user_name'\r\n                onChange={onChange}\r\n                value={user_name}\r\n                width=\"47%\"\r\n            />\r\n            <InputText\r\n                name=\"first_name\"\r\n                label='first_name'\r\n                onChange={onChange}\r\n                value={first_name}\r\n                width=\"47%\"\r\n            />\r\n            <InputText\r\n                name=\"last_name\"\r\n                label='last_name'\r\n                onChange={onChange}\r\n                value={last_name}\r\n                width=\"47%\"\r\n            />\r\n            <SelectWithApi\r\n                api=\"\"\r\n                name=\"user_role\"\r\n                label='user_role'\r\n                onChange={onChange}\r\n                value={user_role}\r\n                width=\"47%\"\r\n            />\r\n            <InputText\r\n                name=\"password\"\r\n                label='password'\r\n                onChange={onChange}\r\n                value={password}\r\n                width=\"47%\"\r\n                type='password'\r\n            />\r\n            <InputText\r\n                name=\"confirm_password\"\r\n                label='confirm_password'\r\n                onChange={onChange}\r\n                value={confirm_password}\r\n                width=\"47%\"\r\n                type='password'\r\n            />\r\n            <Button\r\n                onClick={handleSave}\r\n                label=\"sv\"\r\n            />\r\n        </>\r\n    )\r\n};\r\n\r\nexport default memo(ModalView)","import React, { memo, useCallback, useEffect, useState } from \"react\";\r\nimport Flex from \"@commons/flex\";\r\nimport { useFetch, useMutation } from \"@commons/hooks\";\r\nimport { CheckBox } from \"@commons/check-box\";\r\nimport { Button } from \"@commons/button\";\r\n\r\nconst LinkedPages = ({ row }: any) => {\r\n\r\n    const [clonedPages, setClonedPages] = useState<any[]>();\r\n\r\n    const { runFetch } = useFetch({\r\n        link: \"QUERY_PAGE_NAME_LIST_TO_VIEW\",\r\n        onResponse: setClonedPages,\r\n        params: {\r\n            user_id: row.id\r\n        }\r\n    });\r\n\r\n    const { setRow } = useMutation({\r\n        link: \"POST_USER_PAGE_PERMISSIONS\",\r\n        additionalFunctionToRun: runFetch,\r\n    });\r\n\r\n    const handleChange = useCallback((event: any) => {\r\n        const newArr = clonedPages && clonedPages.map(item => {\r\n            if (event.name === item.page_id) {\r\n                return {\r\n                    ...item,\r\n                    status: event.value\r\n                };\r\n            }\r\n            return item;\r\n        });\r\n        setClonedPages(newArr)\r\n    }, [clonedPages]);\r\n\r\n    useEffect(() => {\r\n        runFetch({\r\n            user_id: row.id\r\n        })\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [row.id])\r\n\r\n    const handleSavePages = useCallback(() => {\r\n        setRow(clonedPages)\r\n    }, [clonedPages, setRow])\r\n\r\n    return (\r\n        <Flex\r\n            width=\"40%\"\r\n            flexDirection=\"column\"\r\n        >\r\n            <Button\r\n                onClick={handleSavePages}\r\n                width=\"100%\"\r\n                label=\"save\"\r\n            />\r\n            <Flex\r\n                width=\"100%\"\r\n                flexDirection=\"column\"\r\n                height=\"600px\"\r\n                border=\"1px solid white\"\r\n                margin=\"5px\"\r\n                overflow={\"scroll\"}\r\n            >\r\n                {\r\n                    row.id && clonedPages?.length &&\r\n                    clonedPages.map((record) => (\r\n                        <CheckBox\r\n                            name={record.page_id}\r\n                            label={`${record.page_name} / ${record.page_link}`}\r\n                            value={record.status}\r\n                            onChange={handleChange}\r\n                        />\r\n                    ))\r\n                }\r\n            </Flex>\r\n        </Flex>\r\n    )\r\n}\r\n\r\nexport default memo(LinkedPages)","export const columns = [\r\n  {\r\n    title: \"user_name\",\r\n    dataIndex: \"user_name\",\r\n    width: \"20%\",\r\n  },\r\n  {\r\n    title: \"first_name\",\r\n    dataIndex: \"first_name\",\r\n    width: \"17%\",\r\n  },\r\n  {\r\n    title: \"last_name\",\r\n    dataIndex: \"last_name\",\r\n    width: \"17%\",\r\n  },\r\n  {\r\n    title: \"created_at\",\r\n    dataIndex: \"created_at\",\r\n    width: \"10%\",\r\n  },\r\n  {\r\n    title: \"updated_at\",\r\n    dataIndex: \"updated_at\",\r\n    width: \"10%\",\r\n  },\r\n];\r\n","import React, { memo, useState } from 'react';\r\nimport ModalView from \"./Partials/ModalView\";\r\nimport { TableWithApi } from \"@commons/table\";\r\nimport Flex from \"@commons/flex\";\r\nimport LinkedPages from \"./Partials/LinkedPages\"\r\nimport { columns } from \"./constants\"\r\nconst UsersPage = () => {\r\n    const [row, setRow] = useState({})\r\n\r\n    return (\r\n        <>\r\n            <Flex\r\n                width=\"100%\"\r\n                margin=\"0\"\r\n                padding=\"0\"\r\n                gap=\"0.5\"\r\n            >\r\n                <TableWithApi\r\n                    api={\"QUERY_USERS_TABLE_DATA\"}\r\n                    postApi={\"POST_USERS_TABLE_DATA\"}\r\n                    columns={columns}\r\n                    hideTools={false}\r\n                    canEdit={true}\r\n                    canAdd={true}\r\n                    canDelete={true}\r\n                    canExcel\r\n                    rowKey={\"user_id\"}\r\n                    ModalContent={ModalView}\r\n                    onClick={setRow}\r\n                    fetchOnFirstRun\r\n                />\r\n\r\n                <LinkedPages\r\n                    row={row}\r\n                />\r\n            </Flex>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default memo(UsersPage)"],"names":["StyledSelect","styled","select","_templateObject","_taggedTemplateLiteral","StyledOption","option","_templateObject2","Select","_ref","height","width","Options","onChange","label","value","name","withLabel","margin","padding","placeholder","selectLabelName","t","useTranslation","_jsx","_Fragment","children","_jsxs","Flex","direction","FormLabel","fontSize","as","event","Array","isArray","forEach","target","length","map","Option","selected","disabled","memo","SelectWithApi","api","params","data","useFetch","link","fetchOnFirstRun","checkForParams","ModalView","onClose","selectedRow","refreshTable","state","useFormManager","initialValues","onSaveAndInsertion","useTableControlsButtons","runFetch","customer_id","password","confirm_password","user_name","first_name","last_name","user_role","query_status","handleSave","useCallback","InputText","type","Button","onClick","LinkedPages","row","clonedPages","setClonedPages","useState","onResponse","user_id","id","setRow","useMutation","additionalFunctionToRun","handleChange","newArr","item","page_id","status","useEffect","handleSavePages","flexDirection","border","overflow","record","CheckBox","concat","page_name","page_link","columns","title","dataIndex","UsersPage","gap","TableWithApi","postApi","hideTools","canEdit","canAdd","canDelete","canExcel","rowKey","ModalContent"],"sourceRoot":""}