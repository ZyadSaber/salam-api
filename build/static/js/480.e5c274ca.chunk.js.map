{"version":3,"file":"static/js/480.e5c274ca.chunk.js","mappings":"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","sources":["../pages/users-page/src/Partials/ModalView.tsx","../pages/users-page/src/Partials/LinkedPages.tsx","../pages/users-page/src/constants.ts","../pages/users-page/src/component.tsx"],"sourcesContent":["import React, { memo, useCallback } from 'react';\r\nimport { InputText } from \"@commons/input-text\";\r\nimport { useFormManager } from '@commons/hooks';\r\nimport { ModalViewProp } from \"@commons/global\"\r\nimport { SelectWithApi } from '@commons/select/src';\r\nimport { useTableControlsButtons } from \"@commons/table\";\r\nimport { Button } from \"@commons/button\"\r\n\r\nconst ModalView = ({\r\n    onClose,\r\n    selectedRow,\r\n    refreshTable\r\n}: ModalViewProp) => {\r\n    const {\r\n        state,\r\n        onChange,\r\n    }\r\n        = useFormManager({\r\n            initialValues: {\r\n                ...selectedRow\r\n            }\r\n        })\r\n    const { onSaveAndInsertion } = useTableControlsButtons({ api: \"POST_CUSTOMER_TABLE_DATA\", runFetch: refreshTable })\r\n    const { customer_id, password, confirm_password, user_name, first_name, last_name, user_role, query_status } = state;\r\n\r\n    const handleSave = useCallback(() => {\r\n        const record = {\r\n            user_name,\r\n            first_name,\r\n            last_name,\r\n            user_role,\r\n            customer_id,\r\n            query_status,\r\n            password,\r\n            confirm_password\r\n        }\r\n        onSaveAndInsertion(record)\r\n        onClose()\r\n    }, [user_name, first_name, last_name, user_role, customer_id, query_status, password, confirm_password, onSaveAndInsertion, onClose])\r\n\r\n    return (\r\n        <>\r\n            <InputText\r\n                name=\"user_name\"\r\n                Label='user_name'\r\n                onChange={onChange}\r\n                value={user_name}\r\n                width=\"47%\"\r\n            />\r\n            <InputText\r\n                name=\"first_name\"\r\n                Label='first_name'\r\n                onChange={onChange}\r\n                value={first_name}\r\n                width=\"47%\"\r\n            />\r\n            <InputText\r\n                name=\"last_name\"\r\n                Label='last_name'\r\n                onChange={onChange}\r\n                value={last_name}\r\n                width=\"47%\"\r\n            />\r\n            <SelectWithApi\r\n                Api=\"\"\r\n                name=\"user_role\"\r\n                Label='user_role'\r\n                onChange={onChange}\r\n                value={user_role}\r\n                width=\"47%\"\r\n            />\r\n            <InputText\r\n                name=\"password\"\r\n                Label='password'\r\n                onChange={onChange}\r\n                value={password}\r\n                width=\"47%\"\r\n                type='password'\r\n            />\r\n            <InputText\r\n                name=\"confirm_password\"\r\n                Label='confirm_password'\r\n                onChange={onChange}\r\n                value={confirm_password}\r\n                width=\"47%\"\r\n                type='password'\r\n            />\r\n            <Button\r\n                onClick={handleSave}\r\n                label=\"sv\"\r\n            />\r\n        </>\r\n    )\r\n};\r\n\r\nexport default memo(ModalView)","import React, { memo, useCallback, useEffect, useState } from \"react\";\r\nimport Flex from \"@commons/flex\";\r\nimport { useFetch, useMutation } from \"@commons/hooks\";\r\nimport { CheckBox } from \"@commons/check-box\";\r\nimport { Button } from \"@commons/button\";\r\n\r\nconst LinkedPages = ({ row }: any) => {\r\n\r\n    const [clonedPages, setClonedPages] = useState<any[]>();\r\n\r\n    const { runFetch } = useFetch({\r\n        link: \"QUERY_PAGE_NAME_LIST_TO_VIEW\",\r\n        onResponse: setClonedPages,\r\n        params: {\r\n            user_id: row.id\r\n        }\r\n    });\r\n\r\n    const { setRow } = useMutation({\r\n        link: \"POST_USER_PAGE_PERMISSIONS\",\r\n        additionalFunctionToRun: runFetch,\r\n    });\r\n\r\n    const handleChange = useCallback((event: any) => {\r\n        const newArr = clonedPages && clonedPages.map(item => {\r\n            if (event.name === item.page_id) {\r\n                return {\r\n                    ...item,\r\n                    status: event.value\r\n                };\r\n            }\r\n            return item;\r\n        });\r\n        setClonedPages(newArr)\r\n    }, [clonedPages]);\r\n\r\n    useEffect(() => {\r\n        runFetch({\r\n            user_id: row.id\r\n        })\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [row.id])\r\n\r\n    const handleSavePages = useCallback(() => {\r\n        setRow(clonedPages)\r\n    }, [clonedPages, setRow])\r\n\r\n    return (\r\n        <Flex\r\n            width=\"40%\"\r\n            flexDirection=\"column\"\r\n        >\r\n            <Button\r\n                onClick={handleSavePages}\r\n                width=\"100%\"\r\n                label=\"save\"\r\n            />\r\n            <Flex\r\n                width=\"100%\"\r\n                flexDirection=\"column\"\r\n                height=\"600px\"\r\n                border=\"1px solid white\"\r\n                margin=\"5px\"\r\n                overflow={\"scroll\"}\r\n            >\r\n                {\r\n                    row.id && clonedPages?.length &&\r\n                    clonedPages.map((record) => (\r\n                        <CheckBox\r\n                            name={record.page_id}\r\n                            label={`${record.page_name} / ${record.page_link}`}\r\n                            value={record.status}\r\n                            onChange={handleChange}\r\n                        />\r\n                    ))\r\n                }\r\n            </Flex>\r\n        </Flex>\r\n    )\r\n}\r\n\r\nexport default memo(LinkedPages)","export const columns = [\r\n  {\r\n    title: \"user_name\",\r\n    dataIndex: \"user_name\",\r\n    width: \"20%\",\r\n  },\r\n  {\r\n    title: \"first_name\",\r\n    dataIndex: \"first_name\",\r\n    width: \"17%\",\r\n  },\r\n  {\r\n    title: \"last_name\",\r\n    dataIndex: \"last_name\",\r\n    width: \"17%\",\r\n  },\r\n  {\r\n    title: \"created_at\",\r\n    dataIndex: \"created_at\",\r\n    width: \"10%\",\r\n  },\r\n  {\r\n    title: \"updated_at\",\r\n    dataIndex: \"updated_at\",\r\n    width: \"10%\",\r\n  },\r\n];\r\n","import React, { memo, useState } from 'react';\r\nimport ModalView from \"./Partials/ModalView\";\r\nimport { TableWithApi } from \"@commons/table\";\r\nimport Flex from \"@commons/flex\";\r\nimport LinkedPages from \"./Partials/LinkedPages\"\r\nimport { columns } from \"./constants\"\r\nconst UsersPage = () => {\r\n    const [row, setRow] = useState({})\r\n\r\n    return (\r\n        <>\r\n            <Flex\r\n                width=\"100%\"\r\n                margin=\"0\"\r\n                padding=\"0\"\r\n                gap=\"0.5\"\r\n            >\r\n                <TableWithApi\r\n                    api={\"QUERY_USERS_TABLE_DATA\"}\r\n                    postApi={\"POST_USERS_TABLE_DATA\"}\r\n                    columns={columns}\r\n                    hideTools={false}\r\n                    canEdit={true}\r\n                    canAdd={true}\r\n                    canDelete={true}\r\n                    canExcel\r\n                    rowKey={\"user_id\"}\r\n                    ModalContent={ModalView}\r\n                    onClick={setRow}\r\n                    fetchOnFirstRun\r\n                />\r\n\r\n                <LinkedPages\r\n                    row={row}\r\n                />\r\n            </Flex>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default memo(UsersPage)"],"names":["ModalView","_ref","onClose","selectedRow","refreshTable","_useFormManager","useFormManager","initialValues","_objectSpread","state","onChange","onSaveAndInsertion","useTableControlsButtons","api","runFetch","customer_id","password","confirm_password","user_name","first_name","last_name","user_role","query_status","handleSave","useCallback","_jsxs","_Fragment","children","_jsx","InputText","name","Label","value","width","SelectWithApi","Api","type","Button","onClick","label","memo","LinkedPages","row","_useState","useState","_useState2","_slicedToArray","clonedPages","setClonedPages","useFetch","link","onResponse","params","user_id","id","setRow","useMutation","additionalFunctionToRun","handleChange","event","newArr","map","item","page_id","status","useEffect","handleSavePages","Flex","flexDirection","height","border","margin","overflow","length","record","CheckBox","concat","page_name","page_link","columns","title","dataIndex","UsersPage","padding","gap","TableWithApi","postApi","hideTools","canEdit","canAdd","canDelete","canExcel","rowKey","ModalContent","fetchOnFirstRun"],"sourceRoot":""}