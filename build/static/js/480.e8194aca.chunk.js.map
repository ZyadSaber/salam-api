{"version":3,"file":"static/js/480.e8194aca.chunk.js","mappings":"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","sources":["../common/Select/src/styled.ts","../common/Select/src/select.tsx","../common/Select/src/selectWithApi.tsx","../common/check-box/src/CheckBox.tsx","../common/hooks/src/usePrevious.ts","../common/hooks/src/useFormManager.ts","../common/input-text/src/styled.ts","../common/input-text/src/inputText.tsx","../pages/users-page/src/Partials/ModalView.tsx","../pages/users-page/src/Partials/LinkedPages.tsx","../pages/users-page/src/constants.ts","../pages/users-page/src/component.tsx","../node_modules/@chakra-ui/form-control/src/form-label.tsx","../node_modules/@chakra-ui/form-control/src/form-control.tsx"],"sourcesContent":["import styled from \"@emotion/styled\";\r\n\r\nexport const StyledSelect = styled.select`\r\n  background: #fdfdfd;\r\n  border: 0.5px solid #cbd5e0;\r\n  height: 100%;\r\n  width: 100%;\r\n  border-radius: 7px;\r\n  padding: 0 10px;\r\n`;\r\n\r\nexport const StyledOption = styled.option`\r\n  padding: 100px;\r\n`;\r\n\r\n// export const DropDownContainer = styled.span`\r\n//   margin: 0;\r\n//   min-width: 100%;\r\n//   position: relative;\r\n//   display: inline-block;\r\n//   min-height: 2em;\r\n//   max-height: 2em;\r\n//   overflow: hidden;\r\n//   top: 0.5em;\r\n//   cursor: pointer;\r\n//   text-align: left;\r\n//   white-space: nowrap;\r\n//   color: #444;\r\n//   outline: none;\r\n//   border: 0.06em solid transparent;\r\n//   border-radius: 1em;\r\n//   background-color: #cde4f5;\r\n//   transition: 0.3s all ease-in-out;\r\n\r\n//   &::after {\r\n//     content: \"\";\r\n//     position: absolute;\r\n//     right: 0.8em;\r\n//     top: 0.9em;\r\n//     border: 0.3em solid #3694d7;\r\n//     border-color: #3694d7 transparent transparent transparent;\r\n//     transition: 0.4s all ease-in-out;\r\n//   }\r\n\r\n//   /* &:nth-child(2) {\r\n//     border-top: 0.06em solid #d9d9d9;\r\n//   } */\r\n// `;\r\n\r\n// export const SelectInputRadio = styled.input`\r\n//   width: 1px;\r\n//   height: 1px;\r\n//   display: inline-block;\r\n//   position: absolute;\r\n//   opacity: 0.01;\r\n\r\n//   &:focus {\r\n//     background: #def;\r\n//   }\r\n\r\n//   /* &:checked {\r\n//     display: block;\r\n//     border-top: none;\r\n//     position: absolute;\r\n//     top: 0;\r\n//     width: 100%;\r\n//   } */\r\n// `;\r\n\r\n// export const SelectLabel = styled.label`\r\n//   border-top: 0.06em solid #d9d9d9;\r\n//   display: block;\r\n//   height: 2em;\r\n//   line-height: 2em;\r\n//   padding-left: 1em;\r\n//   padding-right: 3em;\r\n//   cursor: pointer;\r\n//   position: relative;\r\n//   transition: 0.3s color ease-in-out;\r\n// `;\r\n\r\n// <DropDownContainer\r\n//   className={`dropdown-el ${expanded ? \"expanded\" : \"\"}`}\r\n// >\r\n//   {/* <input type=\"radio\" name=\"sortType\" value=\"Relevance\" id=\"sort-relevance\" onClick={handleValue} /><label htmlFor=\"sort-relevance\">Relevance</label> */}\r\n//   <SelectInputRadio type=\"radio\" />\r\n//   <SelectLabel htmlFor=\"sort-best\">Product Popularity</SelectLabel>\r\n//   <SelectInputRadio\r\n//     onClick={handleValue}\r\n//     type=\"radio\"\r\n//     name=\"sortType\"\r\n//     value=\"PriceIncreasing\"\r\n//     id=\"sort-low\"\r\n//   />\r\n//   <SelectLabel htmlFor=\"sort-low\">Price Low to High</SelectLabel>\r\n//   <SelectInputRadio\r\n//     onClick={handleValue}\r\n//     type=\"radio\"\r\n//     name=\"sortType\"\r\n//     value=\"PriceDecreasing\"\r\n//     id=\"sort-high\"\r\n//   />\r\n//   <SelectLabel htmlFor=\"sort-high\">Price High to Low</SelectLabel>\r\n//   <SelectInputRadio\r\n//     onClick={handleValue}\r\n//     type=\"radio\"\r\n//     name=\"sortType\"\r\n//     value=\"ProductBrand\"\r\n//     id=\"sort-brand\"\r\n//   />\r\n//   <SelectLabel htmlFor=\"sort-brand\">Product Brand</SelectLabel>\r\n//   <SelectInputRadio\r\n//     onClick={handleValue}\r\n//     type=\"radio\"\r\n//     name=\"sortType\"\r\n//     value=\"ProductName\"\r\n//     id=\"sort-name\"\r\n//   />\r\n//   <SelectLabel htmlFor=\"sort-name\">Product Name</SelectLabel>\r\n// </DropDownContainer>;\r\n","import React, { memo } from \"react\";\r\nimport { useTranslation } from 'react-i18next';\r\nimport { FormLabel, Flex } from '@chakra-ui/react';\r\nimport { StyledSelect, StyledOption } from \"./styled\"\r\nimport { SelectProps } from \"./interface\";\r\n\r\nconst Select = ({\r\n    height = \"65px\",\r\n    width = \"200px\",\r\n    Options,\r\n    onChange,\r\n    label,\r\n    value = 0,\r\n    name,\r\n    withLabel = false,\r\n    margin = \"10px\",\r\n    padding,\r\n    placeholder = \"Select\",\r\n    selectLabelName = \"label_select\",\r\n}: SelectProps) => {\r\n    const { t } = useTranslation()\r\n    //@ts-ignore\r\n    const handleValue = (event) => {\r\n        if (Array.isArray(Options)) {\r\n            Options.forEach((option) => {\r\n                if (option.value === +event.target.value) {\r\n                    if (withLabel) {\r\n                        onChange({ value: option.value, selectLabelName: selectLabelName, label: option.label, name: name })\r\n                    } else {\r\n                        onChange({ value: option.value, name: name })\r\n                    }\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Flex\r\n                direction=\"column\"\r\n                width={width}\r\n                padding={padding}\r\n                margin={margin}\r\n                height={height}\r\n            >\r\n                <FormLabel fontSize='md' as=\"b\" margin=\"0 0 5px\">{t(label)}</FormLabel>\r\n                <StyledSelect\r\n                    placeholder={t(placeholder)}\r\n                    onChange={handleValue}\r\n                >\r\n                    <StyledOption>{t(\"Select\")}</StyledOption>\r\n                    {Array.isArray(Options) && Options.length !== 0 ? Options.map((Option) => {\r\n                        return (\r\n                            <StyledOption key={Option.value} value={Option.value} selected={value === Option.value && true}> {t(Option.label)}</StyledOption>\r\n                        )\r\n                    }) : <StyledOption disabled>{t(\"No data\")}</StyledOption>}\r\n                </StyledSelect>\r\n            </Flex>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default memo(Select)","import React, { memo } from \"react\";\r\nimport Select from \"./select\";\r\nimport { useFetch } from \"@commons/hooks\"\r\nimport { SelectWithApiProps } from \"./interface\"\r\n\r\nconst SelectWithApi = ({\r\n    width,\r\n    api,\r\n    onChange,\r\n    label,\r\n    name = \"\",\r\n    value = 0,\r\n    withLabel = false,\r\n    padding,\r\n    margin,\r\n    params,\r\n    selectLabelName = \"label_select\"\r\n}: SelectWithApiProps) => {\r\n\r\n    const { data } = useFetch({\r\n        link: api,\r\n        fetchOnFirstRun: true,\r\n        params: params,\r\n        checkForParams: true\r\n    })\r\n\r\n    return (\r\n        <>\r\n            <Select\r\n                Options={data}\r\n                onChange={onChange}\r\n                label={label}\r\n                value={value}\r\n                name={name}\r\n                width={width}\r\n                withLabel={withLabel}\r\n                margin={margin}\r\n                padding={padding}\r\n                selectLabelName={selectLabelName}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default memo(SelectWithApi);","import React, { memo, useCallback } from \"react\";\r\nimport { useTranslation } from 'react-i18next'\r\nimport styled from \"@emotion/styled\";\r\nimport { Flex, FormLabel } from \"@chakra-ui/react\"\r\nimport { CheckBoxProps } from \"./interface\";\r\n\r\nconst CheckBox = ({\r\n    label = \"\",\r\n    value,\r\n    onChange,\r\n    name,\r\n    unCheckedColor = \"#33455e\",\r\n    checkedColor = \"#ff6e48\",\r\n    width,\r\n    height,\r\n    disabled,\r\n    required,\r\n    padding,\r\n    margin = \"10px\"\r\n}: any) => {\r\n    const { t } = useTranslation()\r\n    const handleChange = useCallback((event: { target: { checked: boolean; }; }) => {\r\n        if (event.target.checked === true) {\r\n            onChange({ name: name, value: \"Y\" })\r\n        } else if (event.target.checked === false) {\r\n            onChange({ name: name, value: \"N\" })\r\n        }\r\n    }, [name, onChange])\r\n\r\n\r\n    const checked = value === \"Y\" ? true : false\r\n\r\n    const StyledCheckBox = styled.input`\r\n        display: none;\r\n        width: 100%;\r\n        height: 100%;\r\n    `\r\n\r\n    const StyledLabel = styled.label`\r\n        position: relative;\r\n        display: inline-block;\r\n        width: 4rem;\r\n        height: 1.7rem;\r\n    `\r\n\r\n    const StyledSpan = styled.span`\r\n        position: absolute;\r\n        top: 0;\r\n        left: 0;\r\n        bottom: 0;\r\n        right: 0;\r\n        width: 100%;\r\n        background-color: ${disabled ? \"#81838f\" : checked ? checkedColor : unCheckedColor};\r\n        display: block;\r\n        transition: all 0.3s;\r\n        border-radius: 2rem;\r\n        cursor: pointer;\r\n        ${required && \"border: 1.5px solid red;\"}\r\n\r\n        &:before {\r\n            content: \"\";\r\n            position: absolute;\r\n            height: 1rem;\r\n            width: 1rem;\r\n            border-radius: 100%;\r\n            display: block;\r\n            left: 0.5rem;\r\n            bottom: 0.3rem;\r\n            background-color: white;\r\n            transition: all 0.3s;\r\n            transform: translate(${checked ? \"200%\" : 0}, 0);\r\n        }\r\n    `\r\n\r\n    return (\r\n        <>\r\n            <Flex\r\n                direction=\"column\"\r\n                width={width}\r\n                padding={padding}\r\n                margin={margin}\r\n                height={height}\r\n            >\r\n                <FormLabel>{t(label)}</FormLabel>\r\n                <StyledLabel>\r\n                    <StyledCheckBox type=\"checkbox\" onChange={handleChange} checked={checked} disabled={disabled} />\r\n                    <StyledSpan />\r\n                </StyledLabel>\r\n            </Flex>\r\n            {/* <StyledCheckBox\r\n                checked={checked}\r\n                type=\"checkbox\"\r\n                onChange={handleChange}\r\n                disabled={disabled}\r\n            >\r\n                {t(label)}\r\n            </StyledCheckBox> */}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default memo(CheckBox)","import { useRef, useEffect } from \"react\";\r\n\r\nconst usePrevious = <T>(value: T): T => {\r\n  const ref = useRef<T>();\r\n\r\n  useEffect(() => {\r\n    ref.current = value;\r\n  });\r\n\r\n  return ref.current as T;\r\n};\r\n\r\nexport default usePrevious;\r\n","import { useState, useCallback, useEffect, useRef } from \"react\";\r\nimport usePrevious from \"./usePrevious\";\r\n\r\ninterface useFormManagerProps {\r\n  initialValues?: any;\r\n}\r\n\r\nconst useFormManager = ({ initialValues }: useFormManagerProps) => {\r\n  const [state, setState] = useState<typeof initialValues>(initialValues);\r\n\r\n  const hasAnyFieldChangedRef = useRef(false);\r\n  const preValues = usePrevious(initialValues);\r\n\r\n  const areInitialValuesChanged = useCallback(\r\n    () => !Object.is(JSON.stringify(preValues), JSON.stringify(initialValues)),\r\n    [initialValues, preValues]\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (areInitialValuesChanged()) {\r\n      setState({ ...initialValues });\r\n    }\r\n  }, [areInitialValuesChanged, initialValues]);\r\n\r\n  const resetForm = useCallback(() => {\r\n    hasAnyFieldChangedRef.current = false;\r\n    setState(() => initialValues);\r\n    // @ts-ignore\r\n  }, [initialValues]);\r\n\r\n  useEffect(\r\n    () => {\r\n      return resetForm;\r\n    },\r\n    // eslint-disable-next-line\r\n    []\r\n  );\r\n\r\n  const onChange = useCallback(\r\n    (eventData: any) => {\r\n      const { name, value } = eventData;\r\n      setState({ ...state, [name]: value });\r\n    },\r\n    [state]\r\n  );\r\n\r\n  const handleMultiInput = useCallback((e:any)=>{\r\n    setState({\r\n      ...state,\r\n      ...e\r\n    })\r\n  },[state])\r\n\r\n  const handleSelectWithLabelChange = useCallback(\r\n    (eventData: any) => {\r\n      setState({\r\n        ...state,\r\n        [eventData.name]: eventData.value,\r\n        [eventData.selectLabelName]: eventData.label,\r\n      });\r\n    },\r\n    [state]\r\n  );\r\n\r\n  const handleArrayChange = useCallback(\r\n    ({ name, value }: any) => {\r\n      setState({ ...state, [name]: [...state[name], value] });\r\n    },\r\n    [state]\r\n  );\r\n\r\n  return {\r\n    state,\r\n    onChange,\r\n    resetForm,\r\n    handleRootState: setState,\r\n    handleSelectWithLabelChange,\r\n    handleArrayChange,\r\n    handleMultiInput\r\n  };\r\n};\r\n\r\nexport default useFormManager;\r\n","import styled from '@emotion/styled';\r\n\r\nexport const StyledInput = styled.input<any>`\r\nbackground: #fdfdfd;\r\nborder: 0.5px solid #cbd5e0;\r\nheight: 100%;\r\nwidth: 100%;\r\nborder-radius: 7px;\r\npadding: 0 16px;\r\n`\r\n\r\n//`border:  ${required ? `0.5px solid red` : `0.5px solid #cbd5e0`};`","import React, { memo, useCallback } from \"react\";\r\nimport { useTranslation } from 'react-i18next';\r\nimport { FormLabel, Flex } from '@chakra-ui/react'\r\nimport { StyledInput } from \"./styled\"\r\nimport { InputTextProps } from \"./interface\";\r\n\r\nconst InputText = ({\r\n    disabled,\r\n    value,\r\n    name,\r\n    label = \"\",\r\n    onChange,\r\n    height = \"65px\",\r\n    width = \"200px\",\r\n    type = \"text\",\r\n    placeHolder,\r\n    padding,\r\n    margin = \"10px\",\r\n    className = \"\",\r\n    required,\r\n    ...props\r\n}: InputTextProps) => {\r\n    const { t } = useTranslation();\r\n\r\n    const handleChange = useCallback((event: { target: { value: string; }; }) => {\r\n        onChange({ name: name, value: event.target.value })\r\n    }, [name, onChange]);\r\n\r\n    return (\r\n        <>\r\n            <Flex\r\n                direction=\"column\"\r\n                width={width}\r\n                padding={padding}\r\n                margin={margin}\r\n                height={height}\r\n            >\r\n                <FormLabel>{t(label)}</FormLabel>\r\n                <StyledInput\r\n                    placeholder={placeHolder}\r\n                    disabled={disabled}\r\n                    required={required}\r\n                    onChange={handleChange}\r\n                    width=\"100%\"\r\n                    className={className}\r\n                    value={value}\r\n                    type={type}\r\n                    {...props}\r\n                />\r\n            </Flex>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default memo(InputText)","import React, { memo, useCallback } from 'react';\r\nimport { InputText } from \"@commons/input-text\";\r\nimport { useFormManager } from '@commons/hooks';\r\nimport { ModalViewProp } from \"@commons/global\"\r\nimport { SelectWithApi } from '@commons/select/src';\r\nimport { useTableControlsButtons } from \"@commons/table\";\r\nimport { Button } from \"@commons/button\"\r\n\r\nconst ModalView = ({\r\n    onClose,\r\n    selectedRow,\r\n    refreshTable\r\n}: ModalViewProp) => {\r\n    const {\r\n        state,\r\n        onChange,\r\n    }\r\n        = useFormManager({\r\n            initialValues: {\r\n                ...selectedRow\r\n            }\r\n        })\r\n    const { onSaveAndInsertion } = useTableControlsButtons({ api: \"POST_CUSTOMER_TABLE_DATA\", runFetch: refreshTable })\r\n    const { customer_id, password, confirm_password, user_name, first_name, last_name, user_role, query_status } = state;\r\n\r\n    const handleSave = useCallback(() => {\r\n        const record = {\r\n            user_name,\r\n            first_name,\r\n            last_name,\r\n            user_role,\r\n            customer_id,\r\n            query_status,\r\n            password,\r\n            confirm_password\r\n        }\r\n        onSaveAndInsertion(record)\r\n        onClose()\r\n    }, [user_name, first_name, last_name, user_role, customer_id, query_status, password, confirm_password, onSaveAndInsertion, onClose])\r\n\r\n    return (\r\n        <>\r\n            <InputText\r\n                name=\"user_name\"\r\n                label='user_name'\r\n                onChange={onChange}\r\n                value={user_name}\r\n                width=\"47%\"\r\n            />\r\n            <InputText\r\n                name=\"first_name\"\r\n                label='first_name'\r\n                onChange={onChange}\r\n                value={first_name}\r\n                width=\"47%\"\r\n            />\r\n            <InputText\r\n                name=\"last_name\"\r\n                label='last_name'\r\n                onChange={onChange}\r\n                value={last_name}\r\n                width=\"47%\"\r\n            />\r\n            <SelectWithApi\r\n                api=\"\"\r\n                name=\"user_role\"\r\n                label='user_role'\r\n                onChange={onChange}\r\n                value={user_role}\r\n                width=\"47%\"\r\n            />\r\n            <InputText\r\n                name=\"password\"\r\n                label='password'\r\n                onChange={onChange}\r\n                value={password}\r\n                width=\"47%\"\r\n                type='password'\r\n            />\r\n            <InputText\r\n                name=\"confirm_password\"\r\n                label='confirm_password'\r\n                onChange={onChange}\r\n                value={confirm_password}\r\n                width=\"47%\"\r\n                type='password'\r\n            />\r\n            <Button\r\n                onClick={handleSave}\r\n                label=\"sv\"\r\n            />\r\n        </>\r\n    )\r\n};\r\n\r\nexport default memo(ModalView)","import React, { memo, useCallback, useEffect, useState } from \"react\";\r\nimport Flex from \"@commons/flex\";\r\nimport { useFetch, useMutation } from \"@commons/hooks\";\r\nimport { CheckBox } from \"@commons/check-box\";\r\nimport { Button } from \"@commons/button\";\r\n\r\nconst LinkedPages = ({ row }: any) => {\r\n\r\n    const [clonedPages, setClonedPages] = useState<any[]>();\r\n\r\n    const { runFetch } = useFetch({\r\n        link: \"QUERY_PAGE_NAME_LIST_TO_VIEW\",\r\n        onResponse: setClonedPages,\r\n        params: {\r\n            user_id: row.id\r\n        }\r\n    });\r\n\r\n    const { setRow } = useMutation({\r\n        link: \"POST_USER_PAGE_PERMISSIONS\",\r\n        additionalFunctionToRun: runFetch,\r\n    });\r\n\r\n    const handleChange = useCallback((event: any) => {\r\n        const newArr = clonedPages && clonedPages.map(item => {\r\n            if (event.name === item.page_id) {\r\n                return {\r\n                    ...item,\r\n                    status: event.value\r\n                };\r\n            }\r\n            return item;\r\n        });\r\n        setClonedPages(newArr)\r\n    }, [clonedPages]);\r\n\r\n    useEffect(() => {\r\n        runFetch({\r\n            user_id: row.id\r\n        })\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [row.id])\r\n\r\n    const handleSavePages = useCallback(() => {\r\n        setRow(clonedPages)\r\n    }, [clonedPages, setRow])\r\n\r\n    return (\r\n        <Flex\r\n            width=\"40%\"\r\n            flexDirection=\"column\"\r\n        >\r\n            <Button\r\n                onClick={handleSavePages}\r\n                width=\"100%\"\r\n                label=\"save\"\r\n            />\r\n            <Flex\r\n                width=\"100%\"\r\n                flexDirection=\"column\"\r\n                height=\"600px\"\r\n                border=\"1px solid white\"\r\n                margin=\"5px\"\r\n                overflow={\"scroll\"}\r\n            >\r\n                {\r\n                    row.id && clonedPages?.length &&\r\n                    clonedPages.map((record) => (\r\n                        <CheckBox\r\n                            name={record.page_id}\r\n                            label={`${record.page_name} / ${record.page_link}`}\r\n                            value={record.status}\r\n                            onChange={handleChange}\r\n                        />\r\n                    ))\r\n                }\r\n            </Flex>\r\n        </Flex>\r\n    )\r\n}\r\n\r\nexport default memo(LinkedPages)","export const columns = [\r\n  {\r\n    title: \"user_name\",\r\n    dataIndex: \"user_name\",\r\n    width: \"20%\",\r\n  },\r\n  {\r\n    title: \"first_name\",\r\n    dataIndex: \"first_name\",\r\n    width: \"17%\",\r\n  },\r\n  {\r\n    title: \"last_name\",\r\n    dataIndex: \"last_name\",\r\n    width: \"17%\",\r\n  },\r\n  {\r\n    title: \"created_at\",\r\n    dataIndex: \"created_at\",\r\n    width: \"10%\",\r\n  },\r\n  {\r\n    title: \"updated_at\",\r\n    dataIndex: \"updated_at\",\r\n    width: \"10%\",\r\n  },\r\n];\r\n","import React, { memo, useState } from 'react';\r\nimport ModalView from \"./Partials/ModalView\";\r\nimport { TableWithApi } from \"@commons/table\";\r\nimport Flex from \"@commons/flex\";\r\nimport LinkedPages from \"./Partials/LinkedPages\"\r\nimport { columns } from \"./constants\"\r\nconst UsersPage = () => {\r\n    const [row, setRow] = useState({})\r\n\r\n    return (\r\n        <>\r\n            <Flex\r\n                width=\"100%\"\r\n                margin=\"0\"\r\n                padding=\"0\"\r\n                gap=\"0.5\"\r\n            >\r\n                <TableWithApi\r\n                    api={\"QUERY_USERS_TABLE_DATA\"}\r\n                    postApi={\"POST_USERS_TABLE_DATA\"}\r\n                    columns={columns}\r\n                    hideTools={false}\r\n                    canEdit={true}\r\n                    canAdd={true}\r\n                    canDelete={true}\r\n                    canExcel\r\n                    rowKey={\"user_id\"}\r\n                    ModalContent={ModalView}\r\n                    onClick={setRow}\r\n                    fetchOnFirstRun\r\n                />\r\n\r\n                <LinkedPages\r\n                    row={row}\r\n                />\r\n            </Flex>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default memo(UsersPage)","import {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { useFormControlContext, useFormControlStyles } from \"./form-control\"\n\nexport interface FormLabelProps\n  extends HTMLChakraProps<\"label\">,\n    ThemingProps<\"FormLabel\"> {\n  /**\n   * @type React.ReactElement\n   */\n  requiredIndicator?: React.ReactElement\n  /**\n   * @type React.ReactNode\n   */\n  optionalIndicator?: React.ReactNode\n}\n\n/**\n * Used to enhance the usability of form controls.\n *\n * It is used to inform users as to what information\n * is requested for a form field.\n *\n * ♿️ Accessibility: Every form field should have a form label.\n */\nexport const FormLabel = forwardRef<FormLabelProps, \"label\">(function FormLabel(\n  passedProps,\n  ref,\n) {\n  const styles = useStyleConfig(\"FormLabel\", passedProps)\n  const props = omitThemingProps(passedProps)\n\n  const {\n    className,\n    children,\n    requiredIndicator = <RequiredIndicator />,\n    optionalIndicator = null,\n    ...rest\n  } = props\n\n  const field = useFormControlContext()\n  const ownProps = field?.getLabelProps(rest, ref) ?? { ref, ...rest }\n\n  return (\n    <chakra.label\n      {...ownProps}\n      className={cx(\"chakra-form__label\", props.className)}\n      __css={{\n        display: \"block\",\n        textAlign: \"start\",\n        ...styles,\n      }}\n    >\n      {children}\n      {field?.isRequired ? requiredIndicator : optionalIndicator}\n    </chakra.label>\n  )\n})\n\nFormLabel.displayName = \"FormLabel\"\n\nexport interface RequiredIndicatorProps extends HTMLChakraProps<\"span\"> {}\n\n/**\n * Used to show a \"required\" text or an asterisks (*) to indicate that\n * a field is required.\n */\nexport const RequiredIndicator = forwardRef<RequiredIndicatorProps, \"span\">(\n  function RequiredIndicator(props, ref) {\n    const field = useFormControlContext()\n    const styles = useFormControlStyles()\n\n    if (!field?.isRequired) return null\n\n    const className = cx(\"chakra-form__required-indicator\", props.className)\n\n    return (\n      <chakra.span\n        {...field?.getRequiredIndicatorProps(props, ref)}\n        __css={styles.requiredIndicator}\n        className={className}\n      />\n    )\n  },\n)\n\nRequiredIndicator.displayName = \"RequiredIndicator\"\n","import { createContext } from \"@chakra-ui/react-context\"\nimport { PropGetter } from \"@chakra-ui/react-types\"\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx, dataAttr } from \"@chakra-ui/shared-utils\"\nimport { useCallback, useId, useState } from \"react\"\n\nconst [FormControlStylesProvider, useFormControlStyles] = createContext<\n  Record<string, SystemStyleObject>\n>({\n  name: `FormControlStylesContext`,\n  errorMessage: `useFormControlStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<FormControl />\" `,\n})\n\nexport { useFormControlContext, useFormControlStyles }\n\nexport interface FormControlOptions {\n  /**\n   * If `true`, the form control will be required. This has 2 side effects:\n   * - The `FormLabel` will show a required indicator\n   * - The form element (e.g, Input) will have `aria-required` set to `true`\n   *\n   * @default false\n   */\n  isRequired?: boolean\n  /**\n   * If `true`, the form control will be disabled. This has 2 side effects:\n   * - The `FormLabel` will have `data-disabled` attribute\n   * - The form element (e.g, Input) will be disabled\n   *\n   * @default false\n   */\n  isDisabled?: boolean\n  /**\n   * If `true`, the form control will be invalid. This has 2 side effects:\n   * - The `FormLabel` and `FormErrorIcon` will have `data-invalid` set to `true`\n   * - The form element (e.g, Input) will have `aria-invalid` set to `true`\n   *\n   * @default false\n   */\n  isInvalid?: boolean\n  /**\n   * If `true`, the form control will be readonly\n   *\n   * @default false\n   */\n  isReadOnly?: boolean\n}\n\ninterface FormControlContext extends FormControlOptions {\n  /**\n   * The label text used to inform users as to what information is\n   * requested for a text field.\n   */\n  label?: string\n  /**\n   * The custom `id` to use for the form control. This is passed directly to the form element (e.g, Input).\n   * - The form element (e.g. Input) gets the `id`\n   * - The form label id: `form-label-${id}`\n   * - The form error text id: `form-error-text-${id}`\n   * - The form helper text id: `form-helper-text-${id}`\n   */\n  id?: string\n}\n\ntype FormControlProviderContext = Omit<\n  ReturnType<typeof useFormControlProvider>,\n  \"getRootProps\" | \"htmlProps\"\n>\n\nconst [FormControlProvider, useFormControlContext] =\n  createContext<FormControlProviderContext>({\n    strict: false,\n    name: \"FormControlContext\",\n  })\n\nfunction useFormControlProvider(props: FormControlContext) {\n  const {\n    id: idProp,\n    isRequired,\n    isInvalid,\n    isDisabled,\n    isReadOnly,\n    ...htmlProps\n  } = props\n\n  // Generate all the required ids\n  const uuid = useId()\n  const id = idProp || `field-${uuid}`\n\n  const labelId = `${id}-label`\n  const feedbackId = `${id}-feedback`\n  const helpTextId = `${id}-helptext`\n\n  /**\n   * Track whether the `FormErrorMessage` has been rendered.\n   * We use this to append its id the `aria-describedby` of the `input`.\n   */\n  const [hasFeedbackText, setHasFeedbackText] = useState(false)\n\n  /**\n   * Track whether the `FormHelperText` has been rendered.\n   * We use this to append its id the `aria-describedby` of the `input`.\n   */\n  const [hasHelpText, setHasHelpText] = useState(false)\n\n  // Track whether the form element (e.g, `input`) has focus.\n  const [isFocused, setFocus] = useState(false)\n\n  const getHelpTextProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      id: helpTextId,\n      ...props,\n      /**\n       * Notify the field context when the help text is rendered on screen,\n       * so we can apply the correct `aria-describedby` to the field (e.g. input, textarea).\n       */\n      ref: mergeRefs(forwardedRef, (node) => {\n        if (!node) return\n        setHasHelpText(true)\n      }),\n    }),\n    [helpTextId],\n  )\n\n  const getLabelProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ref: forwardedRef,\n      \"data-focus\": dataAttr(isFocused),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-readonly\": dataAttr(isReadOnly),\n      id: props.id !== undefined ? props.id : labelId,\n      htmlFor: props.htmlFor !== undefined ? props.htmlFor : id,\n    }),\n    [id, isDisabled, isFocused, isInvalid, isReadOnly, labelId],\n  )\n\n  const getErrorMessageProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      id: feedbackId,\n      ...props,\n      /**\n       * Notify the field context when the error message is rendered on screen,\n       * so we can apply the correct `aria-describedby` to the field (e.g. input, textarea).\n       */\n      ref: mergeRefs(forwardedRef, (node) => {\n        if (!node) return\n        setHasFeedbackText(true)\n      }),\n      \"aria-live\": \"polite\",\n    }),\n    [feedbackId],\n  )\n\n  const getRootProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ...htmlProps,\n      ref: forwardedRef,\n      role: \"group\",\n    }),\n    [htmlProps],\n  )\n\n  const getRequiredIndicatorProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ref: forwardedRef,\n      role: \"presentation\",\n      \"aria-hidden\": true,\n      children: props.children || \"*\",\n    }),\n    [],\n  )\n\n  return {\n    isRequired: !!isRequired,\n    isInvalid: !!isInvalid,\n    isReadOnly: !!isReadOnly,\n    isDisabled: !!isDisabled,\n    isFocused: !!isFocused,\n    onFocus: () => setFocus(true),\n    onBlur: () => setFocus(false),\n    hasFeedbackText,\n    setHasFeedbackText,\n    hasHelpText,\n    setHasHelpText,\n    id,\n    labelId,\n    feedbackId,\n    helpTextId,\n    htmlProps,\n    getHelpTextProps,\n    getErrorMessageProps,\n    getRootProps,\n    getLabelProps,\n    getRequiredIndicatorProps,\n  }\n}\n\nexport interface FormControlProps\n  extends HTMLChakraProps<\"div\">,\n    ThemingProps<\"FormControl\">,\n    FormControlContext {}\n\n/**\n * FormControl provides context such as\n * `isInvalid`, `isDisabled`, and `isRequired` to form elements.\n *\n * This is commonly used in form elements such as `input`,\n * `select`, `textarea`, etc.\n *\n * @see Docs https://chakra-ui.com/docs/components/form-control\n */\nexport const FormControl = forwardRef<FormControlProps, \"div\">(\n  function FormControl(props, ref) {\n    const styles = useMultiStyleConfig(\"Form\", props)\n    const ownProps = omitThemingProps(props)\n    const {\n      getRootProps,\n      htmlProps: _,\n      ...context\n    } = useFormControlProvider(ownProps)\n\n    const className = cx(\"chakra-form-control\", props.className)\n\n    return (\n      <FormControlProvider value={context}>\n        <FormControlStylesProvider value={styles}>\n          <chakra.div\n            {...getRootProps({}, ref)}\n            className={className}\n            __css={styles[\"container\"]}\n          />\n        </FormControlStylesProvider>\n      </FormControlProvider>\n    )\n  },\n)\n\nFormControl.displayName = \"FormControl\"\n\nexport interface FormHelperTextProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * FormHelperText\n *\n * Assistive component that conveys additional guidance\n * about the field, such as how it will be used and what\n * types in values should be provided.\n */\nexport const FormHelperText = forwardRef<FormHelperTextProps, \"div\">(\n  function FormHelperText(props, ref) {\n    const field = useFormControlContext()\n    const styles = useFormControlStyles()\n    const className = cx(\"chakra-form__helper-text\", props.className)\n    return (\n      <chakra.div\n        {...field?.getHelpTextProps(props, ref)}\n        __css={styles.helperText}\n        className={className}\n      />\n    )\n  },\n)\n\nFormHelperText.displayName = \"FormHelperText\"\n"],"names":["StyledSelect","styled","select","_templateObject","_taggedTemplateLiteral","StyledOption","option","_templateObject2","Select","_ref","_ref$height","height","_ref$width","width","Options","onChange","label","_ref$value","value","name","_ref$withLabel","withLabel","_ref$margin","margin","padding","_ref$placeholder","placeholder","_ref$selectLabelName","selectLabelName","t","useTranslation","_jsx","_Fragment","children","_jsxs","Flex","direction","FormLabel","fontSize","as","event","Array","isArray","forEach","target","length","map","Option","selected","disabled","memo","SelectWithApi","api","_ref$name","params","data","useFetch","link","fetchOnFirstRun","checkForParams","CheckBox","_ref$label","_ref$unCheckedColor","unCheckedColor","_ref$checkedColor","checkedColor","required","handleChange","useCallback","checked","StyledCheckBox","input","StyledLabel","StyledSpan","span","_templateObject3","type","ref","useRef","useEffect","current","initialValues","_useState","useState","_useState2","_slicedToArray","state","setState","hasAnyFieldChangedRef","preValues","usePrevious","areInitialValuesChanged","Object","is","JSON","stringify","_objectSpread","resetForm","eventData","_defineProperty","handleMultiInput","e","handleSelectWithLabelChange","_objectSpread3","handleArrayChange","_ref2","concat","_toConsumableArray","handleRootState","StyledInput","InputText","_ref$type","placeHolder","_ref$className","className","props","_objectWithoutProperties","_excluded","ModalView","onClose","selectedRow","refreshTable","_useFormManager","useFormManager","onSaveAndInsertion","useTableControlsButtons","runFetch","customer_id","password","confirm_password","user_name","first_name","last_name","user_role","query_status","handleSave","Button","onClick","LinkedPages","row","clonedPages","setClonedPages","onResponse","user_id","id","setRow","useMutation","additionalFunctionToRun","newArr","item","page_id","status","handleSavePages","flexDirection","border","overflow","record","page_name","page_link","columns","title","dataIndex","UsersPage","gap","TableWithApi","postApi","hideTools","canEdit","canAdd","canDelete","canExcel","rowKey","ModalContent","forwardRef","passedProps","_a","styles","useStyleConfig","omitThemingProps","_props$requiredIndica","requiredIndicator","jsx","RequiredIndicator","_props$optionalIndica","optionalIndicator","rest","field","useFormControlContext","ownProps","getLabelProps","jsxs","chakra","cx","__css","display","textAlign","isRequired","displayName","useFormControlStyles","getRequiredIndicatorProps","_createContext","createContext","errorMessage","_createContext2","FormControlStylesProvider","_createContext3","strict","_createContext4","FormControlProvider","FormControl","useMultiStyleConfig","_useFormControlProvid","idProp","isInvalid","isDisabled","isReadOnly","htmlProps","uuid","useId","labelId","feedbackId","helpTextId","hasFeedbackText","setHasFeedbackText","_useState3","_useState4","hasHelpText","setHasHelpText","_useState5","_useState6","isFocused","setFocus","getHelpTextProps","props2","arguments","undefined","forwardedRef","mergeRefs","node","dataAttr","htmlFor","getErrorMessageProps","getRootProps","role","onFocus","onBlur","useFormControlProvider","context","_excluded2","div","helperText"],"sourceRoot":""}