{"version":3,"file":"static/js/556.b871e3e0.chunk.js","mappings":"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","sources":["../common/Select/src/styled.ts","../common/Select/src/select.tsx","../common/Select/src/selectWithApi.tsx","../common/button/src/saveButton.tsx","../common/check-box/src/CheckBox.tsx","../common/hooks/src/usePrevious.ts","../common/hooks/src/useFormManager.ts","../common/input-text/src/styled.ts","../common/input-text/src/inputText.tsx","../pages/page-name-page/src/Partials/ModalView.tsx","../pages/page-name-page/src/constants.ts","../pages/page-name-page/src/component.tsx","../node_modules/@chakra-ui/form-control/src/form-label.tsx","../node_modules/@chakra-ui/form-control/src/form-control.tsx"],"sourcesContent":["import styled from \"@emotion/styled\";\r\n\r\nexport const StyledSelect = styled.select`\r\n  background: #fdfdfd;\r\n  border: 0.5px solid #cbd5e0;\r\n  height: 100%;\r\n  width: 100%;\r\n  border-radius: 7px;\r\n  padding: 0 10px;\r\n`;\r\n\r\nexport const StyledOption = styled.option`\r\n  padding: 100px;\r\n`;\r\n\r\n// export const DropDownContainer = styled.span`\r\n//   margin: 0;\r\n//   min-width: 100%;\r\n//   position: relative;\r\n//   display: inline-block;\r\n//   min-height: 2em;\r\n//   max-height: 2em;\r\n//   overflow: hidden;\r\n//   top: 0.5em;\r\n//   cursor: pointer;\r\n//   text-align: left;\r\n//   white-space: nowrap;\r\n//   color: #444;\r\n//   outline: none;\r\n//   border: 0.06em solid transparent;\r\n//   border-radius: 1em;\r\n//   background-color: #cde4f5;\r\n//   transition: 0.3s all ease-in-out;\r\n\r\n//   &::after {\r\n//     content: \"\";\r\n//     position: absolute;\r\n//     right: 0.8em;\r\n//     top: 0.9em;\r\n//     border: 0.3em solid #3694d7;\r\n//     border-color: #3694d7 transparent transparent transparent;\r\n//     transition: 0.4s all ease-in-out;\r\n//   }\r\n\r\n//   /* &:nth-child(2) {\r\n//     border-top: 0.06em solid #d9d9d9;\r\n//   } */\r\n// `;\r\n\r\n// export const SelectInputRadio = styled.input`\r\n//   width: 1px;\r\n//   height: 1px;\r\n//   display: inline-block;\r\n//   position: absolute;\r\n//   opacity: 0.01;\r\n\r\n//   &:focus {\r\n//     background: #def;\r\n//   }\r\n\r\n//   /* &:checked {\r\n//     display: block;\r\n//     border-top: none;\r\n//     position: absolute;\r\n//     top: 0;\r\n//     width: 100%;\r\n//   } */\r\n// `;\r\n\r\n// export const SelectLabel = styled.label`\r\n//   border-top: 0.06em solid #d9d9d9;\r\n//   display: block;\r\n//   height: 2em;\r\n//   line-height: 2em;\r\n//   padding-left: 1em;\r\n//   padding-right: 3em;\r\n//   cursor: pointer;\r\n//   position: relative;\r\n//   transition: 0.3s color ease-in-out;\r\n// `;\r\n\r\n// <DropDownContainer\r\n//   className={`dropdown-el ${expanded ? \"expanded\" : \"\"}`}\r\n// >\r\n//   {/* <input type=\"radio\" name=\"sortType\" value=\"Relevance\" id=\"sort-relevance\" onClick={handleValue} /><label htmlFor=\"sort-relevance\">Relevance</label> */}\r\n//   <SelectInputRadio type=\"radio\" />\r\n//   <SelectLabel htmlFor=\"sort-best\">Product Popularity</SelectLabel>\r\n//   <SelectInputRadio\r\n//     onClick={handleValue}\r\n//     type=\"radio\"\r\n//     name=\"sortType\"\r\n//     value=\"PriceIncreasing\"\r\n//     id=\"sort-low\"\r\n//   />\r\n//   <SelectLabel htmlFor=\"sort-low\">Price Low to High</SelectLabel>\r\n//   <SelectInputRadio\r\n//     onClick={handleValue}\r\n//     type=\"radio\"\r\n//     name=\"sortType\"\r\n//     value=\"PriceDecreasing\"\r\n//     id=\"sort-high\"\r\n//   />\r\n//   <SelectLabel htmlFor=\"sort-high\">Price High to Low</SelectLabel>\r\n//   <SelectInputRadio\r\n//     onClick={handleValue}\r\n//     type=\"radio\"\r\n//     name=\"sortType\"\r\n//     value=\"ProductBrand\"\r\n//     id=\"sort-brand\"\r\n//   />\r\n//   <SelectLabel htmlFor=\"sort-brand\">Product Brand</SelectLabel>\r\n//   <SelectInputRadio\r\n//     onClick={handleValue}\r\n//     type=\"radio\"\r\n//     name=\"sortType\"\r\n//     value=\"ProductName\"\r\n//     id=\"sort-name\"\r\n//   />\r\n//   <SelectLabel htmlFor=\"sort-name\">Product Name</SelectLabel>\r\n// </DropDownContainer>;\r\n","import React, { memo } from \"react\";\r\nimport { useTranslation } from 'react-i18next';\r\nimport { FormLabel, Flex } from '@chakra-ui/react';\r\nimport { StyledSelect, StyledOption } from \"./styled\"\r\nimport { SelectProps } from \"./interface\";\r\n\r\nconst Select = ({\r\n    height = \"65px\",\r\n    width = \"200px\",\r\n    Options,\r\n    onChange,\r\n    label,\r\n    value = 0,\r\n    name,\r\n    withLabel = false,\r\n    margin = \"10px\",\r\n    padding,\r\n    placeholder = \"Select\",\r\n    selectLabelName = \"label_select\",\r\n}: SelectProps) => {\r\n    const { t } = useTranslation()\r\n    //@ts-ignore\r\n    const handleValue = (event) => {\r\n        if (Array.isArray(Options)) {\r\n            Options.forEach((option) => {\r\n                if (option.value === +event.target.value) {\r\n                    if (withLabel) {\r\n                        onChange({ value: option.value, selectLabelName: selectLabelName, label: option.label, name: name })\r\n                    } else {\r\n                        onChange({ value: option.value, name: name })\r\n                    }\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Flex\r\n                direction=\"column\"\r\n                width={width}\r\n                padding={padding}\r\n                margin={margin}\r\n                height={height}\r\n            >\r\n                <FormLabel fontSize='md' as=\"b\" margin=\"0 0 5px\">{t(label)}</FormLabel>\r\n                <StyledSelect\r\n                    placeholder={t(placeholder)}\r\n                    onChange={handleValue}\r\n                >\r\n                    <StyledOption>{t(\"Select\")}</StyledOption>\r\n                    {Array.isArray(Options) && Options.length !== 0 ? Options.map((Option) => {\r\n                        return (\r\n                            <StyledOption key={Option.value} value={Option.value} selected={value === Option.value && true}> {t(Option.label)}</StyledOption>\r\n                        )\r\n                    }) : <StyledOption disabled>{t(\"No data\")}</StyledOption>}\r\n                </StyledSelect>\r\n            </Flex>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default memo(Select)","import React, { memo } from \"react\";\r\nimport Select from \"./select\";\r\nimport { useFetch } from \"@commons/hooks\"\r\nimport { SelectWithApiProps } from \"./interface\"\r\n\r\nconst SelectWithApi = ({\r\n    width,\r\n    api,\r\n    onChange,\r\n    label,\r\n    name = \"\",\r\n    value = 0,\r\n    withLabel = false,\r\n    padding,\r\n    margin,\r\n    params,\r\n    selectLabelName = \"label_select\"\r\n}: SelectWithApiProps) => {\r\n\r\n    const { data } = useFetch({\r\n        link: api,\r\n        fetchOnFirstRun: true,\r\n        params: params,\r\n        checkForParams: true\r\n    })\r\n\r\n    return (\r\n        <>\r\n            <Select\r\n                Options={data}\r\n                onChange={onChange}\r\n                label={label}\r\n                value={value}\r\n                name={name}\r\n                width={width}\r\n                withLabel={withLabel}\r\n                margin={margin}\r\n                padding={padding}\r\n                selectLabelName={selectLabelName}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default memo(SelectWithApi);","import React, { memo } from \"react\";\r\nimport Button from \"./button\"\r\nimport { saveButtonProp } from \"./interface\"\r\n\r\nconst SaveButton = ({\r\n    onOK,\r\n    width=\"40%\",\r\n    label = \"sv\",\r\n    ...props\r\n}: saveButtonProp) => {\r\n    return (\r\n        <>\r\n            <Button onClick={onOK} label=\"sv\" width={width} {...props} />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default memo(SaveButton)","import React, { memo, useCallback } from \"react\";\r\nimport { useTranslation } from 'react-i18next'\r\nimport styled from \"@emotion/styled\";\r\nimport { Flex, FormLabel } from \"@chakra-ui/react\"\r\nimport { CheckBoxProps } from \"./interface\";\r\n\r\nconst CheckBox = ({\r\n    label = \"\",\r\n    value,\r\n    onChange,\r\n    name,\r\n    unCheckedColor = \"#33455e\",\r\n    checkedColor = \"#ff6e48\",\r\n    width,\r\n    height,\r\n    disabled,\r\n    required,\r\n    padding,\r\n    margin = \"10px\"\r\n}: any) => {\r\n    const { t } = useTranslation()\r\n    const handleChange = useCallback((event: { target: { checked: boolean; }; }) => {\r\n        if (event.target.checked === true) {\r\n            onChange({ name: name, value: \"Y\" })\r\n        } else if (event.target.checked === false) {\r\n            onChange({ name: name, value: \"N\" })\r\n        }\r\n    }, [name, onChange])\r\n\r\n\r\n    const checked = value === \"Y\" ? true : false\r\n\r\n    const StyledCheckBox = styled.input`\r\n        display: none;\r\n        width: 100%;\r\n        height: 100%;\r\n    `\r\n\r\n    const StyledLabel = styled.label`\r\n        position: relative;\r\n        display: inline-block;\r\n        width: 4rem;\r\n        height: 1.7rem;\r\n    `\r\n\r\n    const StyledSpan = styled.span`\r\n        position: absolute;\r\n        top: 0;\r\n        left: 0;\r\n        bottom: 0;\r\n        right: 0;\r\n        width: 100%;\r\n        background-color: ${disabled ? \"#81838f\" : checked ? checkedColor : unCheckedColor};\r\n        display: block;\r\n        transition: all 0.3s;\r\n        border-radius: 2rem;\r\n        cursor: pointer;\r\n        ${required && \"border: 1.5px solid red;\"}\r\n\r\n        &:before {\r\n            content: \"\";\r\n            position: absolute;\r\n            height: 1rem;\r\n            width: 1rem;\r\n            border-radius: 100%;\r\n            display: block;\r\n            left: 0.5rem;\r\n            bottom: 0.3rem;\r\n            background-color: white;\r\n            transition: all 0.3s;\r\n            transform: translate(${checked ? \"200%\" : 0}, 0);\r\n        }\r\n    `\r\n\r\n    return (\r\n        <>\r\n            <Flex\r\n                direction=\"column\"\r\n                width={width}\r\n                padding={padding}\r\n                margin={margin}\r\n                height={height}\r\n            >\r\n                <FormLabel>{t(label)}</FormLabel>\r\n                <StyledLabel>\r\n                    <StyledCheckBox type=\"checkbox\" onChange={handleChange} checked={checked} disabled={disabled} />\r\n                    <StyledSpan />\r\n                </StyledLabel>\r\n            </Flex>\r\n            {/* <StyledCheckBox\r\n                checked={checked}\r\n                type=\"checkbox\"\r\n                onChange={handleChange}\r\n                disabled={disabled}\r\n            >\r\n                {t(label)}\r\n            </StyledCheckBox> */}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default memo(CheckBox)","import { useRef, useEffect } from \"react\";\r\n\r\nconst usePrevious = <T>(value: T): T => {\r\n  const ref = useRef<T>();\r\n\r\n  useEffect(() => {\r\n    ref.current = value;\r\n  });\r\n\r\n  return ref.current as T;\r\n};\r\n\r\nexport default usePrevious;\r\n","import { useState, useCallback, useEffect, useRef } from \"react\";\r\nimport usePrevious from \"./usePrevious\";\r\n\r\ninterface useFormManagerProps {\r\n  initialValues?: any;\r\n}\r\n\r\nconst useFormManager = ({ initialValues }: useFormManagerProps) => {\r\n  const [state, setState] = useState<typeof initialValues>(initialValues);\r\n\r\n  const hasAnyFieldChangedRef = useRef(false);\r\n  const preValues = usePrevious(initialValues);\r\n\r\n  const areInitialValuesChanged = useCallback(\r\n    () => !Object.is(JSON.stringify(preValues), JSON.stringify(initialValues)),\r\n    [initialValues, preValues]\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (areInitialValuesChanged()) {\r\n      setState({ ...initialValues });\r\n    }\r\n  }, [areInitialValuesChanged, initialValues]);\r\n\r\n  const resetForm = useCallback(() => {\r\n    hasAnyFieldChangedRef.current = false;\r\n    setState(() => initialValues);\r\n    // @ts-ignore\r\n  }, [initialValues]);\r\n\r\n  useEffect(\r\n    () => {\r\n      return resetForm;\r\n    },\r\n    // eslint-disable-next-line\r\n    []\r\n  );\r\n\r\n  const onChange = useCallback(\r\n    (eventData: any) => {\r\n      const { name, value } = eventData;\r\n      setState({ ...state, [name]: value });\r\n    },\r\n    [state]\r\n  );\r\n\r\n  const handleMultiInput = useCallback((e:any)=>{\r\n    setState({\r\n      ...state,\r\n      ...e\r\n    })\r\n  },[state])\r\n\r\n  const handleSelectWithLabelChange = useCallback(\r\n    (eventData: any) => {\r\n      setState({\r\n        ...state,\r\n        [eventData.name]: eventData.value,\r\n        [eventData.selectLabelName]: eventData.label,\r\n      });\r\n    },\r\n    [state]\r\n  );\r\n\r\n  const handleArrayChange = useCallback(\r\n    ({ name, value }: any) => {\r\n      setState({ ...state, [name]: [...state[name], value] });\r\n    },\r\n    [state]\r\n  );\r\n\r\n  return {\r\n    state,\r\n    onChange,\r\n    resetForm,\r\n    handleRootState: setState,\r\n    handleSelectWithLabelChange,\r\n    handleArrayChange,\r\n    handleMultiInput\r\n  };\r\n};\r\n\r\nexport default useFormManager;\r\n","import styled from '@emotion/styled';\r\n\r\nexport const StyledInput = styled.input<any>`\r\nbackground: #fdfdfd;\r\nborder: 0.5px solid #cbd5e0;\r\nheight: 100%;\r\nwidth: 100%;\r\nborder-radius: 7px;\r\npadding: 0 16px;\r\n`\r\n\r\n//`border:  ${required ? `0.5px solid red` : `0.5px solid #cbd5e0`};`","import React, { memo, useCallback } from \"react\";\r\nimport { useTranslation } from 'react-i18next';\r\nimport { FormLabel, Flex } from '@chakra-ui/react'\r\nimport { StyledInput } from \"./styled\"\r\nimport { InputTextProps } from \"./interface\";\r\n\r\nconst InputText = ({\r\n    disabled,\r\n    value,\r\n    name,\r\n    label = \"\",\r\n    onChange,\r\n    height = \"65px\",\r\n    width = \"200px\",\r\n    type = \"text\",\r\n    placeHolder,\r\n    padding,\r\n    margin = \"10px\",\r\n    className = \"\",\r\n    required,\r\n    ...props\r\n}: InputTextProps) => {\r\n    const { t } = useTranslation();\r\n\r\n    const handleChange = useCallback((event: { target: { value: string; }; }) => {\r\n        onChange({ name: name, value: event.target.value })\r\n    }, [name, onChange]);\r\n\r\n    return (\r\n        <>\r\n            <Flex\r\n                direction=\"column\"\r\n                width={width}\r\n                padding={padding}\r\n                margin={margin}\r\n                height={height}\r\n            >\r\n                <FormLabel>{t(label)}</FormLabel>\r\n                <StyledInput\r\n                    placeholder={placeHolder}\r\n                    disabled={disabled}\r\n                    required={required}\r\n                    onChange={handleChange}\r\n                    width=\"100%\"\r\n                    className={className}\r\n                    value={value}\r\n                    type={type}\r\n                    {...props}\r\n                />\r\n            </Flex>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default memo(InputText)","import React, { memo, useCallback } from 'react';\r\nimport { InputText } from \"@commons/input-text\";\r\nimport { useFormManager } from '@commons/hooks';\r\nimport { ModalViewProp } from \"@commons/global\"\r\nimport { useTableControlsButtons } from \"@commons/table\";\r\nimport { SaveButton } from \"@commons/button\";\r\nimport { CheckBox } from \"@commons/check-box\";\r\nimport { Flex } from '@chakra-ui/react';\r\nimport { SelectWithApi } from '@commons/select';\r\n\r\nconst ModalView = ({\r\n    onClose,\r\n    selectedRow,\r\n    refreshTable\r\n}: ModalViewProp) => {\r\n    const {\r\n        state,\r\n        onChange,\r\n    }\r\n        = useFormManager({\r\n            initialValues: {\r\n                ...selectedRow\r\n            }\r\n        })\r\n    const { onSaveAndInsertion } = useTableControlsButtons({ api: \"POST_PAGE_NAME_MAIN_TABLE\", runFetch: refreshTable })\r\n\r\n    const handleSave = useCallback(() => {\r\n        onSaveAndInsertion(state)\r\n        onClose()\r\n    }, [onSaveAndInsertion, state, onClose])\r\n\r\n    console.log(state.page_name)\r\n\r\n    return (\r\n        <Flex margin={0} padding={0} gap={0} direction=\"column\" width=\"100%\"> \r\n        <Flex width=\"100%\">\r\n            <InputText\r\n                name=\"page_name\"\r\n                label='page_name'\r\n                onChange={onChange}\r\n                value={state.page_name}\r\n                width=\"47%\"\r\n            />\r\n            <InputText\r\n                name=\"page_link\"\r\n                label='page_link'\r\n                onChange={onChange}\r\n                value={state.page_link}\r\n                width=\"47%\"\r\n            />\r\n            </Flex>\r\n                <Flex width=\"100%\">\r\n                <SelectWithApi\r\n                    api='QUERY_PAGE_PARENT_LIST'\r\n                    name=\"page_parent_id\"\r\n                    label='parent_name'\r\n                    onChange={onChange}\r\n                    value={state.page_parent_id}\r\n                    width=\"47%\"\r\n                    fetchOnFirstRun\r\n                />\r\n            <CheckBox\r\n                name=\"page_disabled\"\r\n                label='page_disabled'\r\n                onChange={onChange}\r\n                value={state.page_disabled}\r\n            />\r\n            <CheckBox\r\n                name=\"run_in_modal\"\r\n                label='run_in_modal'\r\n                onChange={onChange}\r\n                value={state.run_in_modal}\r\n            />\r\n            </Flex>\r\n            <SaveButton\r\n                onClick={handleSave}\r\n            />\r\n\r\n        </Flex>\r\n    )\r\n};\r\n\r\nexport default memo(ModalView)","export const columns = [\r\n  {\r\n    title: \"page_name\",\r\n    dataIndex: \"page_name\",\r\n    width: \"20%\",\r\n  },\r\n  {\r\n    title: \"page_link\",\r\n    dataIndex: \"page_link\",\r\n    width: \"17%\",\r\n  },\r\n  {\r\n    title: \"page_disabled\",\r\n    dataIndex: \"page_disabled\",\r\n    width: \"17%\",\r\n  },\r\n  {\r\n    title: \"run_in_modal\",\r\n    dataIndex: \"run_in_modal\",\r\n    width: \"17%\",\r\n  },\r\n  {\r\n    title: \"parent_name\",\r\n    dataIndex: \"page_parent_name\",\r\n    width: \"15%\",\r\n  },\r\n  {\r\n    title: \"created_at\",\r\n    dataIndex: \"created_at\",\r\n    width: \"20%\",\r\n  },\r\n  {\r\n    title: \"updated_at\",\r\n    dataIndex: \"updated_at\",\r\n    width: \"20%\",\r\n  },\r\n];\r\n","import React, { memo } from \"react\";\r\nimport ModalView from \"./Partials/ModalView\";\r\nimport { TableWithApi } from \"@commons/table\";\r\nimport { columns } from \"./constants\"\r\n\r\nconst PageName = () => {\r\n    return (\r\n        <>\r\n            <TableWithApi\r\n                api={\"QUERY_PAGE_NAME_MAIN_TABLE\"}\r\n                postApi={\"POST_PAGE_NAME_MAIN_TABLE\"}\r\n                columns={columns}\r\n                hideTools={false}\r\n                canEdit={true}\r\n                canAdd={true}\r\n                canDelete={true}\r\n                canExcel\r\n                rowKey={\"customer_id\"}\r\n                ModalContent={ModalView}\r\n                fetchOnFirstRun\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default memo(PageName)","import {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { useFormControlContext, useFormControlStyles } from \"./form-control\"\n\nexport interface FormLabelProps\n  extends HTMLChakraProps<\"label\">,\n    ThemingProps<\"FormLabel\"> {\n  /**\n   * @type React.ReactElement\n   */\n  requiredIndicator?: React.ReactElement\n  /**\n   * @type React.ReactNode\n   */\n  optionalIndicator?: React.ReactNode\n}\n\n/**\n * Used to enhance the usability of form controls.\n *\n * It is used to inform users as to what information\n * is requested for a form field.\n *\n * ♿️ Accessibility: Every form field should have a form label.\n */\nexport const FormLabel = forwardRef<FormLabelProps, \"label\">(function FormLabel(\n  passedProps,\n  ref,\n) {\n  const styles = useStyleConfig(\"FormLabel\", passedProps)\n  const props = omitThemingProps(passedProps)\n\n  const {\n    className,\n    children,\n    requiredIndicator = <RequiredIndicator />,\n    optionalIndicator = null,\n    ...rest\n  } = props\n\n  const field = useFormControlContext()\n  const ownProps = field?.getLabelProps(rest, ref) ?? { ref, ...rest }\n\n  return (\n    <chakra.label\n      {...ownProps}\n      className={cx(\"chakra-form__label\", props.className)}\n      __css={{\n        display: \"block\",\n        textAlign: \"start\",\n        ...styles,\n      }}\n    >\n      {children}\n      {field?.isRequired ? requiredIndicator : optionalIndicator}\n    </chakra.label>\n  )\n})\n\nFormLabel.displayName = \"FormLabel\"\n\nexport interface RequiredIndicatorProps extends HTMLChakraProps<\"span\"> {}\n\n/**\n * Used to show a \"required\" text or an asterisks (*) to indicate that\n * a field is required.\n */\nexport const RequiredIndicator = forwardRef<RequiredIndicatorProps, \"span\">(\n  function RequiredIndicator(props, ref) {\n    const field = useFormControlContext()\n    const styles = useFormControlStyles()\n\n    if (!field?.isRequired) return null\n\n    const className = cx(\"chakra-form__required-indicator\", props.className)\n\n    return (\n      <chakra.span\n        {...field?.getRequiredIndicatorProps(props, ref)}\n        __css={styles.requiredIndicator}\n        className={className}\n      />\n    )\n  },\n)\n\nRequiredIndicator.displayName = \"RequiredIndicator\"\n","import { createContext } from \"@chakra-ui/react-context\"\nimport { PropGetter } from \"@chakra-ui/react-types\"\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx, dataAttr } from \"@chakra-ui/shared-utils\"\nimport { useCallback, useId, useState } from \"react\"\n\nconst [FormControlStylesProvider, useFormControlStyles] = createContext<\n  Record<string, SystemStyleObject>\n>({\n  name: `FormControlStylesContext`,\n  errorMessage: `useFormControlStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<FormControl />\" `,\n})\n\nexport { useFormControlContext, useFormControlStyles }\n\nexport interface FormControlOptions {\n  /**\n   * If `true`, the form control will be required. This has 2 side effects:\n   * - The `FormLabel` will show a required indicator\n   * - The form element (e.g, Input) will have `aria-required` set to `true`\n   *\n   * @default false\n   */\n  isRequired?: boolean\n  /**\n   * If `true`, the form control will be disabled. This has 2 side effects:\n   * - The `FormLabel` will have `data-disabled` attribute\n   * - The form element (e.g, Input) will be disabled\n   *\n   * @default false\n   */\n  isDisabled?: boolean\n  /**\n   * If `true`, the form control will be invalid. This has 2 side effects:\n   * - The `FormLabel` and `FormErrorIcon` will have `data-invalid` set to `true`\n   * - The form element (e.g, Input) will have `aria-invalid` set to `true`\n   *\n   * @default false\n   */\n  isInvalid?: boolean\n  /**\n   * If `true`, the form control will be readonly\n   *\n   * @default false\n   */\n  isReadOnly?: boolean\n}\n\ninterface FormControlContext extends FormControlOptions {\n  /**\n   * The label text used to inform users as to what information is\n   * requested for a text field.\n   */\n  label?: string\n  /**\n   * The custom `id` to use for the form control. This is passed directly to the form element (e.g, Input).\n   * - The form element (e.g. Input) gets the `id`\n   * - The form label id: `form-label-${id}`\n   * - The form error text id: `form-error-text-${id}`\n   * - The form helper text id: `form-helper-text-${id}`\n   */\n  id?: string\n}\n\ntype FormControlProviderContext = Omit<\n  ReturnType<typeof useFormControlProvider>,\n  \"getRootProps\" | \"htmlProps\"\n>\n\nconst [FormControlProvider, useFormControlContext] =\n  createContext<FormControlProviderContext>({\n    strict: false,\n    name: \"FormControlContext\",\n  })\n\nfunction useFormControlProvider(props: FormControlContext) {\n  const {\n    id: idProp,\n    isRequired,\n    isInvalid,\n    isDisabled,\n    isReadOnly,\n    ...htmlProps\n  } = props\n\n  // Generate all the required ids\n  const uuid = useId()\n  const id = idProp || `field-${uuid}`\n\n  const labelId = `${id}-label`\n  const feedbackId = `${id}-feedback`\n  const helpTextId = `${id}-helptext`\n\n  /**\n   * Track whether the `FormErrorMessage` has been rendered.\n   * We use this to append its id the `aria-describedby` of the `input`.\n   */\n  const [hasFeedbackText, setHasFeedbackText] = useState(false)\n\n  /**\n   * Track whether the `FormHelperText` has been rendered.\n   * We use this to append its id the `aria-describedby` of the `input`.\n   */\n  const [hasHelpText, setHasHelpText] = useState(false)\n\n  // Track whether the form element (e.g, `input`) has focus.\n  const [isFocused, setFocus] = useState(false)\n\n  const getHelpTextProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      id: helpTextId,\n      ...props,\n      /**\n       * Notify the field context when the help text is rendered on screen,\n       * so we can apply the correct `aria-describedby` to the field (e.g. input, textarea).\n       */\n      ref: mergeRefs(forwardedRef, (node) => {\n        if (!node) return\n        setHasHelpText(true)\n      }),\n    }),\n    [helpTextId],\n  )\n\n  const getLabelProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ref: forwardedRef,\n      \"data-focus\": dataAttr(isFocused),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-readonly\": dataAttr(isReadOnly),\n      id: props.id !== undefined ? props.id : labelId,\n      htmlFor: props.htmlFor !== undefined ? props.htmlFor : id,\n    }),\n    [id, isDisabled, isFocused, isInvalid, isReadOnly, labelId],\n  )\n\n  const getErrorMessageProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      id: feedbackId,\n      ...props,\n      /**\n       * Notify the field context when the error message is rendered on screen,\n       * so we can apply the correct `aria-describedby` to the field (e.g. input, textarea).\n       */\n      ref: mergeRefs(forwardedRef, (node) => {\n        if (!node) return\n        setHasFeedbackText(true)\n      }),\n      \"aria-live\": \"polite\",\n    }),\n    [feedbackId],\n  )\n\n  const getRootProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ...htmlProps,\n      ref: forwardedRef,\n      role: \"group\",\n    }),\n    [htmlProps],\n  )\n\n  const getRequiredIndicatorProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ref: forwardedRef,\n      role: \"presentation\",\n      \"aria-hidden\": true,\n      children: props.children || \"*\",\n    }),\n    [],\n  )\n\n  return {\n    isRequired: !!isRequired,\n    isInvalid: !!isInvalid,\n    isReadOnly: !!isReadOnly,\n    isDisabled: !!isDisabled,\n    isFocused: !!isFocused,\n    onFocus: () => setFocus(true),\n    onBlur: () => setFocus(false),\n    hasFeedbackText,\n    setHasFeedbackText,\n    hasHelpText,\n    setHasHelpText,\n    id,\n    labelId,\n    feedbackId,\n    helpTextId,\n    htmlProps,\n    getHelpTextProps,\n    getErrorMessageProps,\n    getRootProps,\n    getLabelProps,\n    getRequiredIndicatorProps,\n  }\n}\n\nexport interface FormControlProps\n  extends HTMLChakraProps<\"div\">,\n    ThemingProps<\"FormControl\">,\n    FormControlContext {}\n\n/**\n * FormControl provides context such as\n * `isInvalid`, `isDisabled`, and `isRequired` to form elements.\n *\n * This is commonly used in form elements such as `input`,\n * `select`, `textarea`, etc.\n *\n * @see Docs https://chakra-ui.com/docs/components/form-control\n */\nexport const FormControl = forwardRef<FormControlProps, \"div\">(\n  function FormControl(props, ref) {\n    const styles = useMultiStyleConfig(\"Form\", props)\n    const ownProps = omitThemingProps(props)\n    const {\n      getRootProps,\n      htmlProps: _,\n      ...context\n    } = useFormControlProvider(ownProps)\n\n    const className = cx(\"chakra-form-control\", props.className)\n\n    return (\n      <FormControlProvider value={context}>\n        <FormControlStylesProvider value={styles}>\n          <chakra.div\n            {...getRootProps({}, ref)}\n            className={className}\n            __css={styles[\"container\"]}\n          />\n        </FormControlStylesProvider>\n      </FormControlProvider>\n    )\n  },\n)\n\nFormControl.displayName = \"FormControl\"\n\nexport interface FormHelperTextProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * FormHelperText\n *\n * Assistive component that conveys additional guidance\n * about the field, such as how it will be used and what\n * types in values should be provided.\n */\nexport const FormHelperText = forwardRef<FormHelperTextProps, \"div\">(\n  function FormHelperText(props, ref) {\n    const field = useFormControlContext()\n    const styles = useFormControlStyles()\n    const className = cx(\"chakra-form__helper-text\", props.className)\n    return (\n      <chakra.div\n        {...field?.getHelpTextProps(props, ref)}\n        __css={styles.helperText}\n        className={className}\n      />\n    )\n  },\n)\n\nFormHelperText.displayName = \"FormHelperText\"\n"],"names":["StyledSelect","styled","select","_templateObject","_taggedTemplateLiteral","StyledOption","option","_templateObject2","Select","_ref","_ref$height","height","_ref$width","width","Options","onChange","label","_ref$value","value","name","_ref$withLabel","withLabel","_ref$margin","margin","padding","_ref$placeholder","placeholder","_ref$selectLabelName","selectLabelName","t","useTranslation","_jsx","_Fragment","children","_jsxs","Flex","direction","FormLabel","fontSize","as","event","Array","isArray","forEach","target","length","map","Option","selected","disabled","memo","SelectWithApi","api","_ref$name","params","data","useFetch","link","fetchOnFirstRun","checkForParams","SaveButton","onOK","props","_objectWithoutProperties","_excluded","Button","_objectSpread","onClick","CheckBox","_ref$label","_ref$unCheckedColor","unCheckedColor","_ref$checkedColor","checkedColor","required","handleChange","useCallback","checked","StyledCheckBox","input","StyledLabel","StyledSpan","span","_templateObject3","type","ref","useRef","useEffect","current","initialValues","_useState","useState","_useState2","_slicedToArray","state","setState","hasAnyFieldChangedRef","preValues","usePrevious","areInitialValuesChanged","Object","is","JSON","stringify","resetForm","eventData","_defineProperty","handleMultiInput","e","handleSelectWithLabelChange","_objectSpread3","handleArrayChange","_ref2","concat","_toConsumableArray","handleRootState","StyledInput","InputText","_ref$type","placeHolder","_ref$className","className","ModalView","onClose","selectedRow","refreshTable","_useFormManager","useFormManager","onSaveAndInsertion","useTableControlsButtons","runFetch","handleSave","console","log","page_name","gap","page_link","page_parent_id","page_disabled","run_in_modal","columns","title","dataIndex","PageName","TableWithApi","postApi","hideTools","canEdit","canAdd","canDelete","canExcel","rowKey","ModalContent","forwardRef","passedProps","_a","styles","useStyleConfig","omitThemingProps","_props$requiredIndica","requiredIndicator","jsx","RequiredIndicator","_props$optionalIndica","optionalIndicator","rest","field","useFormControlContext","ownProps","getLabelProps","jsxs","chakra","cx","__css","display","textAlign","isRequired","displayName","useFormControlStyles","getRequiredIndicatorProps","_createContext","createContext","errorMessage","_createContext2","FormControlStylesProvider","_createContext3","strict","_createContext4","FormControlProvider","FormControl","useMultiStyleConfig","_useFormControlProvid","idProp","id","isInvalid","isDisabled","isReadOnly","htmlProps","uuid","useId","labelId","feedbackId","helpTextId","hasFeedbackText","setHasFeedbackText","_useState3","_useState4","hasHelpText","setHasHelpText","_useState5","_useState6","isFocused","setFocus","getHelpTextProps","props2","arguments","undefined","forwardedRef","mergeRefs","node","dataAttr","htmlFor","getErrorMessageProps","getRootProps","role","onFocus","onBlur","useFormControlProvider","context","_excluded2","div","helperText"],"sourceRoot":""}