{"version":3,"file":"static/js/589.08e69f89.chunk.js","mappings":"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","sources":["../common/Select/src/select.tsx","../common/Select/src/selectWithApi.tsx","../common/hooks/src/usePrevious.ts","../common/hooks/src/useFormManager.ts","../common/input-text/src/inputText.tsx","../pages/supplier-summary-page/src/constant.ts","../pages/supplier-summary-page/src/component.tsx","../node_modules/@chakra-ui/select/dist/chunk-HQIEHZYI.mjs","../node_modules/@chakra-ui/select/dist/chunk-GJO77I2I.mjs"],"sourcesContent":["import React, { memo } from \"react\";\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Select as ChakraSelect, FormLabel, Flex } from '@chakra-ui/react';\r\nimport { SelectProps } from \"./interface\";\r\n\r\nconst Select = ({\r\n    width = \"200px\",\r\n    Options = [{\r\n        label: \"\",\r\n        value: 0\r\n    }],\r\n    onChange,\r\n    Label,\r\n    value = 0,\r\n    name,\r\n    withLabel = false,\r\n    margin = \"10px\",\r\n    padding,\r\n    placeholder = \"Select\"\r\n}: SelectProps) => {\r\n    const { t } = useTranslation()\r\n    //@ts-ignore\r\n    const handleValue = (event) => {\r\n        if (Array.isArray(Options)) {\r\n            Options.map((option) => {\r\n                if (option.value === +event.target.value) {\r\n                    if (withLabel) {\r\n                        onChange({ value: option.value, label: option.label, name: name })\r\n                    } else {\r\n                        onChange({ value: option.value, name: name })\r\n                    }\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Flex\r\n                direction=\"column\"\r\n                width={width}\r\n                padding={padding}\r\n                margin={margin}\r\n            >\r\n                <FormLabel fontSize='md' as=\"b\" margin=\"0 0 5px\">{t(Label)}</FormLabel>\r\n                <ChakraSelect\r\n                    placeholder={t(placeholder)}\r\n                    onChange={handleValue}\r\n                >\r\n                    {Array.isArray(Options) ? Options.map((Option) => {\r\n                        return (\r\n                            <option key={Option.value} value={Option.value} selected={value === Option.value && true}> {t(Option.label)}</option>\r\n                        )\r\n                    }) : <option disabled>{t(\"No data\")}</option>}\r\n                </ChakraSelect>\r\n            </Flex>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default memo(Select)","import React, { memo } from \"react\";\r\nimport Select from \"./select\";\r\nimport { useFetch } from \"@commons/hooks\"\r\nimport { SelectWithApiProps } from \"./interface\"\r\n\r\nconst SelectWithApi = ({\r\n    width,\r\n    Api,\r\n    onChange,\r\n    Label,\r\n    name = \"\",\r\n    value = 0,\r\n    withLabel = false,\r\n    padding,\r\n    margin,\r\n    params,\r\n    fetchOnFirstRun = false\r\n}: SelectWithApiProps) => {\r\n\r\n    const { data } = useFetch({\r\n        link: Api,\r\n        fetchOnFirstRun: fetchOnFirstRun,\r\n        params: params\r\n    })\r\n\r\n    return (\r\n        <>\r\n            <Select\r\n                Options={data}\r\n                onChange={onChange}\r\n                Label={Label}\r\n                value={value}\r\n                name={name}\r\n                width={width}\r\n                withLabel={withLabel}\r\n                margin={margin}\r\n                padding={padding}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default memo(SelectWithApi);","import { useRef, useEffect } from \"react\";\n\nconst usePrevious = <T>(value: T): T => {\n  const ref = useRef<T>();\n\n  useEffect(() => {\n    ref.current = value;\n  });\n\n  return ref.current as T;\n};\n\nexport default usePrevious;\n","import { useState, useCallback, useEffect, useRef } from \"react\";\nimport usePrevious from \"./usePrevious\";\n\ninterface useFormManagerProps {\n  initialValues?: any;\n  setSelectedRow?: any;\n  tableModal?: boolean;\n}\n\nconst useFormManager = ({ initialValues }: useFormManagerProps) => {\n  const [state, setState] = useState<typeof initialValues>(initialValues);\n\n  const hasAnyFieldChangedRef = useRef(false);\n  const preValues = usePrevious(initialValues);\n\n  const areInitialValuesChanged = useCallback(\n    () => !Object.is(JSON.stringify(preValues), JSON.stringify(initialValues)),\n    [initialValues, preValues]\n  );\n\n  useEffect(() => {\n    if (areInitialValuesChanged()) {\n      setState({ ...initialValues });\n    }\n  }, [areInitialValuesChanged, initialValues]);\n\n  const resetForm = useCallback(() => {\n    hasAnyFieldChangedRef.current = false;\n    setState(() => initialValues);\n    // @ts-ignore\n  }, [initialValues]);\n\n  useEffect(\n    () => {\n      return resetForm;\n    },\n    // eslint-disable-next-line\n    []\n  );\n\n  const onChange = useCallback(\n    (eventData: any) => {\n      const { name, value } = eventData;\n      setState({ ...state, [name]: value });\n    },\n    [state]\n  );\n\n  return { state, onChange, resetForm };\n};\n\nexport default useFormManager;\n","import React, { memo, useCallback } from \"react\";\nimport { InputTextProps } from \"./interface\";\nimport { useTranslation } from 'react-i18next';\nimport { Input, FormLabel, Flex } from '@chakra-ui/react'\n\nconst InputText = ({\n    disabled,\n    value,\n    name,\n    Label = \"\",\n    onChange,\n    width = \"200px\",\n    type = \"text\",\n    placeHolder,\n    padding,\n    margin = \"10px\",\n    className = \"\",\n    required = false\n}: InputTextProps) => {\n    const { t } = useTranslation()\n\n    const handleChange = useCallback((event: { target: { value: string; }; }) => {\n        onChange({ name: name, value: event.target.value })\n    }, [name, onChange])\n\n    return (\n        <>\n            <Flex\n                direction=\"column\"\n                width={width}\n                padding={padding}\n                margin={margin}\n            >\n                <FormLabel>{t(Label)}</FormLabel>\n                <Input\n                    placeholder={placeHolder}\n                    size='md'\n                    isDisabled={disabled}\n                    isRequired={required}\n                    onChange={handleChange}\n                    width=\"100%\"\n                    className={className}\n                    value={value}\n                    type={type}\n                />\n            </Flex>\n        </>\n    )\n}\n\nexport default memo(InputText)","export const columns = [\n        {\n            title: \"dt\",\n            dataIndex: \"date\",\n            width: \"13%\"\n        },\n        {\n            title: \"amnt\",\n            dataIndex: \"amount\",\n            width: \"13%\"\n        },\n        {\n            title: \"crdt\",\n            dataIndex: \"credit\",\n            width: \"15%\"\n        },\n        {\n            title: \"dbt\",\n            dataIndex: \"debit\",\n            width: \"15%\"\n        },\n        {\n            title: \"blnc\",\n            dataIndex: \"balance\",\n            width: \"15%\"\n        },\n        {\n            title: \"dscrptn\",\n            dataIndex: \"description\",\n            width: \"25%\"\n        },\n    ]","import React, { memo } from \"react\";\nimport Flex from \"@commons/flex\";\nimport InputText from \"@commons/input-text/src/inputText\";\nimport { SelectWithApi } from \"@commons/select\";\nimport { TableWithApi } from \"@commons/table\";\nimport { columns } from \"./constant\";\nimport { useFormManager } from \"@commons/hooks\";\n\nconst SupplierSummaryPage = () => {\n    const { state, onChange } = useFormManager({ initialValues: { date_from: \"\", date_to: \"\", supplier_id: \"\" } })\n    return (\n        <>\n            <Flex width=\"100%\" flexDirection=\"column\">\n                <Flex width=\"100%\" >\n                    <SelectWithApi\n                        Label=\"splr\"\n                        fetchOnFirstRun\n                        name=\"supplier_id\"\n                        value={state.supplier_id}\n                        onChange={onChange}\n                        Api=\"QUERY_SUPPLIER_LIST\"\n                    />\n                    <InputText\n                        name=\"date_from\"\n                        type=\"date\"\n                        Label=\"frm\"\n                        onChange={onChange}\n                    />\n                    <InputText\n                        name=\"date_to\"\n                        type=\"date\"\n                        Label=\"to\"\n                        onChange={onChange}\n                    />\n                </Flex>\n                <TableWithApi\n                    api={\"\"}\n                    columns={columns}\n                    hideTools={true}\n                    rowKey={\"rowKey\"}\n                    params={{\n                        supplier_id: state.supplier_id,\n                        date_from: state.date_from,\n                        date_to: state.date_to\n                    }}\n                    fetchOnFirstRun\n                />\n            </Flex>\n        </>\n    )\n}\n\nexport default memo(SupplierSummaryPage)","// src/select-field.tsx\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport { chakra, forwardRef } from \"@chakra-ui/system\";\nimport { jsx, jsxs } from \"react/jsx-runtime\";\nvar SelectField = forwardRef(\n  function SelectField2(props, ref) {\n    const { children, placeholder, className, ...rest } = props;\n    return /* @__PURE__ */ jsxs(\n      chakra.select,\n      {\n        ...rest,\n        ref,\n        className: cx(\"chakra-select\", className),\n        children: [\n          placeholder && /* @__PURE__ */ jsx(\"option\", { value: \"\", children: placeholder }),\n          children\n        ]\n      }\n    );\n  }\n);\nSelectField.displayName = \"SelectField\";\n\nexport {\n  SelectField\n};\n","import {\n  SelectField\n} from \"./chunk-HQIEHZYI.mjs\";\n\n// src/select.tsx\nimport { useFormControl } from \"@chakra-ui/form-control\";\nimport {\n  chakra,\n  forwardRef,\n  layoutPropNames,\n  omitThemingProps,\n  useMultiStyleConfig\n} from \"@chakra-ui/system\";\nimport { dataAttr } from \"@chakra-ui/shared-utils\";\n\n// ../../utilities/object-utils/src/index.ts\nfunction split(object, keys) {\n  const picked = {};\n  const omitted = {};\n  for (const [key, value] of Object.entries(object)) {\n    if (keys.includes(key))\n      picked[key] = value;\n    else\n      omitted[key] = value;\n  }\n  return [picked, omitted];\n}\n\n// src/select.tsx\nimport { cloneElement, isValidElement } from \"react\";\nimport { jsx, jsxs } from \"react/jsx-runtime\";\nvar Select = forwardRef((props, ref) => {\n  var _a;\n  const styles = useMultiStyleConfig(\"Select\", props);\n  const {\n    rootProps,\n    placeholder,\n    icon,\n    color,\n    height,\n    h,\n    minH,\n    minHeight,\n    iconColor,\n    iconSize,\n    ...rest\n  } = omitThemingProps(props);\n  const [layoutProps, otherProps] = split(rest, layoutPropNames);\n  const ownProps = useFormControl(otherProps);\n  const rootStyles = {\n    width: \"100%\",\n    height: \"fit-content\",\n    position: \"relative\",\n    color\n  };\n  const fieldStyles = {\n    paddingEnd: \"2rem\",\n    ...styles.field,\n    _focus: {\n      zIndex: \"unset\",\n      ...(_a = styles.field) == null ? void 0 : _a[\"_focus\"]\n    }\n  };\n  return /* @__PURE__ */ jsxs(\n    chakra.div,\n    {\n      className: \"chakra-select__wrapper\",\n      __css: rootStyles,\n      ...layoutProps,\n      ...rootProps,\n      children: [\n        /* @__PURE__ */ jsx(\n          SelectField,\n          {\n            ref,\n            height: h != null ? h : height,\n            minH: minH != null ? minH : minHeight,\n            placeholder,\n            ...ownProps,\n            __css: fieldStyles,\n            children: props.children\n          }\n        ),\n        /* @__PURE__ */ jsx(\n          SelectIcon,\n          {\n            \"data-disabled\": dataAttr(ownProps.disabled),\n            ...(iconColor || color) && { color: iconColor || color },\n            __css: styles.icon,\n            ...iconSize && { fontSize: iconSize },\n            children: icon\n          }\n        )\n      ]\n    }\n  );\n});\nSelect.displayName = \"Select\";\nvar DefaultIcon = (props) => /* @__PURE__ */ jsx(\"svg\", { viewBox: \"0 0 24 24\", ...props, children: /* @__PURE__ */ jsx(\n  \"path\",\n  {\n    fill: \"currentColor\",\n    d: \"M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z\"\n  }\n) });\nvar IconWrapper = chakra(\"div\", {\n  baseStyle: {\n    position: \"absolute\",\n    display: \"inline-flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    pointerEvents: \"none\",\n    top: \"50%\",\n    transform: \"translateY(-50%)\"\n  }\n});\nvar SelectIcon = (props) => {\n  const { children = /* @__PURE__ */ jsx(DefaultIcon, {}), ...rest } = props;\n  const clone = cloneElement(children, {\n    role: \"presentation\",\n    className: \"chakra-select__icon\",\n    focusable: false,\n    \"aria-hidden\": true,\n    style: {\n      width: \"1em\",\n      height: \"1em\",\n      color: \"currentColor\"\n    }\n  });\n  return /* @__PURE__ */ jsx(IconWrapper, { ...rest, className: \"chakra-select__icon-wrapper\", children: isValidElement(children) ? clone : null });\n};\nSelectIcon.displayName = \"SelectIcon\";\n\nexport {\n  Select,\n  DefaultIcon\n};\n"],"names":["Select","width","Options","label","value","onChange","Label","name","withLabel","margin","padding","placeholder","t","useTranslation","direction","fontSize","as","event","Array","isArray","map","option","target","Option","selected","disabled","memo","SelectWithApi","Api","params","fetchOnFirstRun","data","useFetch","link","ref","useRef","useEffect","current","initialValues","useState","state","setState","hasAnyFieldChangedRef","preValues","usePrevious","areInitialValuesChanged","useCallback","Object","is","JSON","stringify","resetForm","eventData","InputText","type","placeHolder","className","required","handleChange","I","size","isDisabled","isRequired","columns","title","dataIndex","SupplierSummaryPage","useFormManager","date_from","date_to","supplier_id","flexDirection","api","hideTools","rowKey","SelectField","forwardRef","props","children","rest","jsxs","chakra","cx","jsx","displayName","_a","styles","useMultiStyleConfig","omitThemingProps","rootProps","icon","color","height","h","minH","minHeight","iconColor","iconSize","object","keys","picked","omitted","entries","key","includes","split","layoutPropNames","layoutProps","otherProps","ownProps","useFormControl","rootStyles","position","fieldStyles","paddingEnd","field","_focus","zIndex","__css","SelectIcon","dataAttr","DefaultIcon","viewBox","fill","d","IconWrapper","baseStyle","display","alignItems","justifyContent","pointerEvents","top","transform","clone","cloneElement","role","focusable","style","isValidElement"],"sourceRoot":""}