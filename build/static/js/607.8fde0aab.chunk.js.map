{"version":3,"file":"static/js/607.8fde0aab.chunk.js","mappings":"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","sources":["../common/Select/src/select.tsx","../common/Select/src/selectWithApi.tsx","../common/hooks/src/usePrevious.ts","../common/hooks/src/useFormManager.ts","../common/input-text/src/inputText.tsx","../pages/users-page/src/Partials/ModalView.tsx","../pages/users-page/src/constants.ts","../pages/users-page/src/component.tsx"],"sourcesContent":["import React, { memo } from \"react\";\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Select as ChakraSelect, FormLabel, Flex } from '@chakra-ui/react';\r\nimport { SelectProps } from \"./interface\";\r\n\r\nconst Select = ({\r\n    width = \"200px\",\r\n    Options = [{\r\n        label: \"\",\r\n        value: 0\r\n    }],\r\n    onChange,\r\n    Label,\r\n    value = 0,\r\n    name,\r\n    withLabel = false,\r\n    margin = \"10px\",\r\n    padding,\r\n    placeholder = \"Select\",\r\n    selectLabelName = \"label_select\",\r\n}: SelectProps) => {\r\n    const { t } = useTranslation()\r\n    //@ts-ignore\r\n    const handleValue = (event) => {\r\n        if (Array.isArray(Options)) {\r\n            Options.map((option) => {\r\n                if (option.value === +event.target.value) {\r\n                    if (withLabel) {\r\n                        onChange({ value: option.value, selectLabelName: selectLabelName, label: option.label, name: name })\r\n                    } else {\r\n                        onChange({ value: option.value, name: name })\r\n                    }\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Flex\r\n                direction=\"column\"\r\n                width={width}\r\n                padding={padding}\r\n                margin={margin}\r\n            >\r\n                <FormLabel fontSize='md' as=\"b\" margin=\"0 0 5px\">{t(Label)}</FormLabel>\r\n                <ChakraSelect\r\n                    placeholder={t(placeholder)}\r\n                    onChange={handleValue}\r\n                >\r\n                    {Array.isArray(Options) ? Options.map((Option) => {\r\n                        return (\r\n                            <option key={Option.value} value={Option.value} selected={value === Option.value && true}> {t(Option.label)}</option>\r\n                        )\r\n                    }) : <option disabled>{t(\"No data\")}</option>}\r\n                </ChakraSelect>\r\n            </Flex>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default memo(Select)","import React, { memo } from \"react\";\r\nimport Select from \"./select\";\r\nimport { useFetch } from \"@commons/hooks\"\r\nimport { SelectWithApiProps } from \"./interface\"\r\n\r\nconst SelectWithApi = ({\r\n    width,\r\n    Api,\r\n    onChange,\r\n    Label,\r\n    name = \"\",\r\n    value = 0,\r\n    withLabel = false,\r\n    padding,\r\n    margin,\r\n    params,\r\n    fetchOnFirstRun = false,\r\n    selectLabelName = \"label_select\"\r\n}: SelectWithApiProps) => {\r\n\r\n    const { data } = useFetch({\r\n        link: Api,\r\n        fetchOnFirstRun: fetchOnFirstRun,\r\n        params: params\r\n    })\r\n\r\n    return (\r\n        <>\r\n            <Select\r\n                Options={data}\r\n                onChange={onChange}\r\n                Label={Label}\r\n                value={value}\r\n                name={name}\r\n                width={width}\r\n                withLabel={withLabel}\r\n                margin={margin}\r\n                padding={padding}\r\n                selectLabelName={selectLabelName}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default memo(SelectWithApi);","import { useRef, useEffect } from \"react\";\r\n\r\nconst usePrevious = <T>(value: T): T => {\r\n  const ref = useRef<T>();\r\n\r\n  useEffect(() => {\r\n    ref.current = value;\r\n  });\r\n\r\n  return ref.current as T;\r\n};\r\n\r\nexport default usePrevious;\r\n","import { useState, useCallback, useEffect, useRef } from \"react\";\r\nimport usePrevious from \"./usePrevious\";\r\n\r\ninterface useFormManagerProps {\r\n  initialValues?: any;\r\n  setSelectedRow?: any;\r\n  tableModal?: boolean;\r\n}\r\n\r\nconst useFormManager = ({ initialValues }: useFormManagerProps) => {\r\n  const [state, setState] = useState<typeof initialValues>(initialValues);\r\n\r\n  const hasAnyFieldChangedRef = useRef(false);\r\n  const preValues = usePrevious(initialValues);\r\n\r\n  const areInitialValuesChanged = useCallback(\r\n    () => !Object.is(JSON.stringify(preValues), JSON.stringify(initialValues)),\r\n    [initialValues, preValues]\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (areInitialValuesChanged()) {\r\n      setState({ ...initialValues });\r\n    }\r\n  }, [areInitialValuesChanged, initialValues]);\r\n\r\n  const resetForm = useCallback(() => {\r\n    hasAnyFieldChangedRef.current = false;\r\n    setState(() => initialValues);\r\n    // @ts-ignore\r\n  }, [initialValues]);\r\n\r\n  useEffect(\r\n    () => {\r\n      return resetForm;\r\n    },\r\n    // eslint-disable-next-line\r\n    []\r\n  );\r\n\r\n  const onChange = useCallback(\r\n    (eventData: any) => {\r\n      const { name, value } = eventData;\r\n      setState({ ...state, [name]: value });\r\n    },\r\n    [state]\r\n  );\r\n\r\n  const handleRootState = useCallback((e: any) => {\r\n    setState(e);\r\n  }, []);\r\n\r\n  const handleSelectWithLabelChange = useCallback(\r\n    (eventData: any) => {\r\n      setState({\r\n        ...state,\r\n        [eventData.name]: eventData.value,\r\n        [eventData.selectLabelName]: eventData.label,\r\n      });\r\n    },\r\n    [state]\r\n  );\r\n\r\n  const handleArrayChange = useCallback(\r\n    ({ name, value }: any) => {\r\n      setState({ ...state, [name]: [...state[name], value] });\r\n    },\r\n    [state]\r\n  );\r\n\r\n  return {\r\n    state,\r\n    onChange,\r\n    resetForm,\r\n    handleRootState,\r\n    handleSelectWithLabelChange,\r\n    handleArrayChange,\r\n  };\r\n};\r\n\r\nexport default useFormManager;\r\n","import React, { memo, useCallback } from \"react\";\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Input, FormLabel, Flex } from '@chakra-ui/react'\r\nimport { InputTextProps } from \"./interface\";\r\n\r\nconst InputText = ({\r\n    disabled,\r\n    value,\r\n    name,\r\n    Label = \"\",\r\n    onChange,\r\n    width = \"200px\",\r\n    type = \"text\",\r\n    placeHolder,\r\n    padding,\r\n    margin = \"10px\",\r\n    className = \"\",\r\n    required = false\r\n}: InputTextProps) => {\r\n    const { t } = useTranslation()\r\n\r\n    const handleChange = useCallback((event: { target: { value: string; }; }) => {\r\n        onChange({ name: name, value: event.target.value })\r\n    }, [name, onChange])\r\n\r\n    return (\r\n        <>\r\n            <Flex\r\n                direction=\"column\"\r\n                width={width}\r\n                padding={padding}\r\n                margin={margin}\r\n            >\r\n                <FormLabel>{t(Label)}</FormLabel>\r\n                <Input\r\n                    placeholder={placeHolder}\r\n                    size='md'\r\n                    isDisabled={disabled}\r\n                    isRequired={required}\r\n                    onChange={handleChange}\r\n                    width=\"100%\"\r\n                    className={className}\r\n                    value={value}\r\n                    type={type}\r\n                />\r\n            </Flex>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default memo(InputText)","import React, { memo, useCallback } from 'react';\r\nimport { InputText } from \"@commons/input-text\";\r\nimport { useFormManager } from '@commons/hooks';\r\nimport { ModalViewProp } from \"@commons/global\"\r\nimport { SelectWithApi } from '@commons/select/src';\r\nimport { useTableControlsButtons } from \"@commons/table\";\r\nimport { Button } from \"@commons/button\"\r\n\r\nconst ModalView = ({\r\n    onClose,\r\n    selectedRow,\r\n    refreshTable\r\n}: ModalViewProp) => {\r\n    const {\r\n        state,\r\n        onChange,\r\n    }\r\n        = useFormManager({\r\n            initialValues: {\r\n                ...selectedRow\r\n            }\r\n        })\r\n    const { onSaveAndInsertion } = useTableControlsButtons({ api: \"POST_CUSTOMER_TABLE_DATA\", runFetch: refreshTable })\r\n    const { customer_id, password, confirm_password, user_name, first_name, last_name, user_role, query_status } = state;\r\n\r\n    const handleSave = useCallback(() => {\r\n        const record = {\r\n            user_name,\r\n            first_name,\r\n            last_name,\r\n            user_role,\r\n            customer_id,\r\n            query_status,\r\n            password,\r\n            confirm_password\r\n        }\r\n        onSaveAndInsertion(record)\r\n        onClose()\r\n    }, [user_name, first_name, last_name, user_role, customer_id, query_status, password, confirm_password, onSaveAndInsertion, onClose])\r\n\r\n    return (\r\n        <>\r\n            <InputText\r\n                name=\"user_name\"\r\n                Label='user_name'\r\n                onChange={onChange}\r\n                value={user_name}\r\n                width=\"47%\"\r\n            />\r\n            <InputText\r\n                name=\"first_name\"\r\n                Label='first_name'\r\n                onChange={onChange}\r\n                value={first_name}\r\n                width=\"47%\"\r\n            />\r\n            <InputText\r\n                name=\"last_name\"\r\n                Label='last_name'\r\n                onChange={onChange}\r\n                value={last_name}\r\n                width=\"47%\"\r\n            />\r\n            <SelectWithApi\r\n                Api=\"\"\r\n                name=\"user_role\"\r\n                Label='user_role'\r\n                onChange={onChange}\r\n                value={user_role}\r\n                width=\"47%\"\r\n            />\r\n            <InputText\r\n                name=\"password\"\r\n                Label='password'\r\n                onChange={onChange}\r\n                value={password}\r\n                width=\"47%\"\r\n                type='password'\r\n            />\r\n            <InputText\r\n                name=\"confirm_password\"\r\n                Label='confirm_password'\r\n                onChange={onChange}\r\n                value={confirm_password}\r\n                width=\"47%\"\r\n                type='password'\r\n            />\r\n            <Button\r\n                onClick={handleSave}\r\n                label=\"sv\"\r\n            />\r\n        </>\r\n    )\r\n};\r\n\r\nexport default memo(ModalView)","export const columns = [\r\n  {\r\n    title: \"user_name\",\r\n    dataIndex: \"user_name\",\r\n    width: \"20%\",\r\n  },\r\n  {\r\n    title: \"first_name\",\r\n    dataIndex: \"first_name\",\r\n    width: \"17%\",\r\n  },\r\n  {\r\n    title: \"last_name\",\r\n    dataIndex: \"last_name\",\r\n    width: \"17%\",\r\n  },\r\n  {\r\n    title: \"user_role\",\r\n    dataIndex: \"user_role\",\r\n    width: \"17%\",\r\n  },\r\n  {\r\n    title: \"created_at\",\r\n    dataIndex: \"created_at\",\r\n    width: \"20%\",\r\n  },\r\n  {\r\n    title: \"updated_at\",\r\n    dataIndex: \"updated_at\",\r\n    width: \"20%\",\r\n  },\r\n];\r\n","import React, { memo } from 'react';\r\nimport ModalView from \"./Partials/ModalView\";\r\nimport { TableWithApi } from \"@commons/table\";\r\nimport { columns } from \"./constants\"\r\nconst UsersPage = () => {\r\n    return (\r\n        <>\r\n            <>\r\n                <TableWithApi\r\n                    api={\"QUERY_USERS_TABLE_DATA\"}\r\n                    postApi={\"POST_USERS_TABLE_DATA\"}\r\n                    columns={columns}\r\n                    hideTools={false}\r\n                    canEdit={true}\r\n                    canAdd={true}\r\n                    canDelete={true}\r\n                    canExcel\r\n                    rowKey={\"user_id\"}\r\n                    ModalContent={ModalView}\r\n                    fetchOnFirstRun\r\n                />\r\n            </>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default memo(UsersPage)"],"names":["Select","_ref","_ref$width","width","_ref$Options","Options","label","value","onChange","Label","_ref$value","name","_ref$withLabel","withLabel","_ref$margin","margin","padding","_ref$placeholder","placeholder","_ref$selectLabelName","selectLabelName","t","useTranslation","_jsx","_Fragment","children","_jsxs","Flex","direction","FormLabel","fontSize","as","ChakraSelect","event","Array","isArray","map","option","target","Option","selected","disabled","memo","SelectWithApi","Api","_ref$name","params","_ref$fetchOnFirstRun","fetchOnFirstRun","data","useFetch","link","ref","useRef","useEffect","current","initialValues","_useState","useState","_useState2","_slicedToArray","state","setState","hasAnyFieldChangedRef","preValues","usePrevious","areInitialValuesChanged","useCallback","Object","is","JSON","stringify","_objectSpread","resetForm","eventData","_defineProperty","handleRootState","e","handleSelectWithLabelChange","_objectSpread3","handleArrayChange","_ref2","concat","_toConsumableArray","InputText","_ref$Label","_ref$type","type","placeHolder","_ref$className","className","_ref$required","required","handleChange","Input","size","isDisabled","isRequired","ModalView","onClose","selectedRow","refreshTable","_useFormManager","useFormManager","onSaveAndInsertion","useTableControlsButtons","api","runFetch","customer_id","password","confirm_password","user_name","first_name","last_name","user_role","query_status","handleSave","Button","onClick","columns","title","dataIndex","UsersPage","TableWithApi","postApi","hideTools","canEdit","canAdd","canDelete","canExcel","rowKey","ModalContent"],"sourceRoot":""}