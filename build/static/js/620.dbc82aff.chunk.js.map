{"version":3,"file":"static/js/620.dbc82aff.chunk.js","mappings":"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","sources":["../common/button/src/saveButton.tsx","../common/hooks/src/usePrevious.ts","../common/hooks/src/useFormManager.ts","../common/input-text/src/inputText.tsx","../pages/customers-page/src/Partials/ModalView.tsx","../pages/customers-page/src/constants.ts","../pages/customers-page/src/component.tsx"],"sourcesContent":["import React, { memo } from \"react\";\nimport { Button } from '@chakra-ui/react';\nimport { useTranslation } from 'react-i18next';\nimport { saveButtonProp } from \"./interface\"\n\nconst SaveButton = ({\n    saveTitle = 'sv',\n    onOK,\n    disabled,\n    width = \"10%\",\n    margin = \"5px\",\n    padding,\n}: saveButtonProp) => {\n    const { t } = useTranslation()\n    return (\n        <>\n            <Button colorScheme='blue' onClick={onOK} disabled={disabled} style={{\n                width: width,\n                margin: margin,\n                padding: padding\n            }} >{t(saveTitle)}</Button>\n        </>\n    )\n}\n\nexport default memo(SaveButton)","import { useRef, useEffect } from \"react\";\n\nconst usePrevious = <T>(value: T): T => {\n  const ref = useRef<T>();\n\n  useEffect(() => {\n    ref.current = value;\n  });\n\n  return ref.current as T;\n};\n\nexport default usePrevious;\n","import { useState, useCallback, useEffect, useRef } from \"react\";\nimport usePrevious from \"./usePrevious\";\n\ninterface useFormManagerProps {\n  initialValues?: any;\n  setSelectedRow?: any;\n  tableModal?: boolean;\n}\n\nconst useFormManager = ({ initialValues }: useFormManagerProps) => {\n  const [state, setState] = useState<typeof initialValues>(initialValues);\n\n  const hasAnyFieldChangedRef = useRef(false);\n  const preValues = usePrevious(initialValues);\n\n  const areInitialValuesChanged = useCallback(\n    () => !Object.is(JSON.stringify(preValues), JSON.stringify(initialValues)),\n    [initialValues, preValues]\n  );\n\n  useEffect(() => {\n    if (areInitialValuesChanged()) {\n      setState({ ...initialValues });\n    }\n  }, [areInitialValuesChanged, initialValues]);\n\n  const resetForm = useCallback(() => {\n    hasAnyFieldChangedRef.current = false;\n    setState(() => initialValues);\n    // @ts-ignore\n  }, [initialValues]);\n\n  useEffect(\n    () => {\n      return resetForm;\n    },\n    // eslint-disable-next-line\n    []\n  );\n\n  const onChange = useCallback(\n    (eventData: any) => {\n      const { name, value } = eventData;\n      setState({ ...state, [name]: value });\n    },\n    [state]\n  );\n\n  return { state, onChange, resetForm };\n};\n\nexport default useFormManager;\n","import React, { memo, useCallback } from \"react\";\nimport { InputTextProps } from \"./interface\";\nimport { useTranslation } from 'react-i18next';\nimport { Input, FormLabel, Flex } from '@chakra-ui/react'\n\nconst InputText = ({\n    disabled,\n    value,\n    name,\n    Label = \"\",\n    onChange,\n    width = \"200px\",\n    type = \"text\",\n    placeHolder,\n    padding,\n    margin = \"10px\",\n    className = \"\",\n    required = false\n}: InputTextProps) => {\n    const { t } = useTranslation()\n\n    const handleChange = useCallback((event: { target: { value: string; }; }) => {\n        onChange({ name: name, value: event.target.value })\n    }, [name, onChange])\n\n    return (\n        <>\n            <Flex\n                direction=\"column\"\n                width={width}\n                padding={padding}\n                margin={margin}\n            >\n                <FormLabel>{t(Label)}</FormLabel>\n                <Input\n                    placeholder={placeHolder}\n                    size='md'\n                    isDisabled={disabled}\n                    isRequired={required}\n                    onChange={handleChange}\n                    width=\"100%\"\n                    className={className}\n                    value={value}\n                    type={type}\n                />\n            </Flex>\n        </>\n    )\n}\n\nexport default memo(InputText)","import React, { memo, useCallback } from 'react';\r\nimport { InputText } from \"@commons/input-text\";\r\nimport { useFormManager } from '@commons/hooks';\r\nimport { ModalViewProp } from \"@commons/global\"\r\nimport { useTableControlsButtons } from \"@commons/table\";\r\nimport { SaveButton } from \"@commons/button\"\r\n\r\nconst ModalView = ({\r\n    onClose,\r\n    selectedRow,\r\n    refreshTable\r\n}: ModalViewProp) => {\r\n    const {\r\n        state,\r\n        onChange,\r\n    }\r\n        = useFormManager({\r\n            initialValues: {\r\n                ...selectedRow\r\n            }\r\n        })\r\n    const { onSaveAndInsertion } = useTableControlsButtons({ api: \"POST_CUSTOMER_TABLE_DATA\", runFetch: refreshTable })\r\n    const { customer_id, customer_name, email, phone, address, query_status } = state;\r\n\r\n    const handleSave = useCallback(() => {\r\n        const record = {\r\n            customer_name,\r\n            email,\r\n            phone,\r\n            address,\r\n            customer_id,\r\n            query_status\r\n        }\r\n        onSaveAndInsertion(record)\r\n        onClose()\r\n    }, [address, email, onClose, onSaveAndInsertion, phone, query_status, customer_id, customer_name])\r\n\r\n    return (\r\n        <>\r\n            <InputText\r\n                name=\"customer_name\"\r\n                Label='Name'\r\n                onChange={onChange}\r\n                value={customer_name}\r\n                width=\"47%\"\r\n            />\r\n            <InputText\r\n                name=\"email\"\r\n                Label='Email'\r\n                onChange={onChange}\r\n                value={email}\r\n                width=\"47%\"\r\n            />\r\n            <InputText\r\n                name=\"phone\"\r\n                Label='Phone'\r\n                onChange={onChange}\r\n                value={phone}\r\n                width=\"47%\"\r\n            />\r\n            <InputText\r\n                name=\"address\"\r\n                Label='Address'\r\n                onChange={onChange}\r\n                value={address}\r\n                width=\"100%\"\r\n            />\r\n            <SaveButton\r\n                onOK={handleSave}\r\n            />\r\n        </>\r\n    )\r\n};\r\n\r\nexport default memo(ModalView)","export const columns = [\r\n  {\r\n    title: \"nm\",\r\n    dataIndex: \"customer_name\",\r\n    width: \"20%\",\r\n  },\r\n  {\r\n    title: \"eml\",\r\n    dataIndex: \"email\",\r\n    width: \"17%\",\r\n  },\r\n  {\r\n    title: \"phn\",\r\n    dataIndex: \"phone\",\r\n    width: \"17%\",\r\n  },\r\n  {\r\n    title: \"adrs\",\r\n    dataIndex: \"address\",\r\n    width: \"17%\",\r\n  },\r\n  {\r\n    title: \"created_at\",\r\n    dataIndex: \"created_at\",\r\n    width: \"20%\",\r\n  },\r\n  {\r\n    title: \"updated_at\",\r\n    dataIndex: \"updated_at\",\r\n    width: \"20%\",\r\n  },\r\n];\r\n","import React, { memo } from 'react';\r\nimport ModalView from \"./Partials/ModalView\";\r\nimport { TableWithApi } from \"@commons/table\";\r\nimport { columns } from \"./constants\"\r\n\r\nconst Customers = () => {\r\n    return (\r\n        <>\r\n            <TableWithApi\r\n                api={\"QUERY_CUSTOMER_TABLE_DATA\"}\r\n                postApi={\"POST_CUSTOMER_TABLE_DATA\"}\r\n                columns={columns}\r\n                hideTools={false}\r\n                canEdit={true}\r\n                canAdd={true}\r\n                canDelete={true}\r\n                rowKey={\"customer_id\"}\r\n                ModalContent={ModalView}\r\n                fetchOnFirstRun\r\n            />\r\n        </>\r\n    )\r\n\r\n};\r\n\r\nexport default memo(Customers);\r\n"],"names":["SaveButton","saveTitle","onOK","disabled","width","margin","padding","t","useTranslation","colorScheme","onClick","style","memo","value","ref","useRef","useEffect","current","initialValues","useState","state","setState","hasAnyFieldChangedRef","preValues","usePrevious","areInitialValuesChanged","useCallback","Object","is","JSON","stringify","resetForm","onChange","eventData","name","InputText","Label","type","placeHolder","className","required","handleChange","event","target","direction","I","placeholder","size","isDisabled","isRequired","ModalView","onClose","selectedRow","refreshTable","useFormManager","onSaveAndInsertion","useTableControlsButtons","api","runFetch","customer_id","customer_name","email","phone","address","query_status","handleSave","columns","title","dataIndex","Customers","postApi","hideTools","canEdit","canAdd","canDelete","rowKey","ModalContent","fetchOnFirstRun"],"sourceRoot":""}