{"version":3,"file":"static/js/671.cf536532.chunk.js","mappings":"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","sources":["../common/pdf-viewer/src/hooks/usePdfViewerControl.ts","../common/pdf-viewer/src/index.tsx","../common/confirmation-modal/src/index.tsx","../common/TableView/src/ApiTable.tsx","../common/TableView/src/hooks/useTableControlsButtons.ts","../common/button/src/saveButton.tsx","../common/floating-label/src/styled.ts","../common/floating-label/src/index.tsx","../common/hooks/src/usePrevious.ts","../common/hooks/src/useFormManager.ts","../common/hooks/src/useMutation.ts","../common/hooks/src/useValidateForm.ts","../common/input-text/src/styled.ts","../common/input-text/src/inputText.tsx","../common/modal/src/style.ts","../common/modal/src/index.tsx","../pages/customers-page/src/Partials/ModalView.tsx","../pages/customers-page/src/constants.ts","../pages/customers-page/src/component.tsx"],"sourcesContent":["import { useRef, useCallback } from \"react\";\r\n\r\nconst usePdfViewerControl = ()=>{\r\n\r\n    const PDFRef = useRef()\r\n\r\n    const handleOpenModal = useCallback(async () =>\r\n    //@ts-ignore\r\n    await PDFRef.current?.handleOpen(),\r\n  [PDFRef])\r\n\r\n    return {\r\n        PDFRef,\r\n        handleOpenModal\r\n    }\r\n}\r\n\r\nexport default usePdfViewerControl","import React, {memo, useImperativeHandle, forwardRef, useState, useCallback} from \"react\";\r\nimport Modal from \"@commons/modal\";\r\n\r\n//TODO: implement pdf viewer type\r\nconst PdfViewer = ({\r\n        reportName,\r\n        params\r\n    }:any,\r\n    ref: any\r\n    ) => {\r\n\r\n        const [visible, setVisible] = useState(false);\r\n        \r\n        const handleOpen = useCallback(()=>{\r\n            setVisible(true);\r\n        },[])\r\n\r\n        const handleClose = useCallback(()=>{\r\n            setVisible(false);\r\n        },[])\r\n\r\n        useImperativeHandle(ref, () => ({\r\n            handleOpen,\r\n            // setTableData: setData,\r\n            // resetTableData: resetData,\r\n            // getCurrentDataSource: data\r\n        }));\r\n\r\n        const computedUrl =`http://144.24.209.19:9090/system_pdf_generate/${reportName}?${new URLSearchParams(params)}`\r\n\r\n    return(\r\n        <Modal\r\n            label=\"PDF Viewer\"\r\n            visible={visible}\r\n            onClose={handleClose}\r\n            noFooter\r\n            width=\"90%\"\r\n            height=\"80%\"\r\n        >\r\n            <object data={computedUrl} width=\"100%\" height=\"100%\">\r\n          {`Your browser does not support pdf files.`}\r\n        </object>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default memo(forwardRef(PdfViewer))\r\nexport * from \"./interface\"\r\nexport {default as usePdfViewerControl} from \"./hooks/usePdfViewerControl\";\r\n","import React, { memo, useCallback } from \"react\";\r\nimport Modal from \"@commons/modal\";\r\nimport {confirmationModal} from \"./interface\"\r\n\r\nconst ConfirmationModal = ({visible, onClose, onConfirm, message}:confirmationModal) => {\r\n\r\n    const handleConfirmation = useCallback(() => {\r\n        onConfirm()\r\n        onClose()\r\n    },[onClose, onConfirm])\r\n\r\n    return (\r\n        <Modal \r\n            label=\"cnfrmtn\"\r\n            visible={visible}\r\n            onClose={onClose}\r\n            width=\"25%\"\r\n            onOK={handleConfirmation}\r\n            submitTitle=\"cnfrm\"\r\n        >\r\n            {message ? message : \"Are you want to continue ?\"}\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default memo(ConfirmationModal)\r\nexport * from \"./interface\"","import React,\r\n{\r\n    memo,\r\n    useState,\r\n    useCallback,\r\n    useImperativeHandle,\r\n    forwardRef,\r\n    useMemo\r\n} from \"react\";\r\nimport PdfViewer, { usePdfViewerControl } from \"@commons/pdf-viewer\";\r\nimport { useFetch, useEffectTimeOut } from \"@commons/hooks\"\r\nimport Modal from \"@commons/modal\";\r\nimport ConfirmationModal from \"@commons/confirmation-modal\"\r\nimport Table from \"./Table\";\r\nimport useTableControlsButtons from \"./hooks/useTableControlsButtons\";\r\nimport { TableWithApiProps } from \"./interface\"\r\n\r\n//TODO: change the ref type\r\n\r\nconst TableWithApi = ({\r\n    api,\r\n    postApi,\r\n    columns,\r\n    ModalContent,\r\n    onClick,\r\n    fetchOnFirstRun = false,\r\n    params,\r\n    checkForParams = false,\r\n    modalWidth = \"60%\",\r\n    printProps,\r\n    reportName,\r\n    ...tableProps\r\n}: TableWithApiProps,\r\n    ref: any\r\n) => {\r\n    const { data, runFetch, loading, setData, resetData } = useFetch({ link: api, fetchOnFirstRun: fetchOnFirstRun, params: params, checkForParams: checkForParams })\r\n    const { onSaveAndInsertion } = useTableControlsButtons({ api: postApi, runFetch: runFetch })\r\n    const { PDFRef, handleOpenModal } = usePdfViewerControl()\r\n    const [selectedRow, setSelectedRow] = useState({})\r\n    const [modal, setModal] = useState(false);\r\n    const [confirmModal, setConfirmModal] = useState(false);\r\n    const handleAdd = useCallback(() => {\r\n        setSelectedRow({ query_status: \"n\" })\r\n        setModal(true)\r\n    }, [setSelectedRow])\r\n    const handleEdit = useCallback(() => {\r\n        setSelectedRow({ ...selectedRow, query_status: \"u\" })\r\n        setModal(true)\r\n    }, [selectedRow, setSelectedRow])\r\n    const handleDelete = () => {\r\n        onSaveAndInsertion({ ...selectedRow, query_status: \"d\" })\r\n    }\r\n\r\n    const handleCloseModal = useCallback(() => {\r\n        setModal(false)\r\n    }, [])\r\n\r\n    const handleCloseConfirmModal = useCallback(() => { setConfirmModal(false) }, [])\r\n    const handleOpenConfirmModal = useCallback(() => { setConfirmModal(true) }, [])\r\n\r\n    const handleSelectedRow = (row: any) => {\r\n        setSelectedRow(row)\r\n        if (onClick) onClick(row)\r\n    };\r\n\r\n    const foundDataSource = useMemo(\r\n        () => data?.data,\r\n        [data?.data]\r\n    );\r\n\r\n    const handlePrint = useCallback(() => {\r\n        selectedRow && handleOpenModal()\r\n    }, [handleOpenModal, selectedRow])\r\n\r\n    useImperativeHandle(ref, () => ({\r\n        runFetch,\r\n        setTableData: setData,\r\n        resetTableData: resetData,\r\n        getCurrentDataSource: () => foundDataSource,\r\n    }));\r\n\r\n    // useEffectTimeOut(runFetch, 30000)\r\n\r\n    return (\r\n        <>\r\n            {ModalContent && <Modal\r\n                visible={modal}\r\n                onClose={handleCloseModal}\r\n                hideCloseButton\r\n                hideSaveButton\r\n                label=\"dtls\"\r\n                noFooter\r\n                width={modalWidth}\r\n            >\r\n                <ModalContent\r\n                    onClose={handleCloseModal}\r\n                    selectedRow={selectedRow}\r\n                    refreshTable={runFetch}\r\n                />\r\n            </Modal>\r\n            }\r\n            <ConfirmationModal\r\n                visible={confirmModal}\r\n                onConfirm={handleDelete}\r\n                onClose={handleCloseConfirmModal}\r\n            />\r\n            <PdfViewer\r\n                ref={PDFRef}\r\n                reportName={reportName}\r\n                params={printProps}\r\n            />\r\n            <Table\r\n                dataSource={data?.data}\r\n                columns={columns}\r\n                onAdd={handleAdd}\r\n                onEdit={handleEdit}\r\n                onPrint={handlePrint}\r\n                onDelete={handleOpenConfirmModal}\r\n                onSelectedRow={handleSelectedRow}\r\n                loading={loading}\r\n                {...tableProps}\r\n            >\r\n            </Table>\r\n\r\n        </>\r\n    )\r\n}\r\nexport default memo(forwardRef(TableWithApi))","import { useCallback } from \"react\";\r\nimport { useMutation } from \"@commons/hooks\";\r\n\r\nconst useTableControlsButtons = ({ api = \"\", runFetch }: any) => {\r\n  const { setRow: newRecord } = useMutation({\r\n    link: api,\r\n    additionalFunctionToRun: runFetch,\r\n    method: \"POST\",\r\n  });\r\n  const { setRow: updateRecord } = useMutation({\r\n    link: api,\r\n    additionalFunctionToRun: runFetch,\r\n    method: \"PUT\",\r\n  });\r\n  const { setRow: deleteRecord } = useMutation({\r\n    link: api,\r\n    additionalFunctionToRun: runFetch,\r\n    method: \"Delete\",\r\n  });\r\n\r\n  const onSaveAndInsertion = useCallback(\r\n    (record: any) => {\r\n      if (record.query_status === \"n\") {\r\n        newRecord(record);\r\n      } else if (record.query_status === \"u\") {\r\n        updateRecord(record);\r\n      } else if (record.query_status === \"d\") {\r\n        deleteRecord(record);\r\n      }\r\n    },\r\n    [newRecord, updateRecord, deleteRecord]\r\n  );\r\n\r\n  return { onSaveAndInsertion };\r\n};\r\n\r\nexport default useTableControlsButtons;\r\n","import React, { memo } from \"react\";\r\nimport Button from \"./button\"\r\nimport { saveButtonProp } from \"./interface\"\r\n\r\nconst SaveButton = ({\r\n    onOK,\r\n    width = \"40%\",\r\n    label = \"sv\",\r\n    ...props\r\n}: saveButtonProp) => {\r\n    return (\r\n        <>\r\n            <Button onClick={onOK} label=\"sv\" width={width} {...props} />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default memo(SaveButton)","import styled from \"@emotion/styled\";\r\n\r\nexport const FloatingLabelContainer = styled.div<any>`\r\n  position: relative;\r\n  margin: ${({ margin }) => margin};\r\n  padding: ${({padding})=>padding ? padding : \"5px 0\"};\r\n  height: ${({ height }) => height};\r\n  width: ${({ width }) => width};\r\n`;\r\n\r\nexport const FloatingLabelLabel = styled.label<any>`\r\n  position: absolute;\r\n  top: ${({top})=>top ? top : \"5px\"};\r\n  left: 10px;\r\n  color: #999;\r\n  padding: 0;\r\n  margin: 0;\r\n  transition: top 0.3s, font-size 0.3s, background-color 0.5s;\r\n\r\n  ${({ hasContent }) =>\r\n    hasContent &&\r\n    `\r\n    top: -5px;\r\n    font-size: 12px;\r\n    color: #007bff;\r\n    font-size: 14px;\r\n    background-color: white;\r\n  `}\r\n`;\r\n","import React, { memo } from \"react\";\r\nimport { useTranslation } from 'react-i18next';\r\nimport { FloatingLabelContainer, FloatingLabelLabel } from \"./styled\"\r\nimport { floatingLabelProps } from \"./interface\";\r\n\r\nconst FloatingLabel = ({\r\n    hasContent,\r\n    name,\r\n    label = \"\",\r\n    height,\r\n    width = \"200px\",\r\n    padding,\r\n    margin,\r\n    children,\r\n    hidden,\r\n    top\r\n}: floatingLabelProps) => {\r\n\r\n    const { t } = useTranslation();\r\n    return (\r\n        <>\r\n            <FloatingLabelContainer\r\n            width={width}\r\n            height={height}\r\n            margin={margin}\r\n            padding={padding}\r\n            hidden={hidden}\r\n            >\r\n                {children}\r\n                <FloatingLabelLabel top={top} htmlFor={name} hasContent={hasContent}>\r\n                    {t(label)}\r\n                </FloatingLabelLabel>\r\n            </FloatingLabelContainer>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default memo(FloatingLabel)\r\nexport * from \"./interface\"","import { useRef, useEffect } from \"react\";\r\n\r\nconst usePrevious = <T>(value: T): T => {\r\n  const ref = useRef<T>();\r\n\r\n  useEffect(() => {\r\n    ref.current = value;\r\n  });\r\n\r\n  return ref.current as T;\r\n};\r\n\r\nexport default usePrevious;\r\n","import { useState, useCallback, useEffect, useRef } from \"react\";\r\nimport usePrevious from \"./usePrevious\";\r\n\r\ninterface useFormManagerProps {\r\n  initialValues?: any;\r\n}\r\n\r\nconst useFormManager = ({ initialValues }: useFormManagerProps) => {\r\n  const [state, setState] = useState<typeof initialValues>(initialValues);\r\n\r\n  const hasAnyFieldChangedRef = useRef(false);\r\n  const preValues = usePrevious(initialValues);\r\n\r\n  const areInitialValuesChanged = useCallback(\r\n    () => !Object.is(JSON.stringify(preValues), JSON.stringify(initialValues)),\r\n    [initialValues, preValues]\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (areInitialValuesChanged()) {\r\n      setState({ ...initialValues });\r\n    }\r\n  }, [areInitialValuesChanged, initialValues]);\r\n\r\n  const resetForm = useCallback(() => {\r\n    hasAnyFieldChangedRef.current = false;\r\n    setState(() => initialValues);\r\n    // @ts-ignore\r\n  }, [initialValues]);\r\n\r\n  useEffect(\r\n    () => {\r\n      return resetForm;\r\n    },\r\n    // eslint-disable-next-line\r\n    []\r\n  );\r\n\r\n  const onChange = useCallback(\r\n    (eventData: any) => {\r\n      const { name, value } = eventData;\r\n      setState({ ...state, [name]: value });\r\n    },\r\n    [state]\r\n  );\r\n\r\n  const handleMultiInput = useCallback((e:any)=>{\r\n    setState({\r\n      ...state,\r\n      ...e\r\n    })\r\n  },[state])\r\n\r\n  const handleSelectWithLabelChange = useCallback(\r\n    (eventData: any) => {\r\n      setState({\r\n        ...state,\r\n        [eventData.name]: eventData.value,\r\n        [eventData.selectLabelName]: eventData.label,\r\n      });\r\n    },\r\n    [state]\r\n  );\r\n\r\n  const handleArrayChange = useCallback(\r\n    ({ name, value }: any) => {\r\n      setState({ ...state, [name]: [...state[name], value] });\r\n    },\r\n    [state]\r\n  );\r\n\r\n  return {\r\n    state,\r\n    onChange,\r\n    resetForm,\r\n    handleRootState: setState,\r\n    handleSelectWithLabelChange,\r\n    handleArrayChange,\r\n    handleMultiInput\r\n  };\r\n};\r\n\r\nexport default useFormManager;\r\n","import { useState, useCallback } from \"react\";\r\nimport { useLocalStorage } from \"@commons/hooks\";\r\nimport { API_ID } from \"@commons/global\";\r\nimport { useToast } from \"@chakra-ui/react\";\r\n\r\ninterface useMutationProps {\r\n  link: string;\r\n  noAuthorization?: boolean;\r\n  additionalFunctionToRun?: () => void;\r\n  runOnSuccess?: () => void;\r\n  runOnFail?: () => void;\r\n  method?: string;\r\n}\r\ninterface successType {\r\n  response: string;\r\n}\r\n\r\nconst useMutation = ({\r\n  link = \"\",\r\n  noAuthorization = false,\r\n  additionalFunctionToRun,\r\n  runOnSuccess,\r\n  runOnFail,\r\n  method = \"POST\",\r\n}: useMutationProps) => {\r\n  const toast = useToast();\r\n  //@ts-ignore\r\n  const url = `http://144.24.209.19:9090/api/${API_ID[link]}`;\r\n  const [success, setSuccess] = useState<successType>();\r\n  const { authorization } = useLocalStorage();\r\n  const postData = useCallback(\r\n    async (dataToPost: any) => {\r\n      if (authorization || noAuthorization) {\r\n        const settings = {\r\n          method: method,\r\n          headers: {\r\n            Accept: \"application/json\",\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: `Bearer ${authorization}`,\r\n          },\r\n          body: JSON.stringify(dataToPost),\r\n        };\r\n        try {\r\n          const fetchResponse = await fetch(url, settings);\r\n          const data = await fetchResponse.json();\r\n          if (data.response === \"success\") {\r\n            toast({\r\n              position: \"top-right\",\r\n              title: \"Success\",\r\n              description: `${data.response}`,\r\n              status: \"success\",\r\n              duration: 5000,\r\n              isClosable: true,\r\n            });\r\n            if (runOnSuccess) runOnSuccess();\r\n          } else {\r\n            toast({\r\n              position: \"top-right\",\r\n              title: \"Error\",\r\n              description: `${data.message}`,\r\n              status: \"error\",\r\n              duration: 9000,\r\n              isClosable: true,\r\n            });\r\n            if (runOnFail) runOnFail();\r\n          }\r\n          setSuccess(data);\r\n          if (additionalFunctionToRun) {\r\n            additionalFunctionToRun();\r\n          }\r\n          return data;\r\n        } catch (e) {}\r\n      }\r\n    },\r\n    [\r\n      additionalFunctionToRun,\r\n      authorization,\r\n      method,\r\n      noAuthorization,\r\n      runOnFail,\r\n      runOnSuccess,\r\n      toast,\r\n      url,\r\n    ]\r\n  );\r\n\r\n  const setRow = useCallback(\r\n    (row: any) => {\r\n      postData(row);\r\n    },\r\n    [postData]\r\n  );\r\n\r\n  return { success, setRow };\r\n};\r\n\r\nexport default useMutation;\r\n","import { useCallback } from \"react\";\r\nimport { useToast } from \"@chakra-ui/react\";\r\n\r\ninterface useValidateFormProp{\r\n  validateFelids: string[],\r\n  functionToRun: ()=>void,\r\n  stateToValidate: any\r\n}\r\n\r\nconst useValidateForm = ({\r\n    validateFelids,\r\n    functionToRun,\r\n    stateToValidate\r\n  }: useValidateFormProp) => {\r\n    const toast = useToast();\r\n\r\n  const handleValidateFelids = useCallback(()=>{\r\n    let newARR: string[] = []\r\n    validateFelids.forEach((felid)=>{\r\n      if(stateToValidate[felid] !== undefined &&  !stateToValidate[felid]){\r\n        newARR.push(felid)\r\n      }\r\n    })\r\n\r\n    newARR.length !== 0 ? \r\n    toast({\r\n      position: \"top-right\",\r\n      title: \"Error\",\r\n      description: `\r\n      Make sure to fill this required fields\r\n      ${newARR.toString()}\r\n      `,\r\n      status: \"info\",\r\n      duration: 5000,\r\n      isClosable: true,\r\n    }):\r\n    functionToRun()\r\n\r\n  },[functionToRun, stateToValidate, toast, validateFelids])\r\n\r\n  return handleValidateFelids;\r\n};\r\n\r\nexport default useValidateForm;\r\n","import styled from \"@emotion/styled\";\r\nimport { primaryColors } from \"@commons/global\";\r\n\r\nexport const StyledInput = styled.input<any>`\r\n  width: 100%;\r\n  padding: 5px 7px;\r\n  border: 1px solid #ccc;\r\n  border-radius: 5px;\r\n\r\n  transition: border-color 0.3s;\r\n  box-sizing: border-box;\r\n  /* ${({ required }) =>\r\n    required && `background-color:  ${primaryColors.required}`}; */\r\n\r\n  &:focus {\r\n    outline: none !important;\r\n    border-color: #007bff;\r\n  }\r\n`;\r\n","import React, { memo, useCallback } from \"react\";\r\nimport FloatingLabel from \"@commons/floating-label\"\r\nimport { StyledInput } from \"./styled\"\r\nimport { InputTextProps } from \"./interface\";\r\n\r\nconst InputText = ({\r\n    disabled,\r\n    value,\r\n    name,\r\n    label = \"\",\r\n    onChange,\r\n    height,\r\n    width = \"200px\",\r\n    type = \"text\",\r\n    placeHolder,\r\n    padding,\r\n    margin,\r\n    className,\r\n    required,\r\n    ...props\r\n}: InputTextProps) => {\r\n\r\n    const handleChange = useCallback((event: { target: { value: string; }; }) => {\r\n        onChange({ name: name, value: event.target.value })\r\n    }, [name, onChange]);\r\n\r\n    return (\r\n        <>\r\n            <FloatingLabel\r\n                label={label}\r\n                hasContent={value && value.toString()}\r\n                margin={margin}\r\n                padding={padding}\r\n                height={height}\r\n                width={width}\r\n            >\r\n                <StyledInput\r\n                    placeholder={placeHolder}\r\n                    disabled={disabled}\r\n                    required={required}\r\n                    onChange={handleChange}\r\n                    width=\"100%\"\r\n                    className={className}\r\n                    value={value}\r\n                    type={type}\r\n                    {...props}\r\n                />\r\n            </FloatingLabel>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default memo(InputText)","import styled from \"@emotion/styled\";\r\n\r\nexport const ModalContainer = styled.div`\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  background-color: rgba(0, 0, 0, 0.5);\r\n  z-index: 2;\r\n`;\r\n\r\nexport const ModalContent = styled.div<{ width: string; height?: string }>`\r\n  /* position: relative;\r\n    margin: 5% auto;\r\n    padding: 20px;\r\n    border: 1px solid #888;\r\n    width: ${({ width }) => width};\r\n    height: ${({ height }) => height};\r\n    background-color: white;\r\n    border-radius: 15px; */\r\n  /* max-height: 90vh;\r\n\tmax-width: 500px; */\r\n  width: ${({ width }) => width};\r\n  height: ${({ height }) => height};\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  background-color: #fff;\r\n  border-radius: 15px;\r\n  overflow: hidden;\r\n  display: flex;\r\n  flex-direction: column;\r\n  box-shadow: 0 15px 30px 0 rgba(#000, 0.25);\r\n  @media (max-width: 600px) {\r\n    width: 90%;\r\n  }\r\n`;\r\n\r\nexport const ModalHeader = styled.div`\r\n  padding: 15px 32px;\r\n  border-bottom: 1px solid #ddd;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n`;\r\n\r\nexport const ModalBody = styled.div`\r\n  margin: 10px 15px;\r\n  overflow-y: auto;\r\n  height: 100%;\r\n`;\r\n\r\nexport const ModalFooter = styled.div`\r\n  padding: 35px 32px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: flex-end;\r\n  border-top: 1px solid #ddd;\r\n  gap: 12px;\r\n  position: relative;\r\n  &:after {\r\n    content: \"\";\r\n    display: block;\r\n    position: absolute;\r\n    top: -51px;\r\n    left: 24px;\r\n    right: 24px;\r\n    height: 50px;\r\n    flex-shrink: 0;\r\n    background-image: linear-gradient(to top, rgba(#fff, 0.75), transparent);\r\n    pointer-events: none;\r\n  }\r\n`;\r\n","import React, { memo } from 'react';\r\nimport { Button } from \"@commons/button\";\r\nimport { BaseTitle } from \"@commons/page-title\"\r\nimport { ModalContainer, ModalContent, ModalHeader, ModalBody, ModalFooter } from \"./style\"\r\n\r\ninterface ModalProp {\r\n    visible?: boolean,\r\n    children?: any,\r\n    label: string,\r\n    onOK?: () => void,\r\n    onClose?: () => void,\r\n    submitTitle?: string,\r\n    width?: string;\r\n    hideSaveButton?: boolean;\r\n    hideCloseButton?: boolean;\r\n    height?: string;\r\n    noFooter?: boolean;\r\n}\r\n\r\nconst Modal = (\r\n    {\r\n        children,\r\n        visible = false,\r\n        label,\r\n        onClose,\r\n        onOK,\r\n        submitTitle = \"smbt\",\r\n        width = \"90%\",\r\n        height = \"auto\",\r\n        hideSaveButton = false,\r\n        hideCloseButton = false,\r\n        noFooter = false\r\n    }: ModalProp\r\n) => {\r\n\r\n    return (\r\n        <>\r\n            {visible &&\r\n                <ModalContainer hidden={!visible} >\r\n                    <ModalContent width={width} height={height}>\r\n                        <ModalHeader>\r\n                            <BaseTitle>{label}</BaseTitle>\r\n                            <Button label='&times;' width='5%' backGround='none' margin='0' padding='0' data-dismiss=\"modal\" onClick={onClose} fontWeight=\"19px\" />\r\n                        </ModalHeader>\r\n\r\n                        <ModalBody>\r\n                                {children}\r\n                        </ModalBody>\r\n\r\n                        {!noFooter &&\r\n                            <ModalFooter hidden={noFooter}>\r\n                                {!hideSaveButton && <Button onClick={onOK} label={submitTitle} hidden={hideSaveButton} width='20%' margin='0' />}\r\n                                {!hideCloseButton && <Button onClick={onClose} label='cls' hidden={hideCloseButton} width='20%' backGround='red' margin='0' />}\r\n                            </ModalFooter>\r\n                        }\r\n                    </ModalContent>\r\n                </ModalContainer>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default memo(Modal);","import React, { memo, useCallback } from \"react\";\r\nimport { InputText } from \"@commons/input-text\";\r\nimport { useFormManager, useValidateForm } from \"@commons/hooks\";\r\nimport { ModalViewProp } from \"@commons/global\";\r\nimport { useTableControlsButtons } from \"@commons/table\";\r\nimport Flex from \"@commons/flex\";\r\nimport { SaveButton } from \"@commons/button\";\r\n\r\nconst ModalView = ({ onClose, selectedRow, refreshTable }: ModalViewProp) => {\r\n  const { state, onChange } = useFormManager({\r\n    initialValues: {\r\n      ...selectedRow,\r\n    },\r\n  });\r\n  const { onSaveAndInsertion } = useTableControlsButtons({\r\n    api: \"POST_CUSTOMER_TABLE_DATA\",\r\n    runFetch: refreshTable,\r\n  });\r\n\r\n  const handleSave = useCallback(() => {\r\n    onSaveAndInsertion(state);\r\n    onClose();\r\n  }, [onClose, onSaveAndInsertion, state]);\r\n\r\n  const handleValidateFelids = useValidateForm({\r\n    validateFelids: [\"customer_name\"],\r\n    functionToRun: handleSave,\r\n    stateToValidate: state,\r\n  });\r\n\r\n  const { customer_name, email, phone, address } = state;\r\n\r\n  return (\r\n    <Flex flexDirection=\"column\" padding=\"0\" margin=\"0\" >\r\n      <Flex width=\"100%\" padding=\"0\" margin=\"0\" wrap gap=\"5px\">\r\n        <InputText\r\n          name=\"customer_name\"\r\n          label=\"Name\"\r\n          onChange={onChange}\r\n          value={customer_name}\r\n          required\r\n          width=\"47%\"\r\n        />\r\n        <InputText\r\n          name=\"email\"\r\n          label=\"Email\"\r\n          onChange={onChange}\r\n          value={email}\r\n          width=\"47%\"\r\n        />\r\n        <InputText\r\n          name=\"phone\"\r\n          label=\"Phone\"\r\n          onChange={onChange}\r\n          value={phone}\r\n          width=\"47%\"\r\n        />\r\n        <InputText\r\n          name=\"address\"\r\n          label=\"Address\"\r\n          onChange={onChange}\r\n          value={address}\r\n          width=\"100%\"\r\n        />\r\n      </Flex>\r\n      <SaveButton onClick={handleValidateFelids} />\r\n    </Flex>\r\n  );\r\n};\r\n\r\nexport default memo(ModalView);\r\n","export const columns = [\r\n  {\r\n    title: \"nm\",\r\n    dataIndex: \"customer_name\",\r\n    width: \"23%\",\r\n  },\r\n  {\r\n    title: \"eml\",\r\n    dataIndex: \"email\",\r\n    width: \"15%\",\r\n  },\r\n  {\r\n    title: \"phn\",\r\n    dataIndex: \"phone\",\r\n    width: \"15%\",\r\n  },\r\n  {\r\n    title: \"adrs\",\r\n    dataIndex: \"address\",\r\n    width: \"15%\",\r\n  },\r\n  {\r\n    title: \"created_at\",\r\n    dataIndex: \"created_at\",\r\n    width: \"15%\",\r\n  },\r\n  {\r\n    title: \"updated_at\",\r\n    dataIndex: \"updated_at\",\r\n    width: \"15%\",\r\n  },\r\n];\r\n","import React, { memo } from 'react';\r\nimport { TableWithApi } from \"@commons/table\";\r\nimport ModalView from \"./Partials/ModalView\";\r\nimport { columns } from \"./constants\"\r\n\r\nconst Customers = () => {\r\n    return (\r\n        <>\r\n            <TableWithApi\r\n                api={\"QUERY_CUSTOMER_TABLE_DATA\"}\r\n                postApi={\"POST_CUSTOMER_TABLE_DATA\"}\r\n                columns={columns}\r\n                hideTools={false}\r\n                canEdit={true}\r\n                canAdd={true}\r\n                canDelete={true}\r\n                canExcel\r\n                rowKey={\"customer_id\"}\r\n                ModalContent={ModalView}\r\n                fetchOnFirstRun\r\n                modalWidth='40%'\r\n            />\r\n        </>\r\n    )\r\n\r\n};\r\n\r\nexport default memo(Customers);\r\n"],"names":["usePdfViewerControl","PDFRef","useRef","handleOpenModal","useCallback","async","_PDFRef$current","current","handleOpen","PdfViewer","_ref","ref","reportName","params","visible","setVisible","useState","handleClose","useImperativeHandle","computedUrl","concat","URLSearchParams","_jsx","Modal","label","onClose","noFooter","width","height","children","data","memo","forwardRef","ConfirmationModal","onConfirm","message","handleConfirmation","onOK","submitTitle","TableWithApi","api","postApi","columns","ModalContent","onClick","fetchOnFirstRun","checkForParams","modalWidth","printProps","tableProps","runFetch","loading","setData","resetData","useFetch","link","onSaveAndInsertion","useTableControlsButtons","selectedRow","setSelectedRow","modal","setModal","confirmModal","setConfirmModal","handleAdd","query_status","handleEdit","handleCloseModal","handleCloseConfirmModal","handleOpenConfirmModal","foundDataSource","useMemo","handlePrint","setTableData","resetTableData","getCurrentDataSource","_jsxs","_Fragment","hideCloseButton","hideSaveButton","refreshTable","handleDelete","Table","dataSource","onAdd","onEdit","onPrint","onDelete","onSelectedRow","row","setRow","newRecord","useMutation","additionalFunctionToRun","method","updateRecord","deleteRecord","record","SaveButton","props","Button","FloatingLabelContainer","styled","div","_templateObject","_taggedTemplateLiteral","margin","_ref2","padding","_ref3","_ref4","FloatingLabelLabel","_templateObject2","_ref5","top","_ref6","hasContent","FloatingLabel","name","hidden","t","useTranslation","htmlFor","value","useEffect","initialValues","state","setState","hasAnyFieldChangedRef","preValues","usePrevious","areInitialValuesChanged","Object","is","JSON","stringify","resetForm","onChange","eventData","handleMultiInput","e","handleSelectWithLabelChange","selectLabelName","handleArrayChange","handleRootState","noAuthorization","runOnSuccess","runOnFail","toast","useToast","url","API_ID","success","setSuccess","authorization","useLocalStorage","postData","settings","headers","Accept","Authorization","body","dataToPost","fetchResponse","fetch","json","response","position","title","description","status","duration","isClosable","validateFelids","functionToRun","stateToValidate","newARR","forEach","felid","undefined","push","length","toString","StyledInput","input","required","primaryColors","InputText","disabled","type","placeHolder","className","handleChange","event","target","placeholder","ModalContainer","ModalHeader","_templateObject3","ModalBody","_templateObject4","ModalFooter","_templateObject5","BaseTitle","backGround","fontWeight","ModalView","useFormManager","handleSave","handleValidateFelids","useValidateForm","customer_name","email","phone","address","Flex","flexDirection","wrap","gap","dataIndex","Customers","hideTools","canEdit","canAdd","canDelete","canExcel","rowKey"],"sourceRoot":""}