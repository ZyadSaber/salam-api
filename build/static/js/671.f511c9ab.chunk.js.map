{"version":3,"file":"static/js/671.f511c9ab.chunk.js","mappings":"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","sources":["../common/hooks/src/usePrevious.ts","../common/hooks/src/useFormManager.ts","../common/input-text/src/inputText.tsx","../pages/customers-page/src/Partials/ModalView.tsx","../pages/customers-page/src/constants.ts","../pages/customers-page/src/component.tsx","../node_modules/@chakra-ui/form-control/dist/chunk-3HLJVDJ7.mjs","../node_modules/@chakra-ui/form-control/dist/chunk-JSSKUSQH.mjs","../node_modules/@chakra-ui/form-control/dist/chunk-PXXQR4UW.mjs","../node_modules/@chakra-ui/input/dist/chunk-GYFRIY2Z.mjs"],"sourcesContent":["import { useRef, useEffect } from \"react\";\r\n\r\nconst usePrevious = <T>(value: T): T => {\r\n  const ref = useRef<T>();\r\n\r\n  useEffect(() => {\r\n    ref.current = value;\r\n  });\r\n\r\n  return ref.current as T;\r\n};\r\n\r\nexport default usePrevious;\r\n","import { useState, useCallback, useEffect, useRef } from \"react\";\r\nimport usePrevious from \"./usePrevious\";\r\n\r\ninterface useFormManagerProps {\r\n  initialValues?: any;\r\n  setSelectedRow?: any;\r\n  tableModal?: boolean;\r\n}\r\n\r\nconst useFormManager = ({ initialValues }: useFormManagerProps) => {\r\n  const [state, setState] = useState<typeof initialValues>(initialValues);\r\n\r\n  const hasAnyFieldChangedRef = useRef(false);\r\n  const preValues = usePrevious(initialValues);\r\n\r\n  const areInitialValuesChanged = useCallback(\r\n    () => !Object.is(JSON.stringify(preValues), JSON.stringify(initialValues)),\r\n    [initialValues, preValues]\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (areInitialValuesChanged()) {\r\n      setState({ ...initialValues });\r\n    }\r\n  }, [areInitialValuesChanged, initialValues]);\r\n\r\n  const resetForm = useCallback(() => {\r\n    hasAnyFieldChangedRef.current = false;\r\n    setState(() => initialValues);\r\n    // @ts-ignore\r\n  }, [initialValues]);\r\n\r\n  useEffect(\r\n    () => {\r\n      return resetForm;\r\n    },\r\n    // eslint-disable-next-line\r\n    []\r\n  );\r\n\r\n  const onChange = useCallback(\r\n    (eventData: any) => {\r\n      const { name, value } = eventData;\r\n      setState({ ...state, [name]: value });\r\n    },\r\n    [state]\r\n  );\r\n\r\n  const handleRootState = useCallback((e: any) => {\r\n    setState(e);\r\n  }, []);\r\n\r\n  const handleSelectWithLabelChange = useCallback(\r\n    (eventData: any) => {\r\n      setState({\r\n        ...state,\r\n        [eventData.name]: eventData.value,\r\n        [eventData.selectLabelName]: eventData.label,\r\n      });\r\n    },\r\n    [state]\r\n  );\r\n\r\n  const handleArrayChange = useCallback(\r\n    ({ name, value }: any) => {\r\n      setState({ ...state, [name]: [...state[name], value] });\r\n    },\r\n    [state]\r\n  );\r\n\r\n  return {\r\n    state,\r\n    onChange,\r\n    resetForm,\r\n    handleRootState,\r\n    handleSelectWithLabelChange,\r\n    handleArrayChange,\r\n  };\r\n};\r\n\r\nexport default useFormManager;\r\n","import React, { memo, useCallback } from \"react\";\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Input, FormLabel, Flex } from '@chakra-ui/react'\r\nimport { InputTextProps } from \"./interface\";\r\n\r\nconst InputText = ({\r\n    disabled,\r\n    value,\r\n    name,\r\n    Label = \"\",\r\n    onChange,\r\n    width = \"200px\",\r\n    type = \"text\",\r\n    placeHolder,\r\n    padding,\r\n    margin = \"10px\",\r\n    className = \"\",\r\n    required = false\r\n}: InputTextProps) => {\r\n    const { t } = useTranslation()\r\n\r\n    const handleChange = useCallback((event: { target: { value: string; }; }) => {\r\n        onChange({ name: name, value: event.target.value })\r\n    }, [name, onChange])\r\n\r\n    return (\r\n        <>\r\n            <Flex\r\n                direction=\"column\"\r\n                width={width}\r\n                padding={padding}\r\n                margin={margin}\r\n            >\r\n                <FormLabel>{t(Label)}</FormLabel>\r\n                <Input\r\n                    placeholder={placeHolder}\r\n                    size='md'\r\n                    isDisabled={disabled}\r\n                    isRequired={required}\r\n                    onChange={handleChange}\r\n                    width=\"100%\"\r\n                    className={className}\r\n                    value={value}\r\n                    type={type}\r\n                />\r\n            </Flex>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default memo(InputText)","import React, { memo, useCallback } from 'react';\r\nimport { InputText } from \"@commons/input-text\";\r\nimport { useFormManager } from '@commons/hooks';\r\nimport { ModalViewProp } from \"@commons/global\"\r\nimport { useTableControlsButtons } from \"@commons/table\";\r\nimport { Button } from \"@commons/button\"\r\n\r\nconst ModalView = ({\r\n    onClose,\r\n    selectedRow,\r\n    refreshTable\r\n}: ModalViewProp) => {\r\n    const {\r\n        state,\r\n        onChange,\r\n    }\r\n        = useFormManager({\r\n            initialValues: {\r\n                ...selectedRow\r\n            }\r\n        })\r\n    const { onSaveAndInsertion } = useTableControlsButtons({ api: \"POST_CUSTOMER_TABLE_DATA\", runFetch: refreshTable })\r\n    const { customer_id, customer_name, email, phone, address, query_status } = state;\r\n\r\n    const handleSave = useCallback(() => {\r\n        const record = {\r\n            customer_name,\r\n            email,\r\n            phone,\r\n            address,\r\n            customer_id,\r\n            query_status\r\n        }\r\n        onSaveAndInsertion(record)\r\n        onClose()\r\n    }, [address, email, onClose, onSaveAndInsertion, phone, query_status, customer_id, customer_name])\r\n\r\n    return (\r\n        <>\r\n            <InputText\r\n                name=\"customer_name\"\r\n                Label='Name'\r\n                onChange={onChange}\r\n                value={customer_name}\r\n                width=\"47%\"\r\n            />\r\n            <InputText\r\n                name=\"email\"\r\n                Label='Email'\r\n                onChange={onChange}\r\n                value={email}\r\n                width=\"47%\"\r\n            />\r\n            <InputText\r\n                name=\"phone\"\r\n                Label='Phone'\r\n                onChange={onChange}\r\n                value={phone}\r\n                width=\"47%\"\r\n            />\r\n            <InputText\r\n                name=\"address\"\r\n                Label='Address'\r\n                onChange={onChange}\r\n                value={address}\r\n                width=\"100%\"\r\n            />\r\n            <Button\r\n                onClick={handleSave}\r\n                label=\"sv\"\r\n            />\r\n        </>\r\n    )\r\n};\r\n\r\nexport default memo(ModalView)","export const columns = [\r\n  {\r\n    title: \"nm\",\r\n    dataIndex: \"customer_name\",\r\n    width: \"20%\",\r\n  },\r\n  {\r\n    title: \"eml\",\r\n    dataIndex: \"email\",\r\n    width: \"17%\",\r\n  },\r\n  {\r\n    title: \"phn\",\r\n    dataIndex: \"phone\",\r\n    width: \"17%\",\r\n  },\r\n  {\r\n    title: \"adrs\",\r\n    dataIndex: \"address\",\r\n    width: \"17%\",\r\n  },\r\n  {\r\n    title: \"created_at\",\r\n    dataIndex: \"created_at\",\r\n    width: \"20%\",\r\n  },\r\n  {\r\n    title: \"updated_at\",\r\n    dataIndex: \"updated_at\",\r\n    width: \"20%\",\r\n  },\r\n];\r\n","import React, { memo } from 'react';\r\nimport ModalView from \"./Partials/ModalView\";\r\nimport { TableWithApi } from \"@commons/table\";\r\nimport { columns } from \"./constants\"\r\n\r\nconst Customers = () => {\r\n    return (\r\n        <>\r\n            <TableWithApi\r\n                api={\"QUERY_CUSTOMER_TABLE_DATA\"}\r\n                postApi={\"POST_CUSTOMER_TABLE_DATA\"}\r\n                columns={columns}\r\n                hideTools={false}\r\n                canEdit={true}\r\n                canAdd={true}\r\n                canDelete={true}\r\n                canExcel\r\n                rowKey={\"customer_id\"}\r\n                ModalContent={ModalView}\r\n                fetchOnFirstRun\r\n            />\r\n        </>\r\n    )\r\n\r\n};\r\n\r\nexport default memo(Customers);\r\n","import {\n  useFormControlContext,\n  useFormControlStyles\n} from \"./chunk-PXXQR4UW.mjs\";\n\n// src/form-label.tsx\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  useStyleConfig\n} from \"@chakra-ui/system\";\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport { jsx, jsxs } from \"react/jsx-runtime\";\nvar FormLabel = forwardRef(function FormLabel2(passedProps, ref) {\n  var _a;\n  const styles = useStyleConfig(\"FormLabel\", passedProps);\n  const props = omitThemingProps(passedProps);\n  const {\n    className,\n    children,\n    requiredIndicator = /* @__PURE__ */ jsx(RequiredIndicator, {}),\n    optionalIndicator = null,\n    ...rest\n  } = props;\n  const field = useFormControlContext();\n  const ownProps = (_a = field == null ? void 0 : field.getLabelProps(rest, ref)) != null ? _a : { ref, ...rest };\n  return /* @__PURE__ */ jsxs(\n    chakra.label,\n    {\n      ...ownProps,\n      className: cx(\"chakra-form__label\", props.className),\n      __css: {\n        display: \"block\",\n        textAlign: \"start\",\n        ...styles\n      },\n      children: [\n        children,\n        (field == null ? void 0 : field.isRequired) ? requiredIndicator : optionalIndicator\n      ]\n    }\n  );\n});\nFormLabel.displayName = \"FormLabel\";\nvar RequiredIndicator = forwardRef(\n  function RequiredIndicator2(props, ref) {\n    const field = useFormControlContext();\n    const styles = useFormControlStyles();\n    if (!(field == null ? void 0 : field.isRequired))\n      return null;\n    const className = cx(\"chakra-form__required-indicator\", props.className);\n    return /* @__PURE__ */ jsx(\n      chakra.span,\n      {\n        ...field == null ? void 0 : field.getRequiredIndicatorProps(props, ref),\n        __css: styles.requiredIndicator,\n        className\n      }\n    );\n  }\n);\nRequiredIndicator.displayName = \"RequiredIndicator\";\n\nexport {\n  FormLabel,\n  RequiredIndicator\n};\n","import {\n  useFormControlContext\n} from \"./chunk-PXXQR4UW.mjs\";\n\n// src/use-form-control.ts\nimport { ariaAttr, callAllHandlers } from \"@chakra-ui/shared-utils\";\nfunction useFormControl(props) {\n  const { isDisabled, isInvalid, isReadOnly, isRequired, ...rest } = useFormControlProps(props);\n  return {\n    ...rest,\n    disabled: isDisabled,\n    readOnly: isReadOnly,\n    required: isRequired,\n    \"aria-invalid\": ariaAttr(isInvalid),\n    \"aria-required\": ariaAttr(isRequired),\n    \"aria-readonly\": ariaAttr(isReadOnly)\n  };\n}\nfunction useFormControlProps(props) {\n  var _a, _b, _c;\n  const field = useFormControlContext();\n  const {\n    id,\n    disabled,\n    readOnly,\n    required,\n    isRequired,\n    isInvalid,\n    isReadOnly,\n    isDisabled,\n    onFocus,\n    onBlur,\n    ...rest\n  } = props;\n  const labelIds = props[\"aria-describedby\"] ? [props[\"aria-describedby\"]] : [];\n  if ((field == null ? void 0 : field.hasFeedbackText) && (field == null ? void 0 : field.isInvalid)) {\n    labelIds.push(field.feedbackId);\n  }\n  if (field == null ? void 0 : field.hasHelpText) {\n    labelIds.push(field.helpTextId);\n  }\n  return {\n    ...rest,\n    \"aria-describedby\": labelIds.join(\" \") || void 0,\n    id: id != null ? id : field == null ? void 0 : field.id,\n    isDisabled: (_a = disabled != null ? disabled : isDisabled) != null ? _a : field == null ? void 0 : field.isDisabled,\n    isReadOnly: (_b = readOnly != null ? readOnly : isReadOnly) != null ? _b : field == null ? void 0 : field.isReadOnly,\n    isRequired: (_c = required != null ? required : isRequired) != null ? _c : field == null ? void 0 : field.isRequired,\n    isInvalid: isInvalid != null ? isInvalid : field == null ? void 0 : field.isInvalid,\n    onFocus: callAllHandlers(field == null ? void 0 : field.onFocus, onFocus),\n    onBlur: callAllHandlers(field == null ? void 0 : field.onBlur, onBlur)\n  };\n}\n\nexport {\n  useFormControl,\n  useFormControlProps\n};\n","// src/form-control.tsx\nimport { createContext } from \"@chakra-ui/react-context\";\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\";\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  useMultiStyleConfig\n} from \"@chakra-ui/system\";\nimport { cx, dataAttr } from \"@chakra-ui/shared-utils\";\nimport { useCallback, useId, useState } from \"react\";\nimport { jsx } from \"react/jsx-runtime\";\nvar [FormControlStylesProvider, useFormControlStyles] = createContext({\n  name: `FormControlStylesContext`,\n  errorMessage: `useFormControlStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<FormControl />\" `\n});\nvar [FormControlProvider, useFormControlContext] = createContext({\n  strict: false,\n  name: \"FormControlContext\"\n});\nfunction useFormControlProvider(props) {\n  const {\n    id: idProp,\n    isRequired,\n    isInvalid,\n    isDisabled,\n    isReadOnly,\n    ...htmlProps\n  } = props;\n  const uuid = useId();\n  const id = idProp || `field-${uuid}`;\n  const labelId = `${id}-label`;\n  const feedbackId = `${id}-feedback`;\n  const helpTextId = `${id}-helptext`;\n  const [hasFeedbackText, setHasFeedbackText] = useState(false);\n  const [hasHelpText, setHasHelpText] = useState(false);\n  const [isFocused, setFocus] = useState(false);\n  const getHelpTextProps = useCallback(\n    (props2 = {}, forwardedRef = null) => ({\n      id: helpTextId,\n      ...props2,\n      ref: mergeRefs(forwardedRef, (node) => {\n        if (!node)\n          return;\n        setHasHelpText(true);\n      })\n    }),\n    [helpTextId]\n  );\n  const getLabelProps = useCallback(\n    (props2 = {}, forwardedRef = null) => {\n      var _a, _b;\n      return {\n        ...props2,\n        ref: forwardedRef,\n        \"data-focus\": dataAttr(isFocused),\n        \"data-disabled\": dataAttr(isDisabled),\n        \"data-invalid\": dataAttr(isInvalid),\n        \"data-readonly\": dataAttr(isReadOnly),\n        id: (_a = props2.id) != null ? _a : labelId,\n        htmlFor: (_b = props2.htmlFor) != null ? _b : id\n      };\n    },\n    [id, isDisabled, isFocused, isInvalid, isReadOnly, labelId]\n  );\n  const getErrorMessageProps = useCallback(\n    (props2 = {}, forwardedRef = null) => ({\n      id: feedbackId,\n      ...props2,\n      ref: mergeRefs(forwardedRef, (node) => {\n        if (!node)\n          return;\n        setHasFeedbackText(true);\n      }),\n      \"aria-live\": \"polite\"\n    }),\n    [feedbackId]\n  );\n  const getRootProps = useCallback(\n    (props2 = {}, forwardedRef = null) => ({\n      ...props2,\n      ...htmlProps,\n      ref: forwardedRef,\n      role: \"group\"\n    }),\n    [htmlProps]\n  );\n  const getRequiredIndicatorProps = useCallback(\n    (props2 = {}, forwardedRef = null) => ({\n      ...props2,\n      ref: forwardedRef,\n      role: \"presentation\",\n      \"aria-hidden\": true,\n      children: props2.children || \"*\"\n    }),\n    []\n  );\n  return {\n    isRequired: !!isRequired,\n    isInvalid: !!isInvalid,\n    isReadOnly: !!isReadOnly,\n    isDisabled: !!isDisabled,\n    isFocused: !!isFocused,\n    onFocus: () => setFocus(true),\n    onBlur: () => setFocus(false),\n    hasFeedbackText,\n    setHasFeedbackText,\n    hasHelpText,\n    setHasHelpText,\n    id,\n    labelId,\n    feedbackId,\n    helpTextId,\n    htmlProps,\n    getHelpTextProps,\n    getErrorMessageProps,\n    getRootProps,\n    getLabelProps,\n    getRequiredIndicatorProps\n  };\n}\nvar FormControl = forwardRef(\n  function FormControl2(props, ref) {\n    const styles = useMultiStyleConfig(\"Form\", props);\n    const ownProps = omitThemingProps(props);\n    const {\n      getRootProps,\n      htmlProps: _,\n      ...context\n    } = useFormControlProvider(ownProps);\n    const className = cx(\"chakra-form-control\", props.className);\n    return /* @__PURE__ */ jsx(FormControlProvider, { value: context, children: /* @__PURE__ */ jsx(FormControlStylesProvider, { value: styles, children: /* @__PURE__ */ jsx(\n      chakra.div,\n      {\n        ...getRootProps({}, ref),\n        className,\n        __css: styles[\"container\"]\n      }\n    ) }) });\n  }\n);\nFormControl.displayName = \"FormControl\";\nvar FormHelperText = forwardRef(\n  function FormHelperText2(props, ref) {\n    const field = useFormControlContext();\n    const styles = useFormControlStyles();\n    const className = cx(\"chakra-form__helper-text\", props.className);\n    return /* @__PURE__ */ jsx(\n      chakra.div,\n      {\n        ...field == null ? void 0 : field.getHelpTextProps(props, ref),\n        __css: styles.helperText,\n        className\n      }\n    );\n  }\n);\nFormHelperText.displayName = \"FormHelperText\";\n\nexport {\n  useFormControlStyles,\n  useFormControlContext,\n  FormControl,\n  FormHelperText\n};\n","// src/input.tsx\nimport { useFormControl } from \"@chakra-ui/form-control\";\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  useMultiStyleConfig\n} from \"@chakra-ui/system\";\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport { jsx } from \"react/jsx-runtime\";\nvar Input = forwardRef(function Input2(props, ref) {\n  const { htmlSize, ...rest } = props;\n  const styles = useMultiStyleConfig(\"Input\", rest);\n  const ownProps = omitThemingProps(rest);\n  const input = useFormControl(ownProps);\n  const _className = cx(\"chakra-input\", props.className);\n  return /* @__PURE__ */ jsx(\n    chakra.input,\n    {\n      size: htmlSize,\n      ...input,\n      __css: styles.field,\n      ref,\n      className: _className\n    }\n  );\n});\nInput.displayName = \"Input\";\nInput.id = \"Input\";\n\nexport {\n  Input\n};\n"],"names":["value","ref","useRef","useEffect","current","initialValues","useState","state","setState","hasAnyFieldChangedRef","preValues","usePrevious","areInitialValuesChanged","useCallback","Object","is","JSON","stringify","resetForm","onChange","eventData","name","handleRootState","e","handleSelectWithLabelChange","selectLabelName","label","handleArrayChange","InputText","disabled","Label","width","type","placeHolder","padding","margin","className","required","t","useTranslation","handleChange","event","target","direction","I","placeholder","size","isDisabled","isRequired","memo","ModalView","onClose","selectedRow","refreshTable","useFormManager","onSaveAndInsertion","useTableControlsButtons","api","runFetch","customer_id","customer_name","email","phone","address","query_status","handleSave","onClick","columns","title","dataIndex","Customers","postApi","hideTools","canEdit","canAdd","canDelete","canExcel","rowKey","ModalContent","fetchOnFirstRun","FormLabel","forwardRef","passedProps","_a","styles","useStyleConfig","props","omitThemingProps","children","requiredIndicator","jsx","RequiredIndicator","optionalIndicator","rest","field","useFormControlContext","ownProps","getLabelProps","jsxs","chakra","cx","__css","display","textAlign","displayName","useFormControlStyles","getRequiredIndicatorProps","useFormControl","useFormControlProps","isInvalid","isReadOnly","readOnly","ariaAttr","_b","_c","id","onFocus","onBlur","labelIds","hasFeedbackText","push","feedbackId","hasHelpText","helpTextId","join","callAllHandlers","createContext","errorMessage","FormControlStylesProvider","strict","FormControlProvider","FormControl","useMultiStyleConfig","idProp","htmlProps","uuid","useId","labelId","setHasFeedbackText","setHasHelpText","isFocused","setFocus","getHelpTextProps","props2","forwardedRef","mergeRefs","node","dataAttr","htmlFor","getErrorMessageProps","getRootProps","role","useFormControlProvider","context","helperText","Input","htmlSize","input","_className"],"sourceRoot":""}