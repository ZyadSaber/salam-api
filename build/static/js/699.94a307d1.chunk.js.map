{"version":3,"file":"static/js/699.94a307d1.chunk.js","mappings":"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","sources":["../common/Flex/src/index.tsx","../common/modal/src/index.tsx","../common/TableView/src/ApiTable.tsx","../common/button/src/iconButton.tsx","../common/TableView/src/Table.tsx","../common/TableView/src/hooks/useTableControlsButtons.ts","../common/hooks/src/useMutation.ts","../common/chart-js/src/chart.tsx","../common/chart-js/src/chartWithApi.tsx","../pages/DashBoard/src/constants.ts","../pages/DashBoard/src/component.tsx"],"sourcesContent":["import React, { memo, useEffect, useState } from \"react\";\r\nimport { Flex as ChackraFlex } from \"@chakra-ui/react\"\r\nimport { flexProp } from \"./interface\"\r\n\r\nconst Flex = ({\r\n    children,\r\n    justifyContent,\r\n    width,\r\n    height,\r\n    padding = \"10px\",\r\n    margin,\r\n    bordered = false,\r\n    backgroundColor,\r\n    borderColor = \"#3c8dcf\",\r\n    borderWidth = \"px\",\r\n    borderRadius = \"5px\",\r\n    flexDirection = \"row\",\r\n    textAlign = \"\",\r\n    hidden = false,\r\n    wrap,\r\n    ...prop\r\n}: any) => {\r\n    const [border, setBorder] = useState(\"\")\r\n    useEffect(() => {\r\n        if (bordered) {\r\n            setBorder(`${borderWidth} solid ${borderColor}`)\r\n        }\r\n    }, [borderColor, borderWidth, bordered])\r\n    return (\r\n        <>\r\n            <ChackraFlex\r\n                width={width}\r\n                height={height}\r\n                padding={padding}\r\n                margin={margin}\r\n                background={backgroundColor}\r\n                borderRadius={borderRadius}\r\n                flexDirection={flexDirection}\r\n                textAlign={textAlign}\r\n                justifyContent={justifyContent}\r\n                hidden={hidden}\r\n                //@ts-ignore\r\n                wrap={wrap ? \"wrap\" : \"\"}\r\n                {...prop}\r\n            >\r\n                {children}\r\n            </ChackraFlex>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default memo(Flex)","import React, { memo } from 'react';\r\nimport { useTranslation } from 'react-i18next'\r\nimport {\r\n    Modal as ModalView,\r\n    ModalOverlay,\r\n    ModalContent,\r\n    ModalHeader,\r\n    ModalFooter,\r\n    ModalBody,\r\n    ModalCloseButton,\r\n    Button,\r\n    Flex\r\n} from '@chakra-ui/react';\r\n\r\ninterface ModalProp {\r\n    visible?: boolean,\r\n    children?: any,\r\n    label: string,\r\n    onOK?: () => void,\r\n    onClose: () => void,\r\n    submitTitle?: string,\r\n    width?: string;\r\n    hideSaveButton?: boolean;\r\n    hideCloseButton?: boolean;\r\n}\r\n\r\nconst Modal = (\r\n    {\r\n        children,\r\n        visible = false,\r\n        label,\r\n        onClose,\r\n        onOK,\r\n        submitTitle = \"smbt\",\r\n        width = \"3xl\",\r\n        hideSaveButton = false,\r\n        hideCloseButton = false\r\n    }: ModalProp\r\n) => {\r\n    const { t } = useTranslation()\r\n    return (\r\n        <>\r\n\r\n            <ModalView isOpen={visible} onClose={onClose} size={width}>\r\n                <ModalOverlay />\r\n                <ModalContent>\r\n                    <ModalHeader>{t(label)}</ModalHeader>\r\n                    <ModalCloseButton />\r\n                    <ModalBody>\r\n                        <Flex w=\"100%\" padding=\"5px\" wrap=\"wrap\">\r\n                            {children}\r\n                        </Flex>\r\n                    </ModalBody>\r\n                    <ModalFooter>\r\n                        <Flex w=\"25%\" justifyContent=\"space-around\">\r\n                            <Button colorScheme='red' mr={3} onClick={onClose} hidden={hideCloseButton}>\r\n                                {t(\"cls\")}\r\n                            </Button>\r\n                            <Button colorScheme='blue' onClick={onOK} hidden={hideSaveButton} >{t(submitTitle)}</Button>\r\n                        </Flex>\r\n                    </ModalFooter>\r\n                </ModalContent>\r\n            </ModalView>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default memo(Modal);","import React, \r\n{ \r\n    memo, \r\n    useState,\r\n    useCallback,\r\n    useImperativeHandle,\r\n    forwardRef\r\n} from \"react\";\r\nimport Table from \"./Table\";\r\nimport { useFetch } from \"@commons/hooks\"\r\nimport Modal from \"@commons/modal\";\r\nimport useTableControlsButtons from \"./hooks/useTableControlsButtons\";\r\nimport { TableWithApiProps } from \"./interface\"\r\n\r\nconst TableWithApi = ({\r\n    api,\r\n    postApi,\r\n    columns,\r\n    ModalContent,\r\n    onClick,\r\n    fetchOnFirstRun = false,\r\n    params,\r\n    checkForParams = false,\r\n    ...tableProps\r\n}: TableWithApiProps,\r\nref: any\r\n) => {\r\n    const { data, runFetch, loading } = useFetch({ link: api, fetchOnFirstRun: fetchOnFirstRun, params: params, checkForParams: true })\r\n    const { onSaveAndInsertion } = useTableControlsButtons({ api: postApi, runFetch: runFetch })\r\n    const [selectedRow, setSelectedRow] = useState({})\r\n    const [modal, setModal] = useState(false);\r\n    const handleAdd = useCallback(() => {\r\n        setSelectedRow({ query_status: \"n\" })\r\n        setModal(true)\r\n    }, [setSelectedRow])\r\n    const handleEdit = useCallback(() => {\r\n        setSelectedRow({ ...selectedRow, query_status: \"u\" })\r\n        setModal(true)\r\n    }, [selectedRow, setSelectedRow])\r\n    const handleDelete = () => {\r\n        onSaveAndInsertion({ ...selectedRow, query_status: \"d\" })\r\n    }\r\n\r\n    const handleCloseModal = useCallback(() => {\r\n        setModal(false)\r\n    }, [])\r\n\r\n\r\n    const handleSelectedRow = (row: any) => {\r\n        setSelectedRow(row)\r\n        if (onClick) onClick(row)\r\n    };\r\n\r\n    useImperativeHandle(ref, () => ({\r\n        runFetch,\r\n        // setTableData: setData,\r\n        // resetTableData,\r\n        // getCurrentDataSource: () => foundDataSource\r\n      }));\r\n\r\n    return (\r\n        <>\r\n            {ModalContent && <Modal\r\n                visible={modal}\r\n                onClose={handleCloseModal}\r\n                hideCloseButton\r\n                hideSaveButton\r\n                label=\"dtls\"\r\n            >\r\n                <ModalContent\r\n                    onClose={handleCloseModal}\r\n                    selectedRow={selectedRow}\r\n                    refreshTable={runFetch}\r\n                />\r\n            </Modal>\r\n            }\r\n            <Table\r\n                dataSource={data?.data}\r\n                columns={columns}\r\n                onAdd={handleAdd}\r\n                onEdit={handleEdit}\r\n                onDelete={handleDelete}\r\n                onSelectedRow={handleSelectedRow}\r\n                loading={loading}\r\n                {...tableProps}\r\n            >\r\n            </Table>\r\n\r\n        </>\r\n    )\r\n}\r\nexport default memo(forwardRef(TableWithApi))","import React, { memo } from \"react\";\r\nimport { iconButtonProp } from \"./interface\"\r\n\r\nconst IconButton = ({\r\n    icon,\r\n    onClick,\r\n    disabled = false,\r\n    width = \"30px\",\r\n    height = \"30px\",\r\n    color,\r\n    margin = \"10px\",\r\n    padding,\r\n    hidden = false\r\n}: iconButtonProp) => {\r\n    return (\r\n        <>\r\n            <button style={{\r\n                border: \"none\",\r\n                width: width,\r\n                height: height,\r\n                backgroundColor: color,\r\n                padding: padding,\r\n                margin: margin,\r\n                borderRadius: \"20px\"\r\n            }} hidden={hidden} onClick={onClick} disabled={disabled} >\r\n                <i className={icon}></i>\r\n            </button>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default memo(IconButton)","import React, { useState, useCallback, useRef } from 'react';\r\nimport { Button, IconButton } from \"@commons/button\";\r\nimport { useLocation } from 'react-router-dom';\r\nimport * as XLSX from \"xlsx\";\r\nimport { useTranslation } from 'react-i18next';\r\nimport ReactToPrint from 'react-to-print';\r\nimport {\r\n    Table as ChakraTable,\r\n    Thead,\r\n    Tbody,\r\n    // Tfoot,\r\n    Text,\r\n    Box,\r\n    Tr,\r\n    Th,\r\n    Td,\r\n    TableContainer,\r\n    Skeleton,\r\n} from '@chakra-ui/react'\r\nimport Flex from \"@commons/flex\";\r\nimport { TableProps, additionalButtonsType } from \"./interface\";\r\n\r\n\r\nconst Table = ({\r\n    dataSource,\r\n    height = \"300px\",\r\n    rowKey = \"rowKey\",\r\n    columns,\r\n    hideTools = true,\r\n    canEdit = false,\r\n    canAdd = false,\r\n    canDelete = false,\r\n    canExcel = false,\r\n    onAdd,\r\n    onEdit,\r\n    onDelete,\r\n    actionColumn = false,\r\n    onAction,\r\n    actionLabel = \"\",\r\n    onSelectedRow,\r\n    label,\r\n    canPrint = false,\r\n    onPrint,\r\n    additionalButtons,\r\n    onSave,\r\n    canSave = false,\r\n    width = \"100%\",\r\n    margin = \"\",\r\n    padding = \"\",\r\n    loading = false,\r\n    onDoubleClick = (e) => { console.log(e) }\r\n}: TableProps) => {\r\n    const { pathname } = useLocation()\r\n    const { t } = useTranslation()\r\n    const [rowSelected, setRowSelected] = useState()\r\n    const handleSelectedRow = useCallback((item: any) => () => {\r\n        if (onSelectedRow) onSelectedRow(item)\r\n        setRowSelected(item)\r\n    }, [onSelectedRow])\r\n\r\n    const handleDouble = useCallback((item: any) => () => {\r\n        if (onDoubleClick) onDoubleClick(item)\r\n        setRowSelected(item)\r\n    }, [onDoubleClick])\r\n\r\n    const onExcel = useCallback(() => {\r\n        const pathName = pathname.replace(\"/\", \"\")\r\n        const wb = XLSX.utils.book_new(),\r\n            //@ts-ignore\r\n            ws = XLSX.utils.json_to_sheet(dataSource)\r\n        XLSX.utils.book_append_sheet(wb, ws, pathName)\r\n        XLSX.writeFile(wb, `${pathName} ${new Date().toUTCString()}.xlsx`)\r\n    }, [dataSource, pathname])\r\n\r\n    const componentRef = useRef();\r\n\r\n    return (\r\n        <>\r\n            <TableContainer width={width} padding={padding} margin={margin}>\r\n                {label && <Text width=\"100%\" textAlign=\"center\" marginBottom=\"7px\" fontSize='md' fontWeight=\"bold\">{t(label)}</Text>}\r\n                <Flex\r\n                    width='100%'\r\n                    padding='0'\r\n                    margin='5px 0'\r\n                    justifyContent='center'\r\n                    hidden={hideTools}\r\n                >\r\n                    <IconButton\r\n                        icon='fa-sharp fa-solid fa-plus'\r\n                        onClick={onAdd}\r\n                        hidden={!canAdd}\r\n                    />\r\n                    <IconButton\r\n                        icon='fa-sharp fa-solid fa-pen-clip'\r\n                        onClick={onEdit}\r\n                        hidden={!canEdit}\r\n                        disabled={!rowSelected}\r\n                    />\r\n                    <IconButton\r\n                        icon='fa-sharp fa-solid fa-trash'\r\n                        onClick={onDelete}\r\n                        hidden={!canDelete}\r\n                        disabled={!rowSelected}\r\n                    />\r\n                    {additionalButtons && additionalButtons.map((button: additionalButtonsType) => {\r\n                        return (\r\n                            <IconButton\r\n                                icon={button.icon}\r\n                                onClick={button.onClick}\r\n                                disabled={button.disabled}\r\n                                hidden={false}\r\n                            />\r\n                        )\r\n                    })}\r\n                    <IconButton\r\n                        icon='fa-solid fa-floppy-disk'\r\n                        onClick={onSave}\r\n                        hidden={!canSave}\r\n                        disabled={!canSave}\r\n                    />\r\n                    <ReactToPrint\r\n                        trigger={() => <IconButton\r\n                            icon='fa-solid fa-print'\r\n                            hidden={!canPrint}\r\n                            disabled={!canPrint}\r\n                        />}\r\n                        //@ts-ignore\r\n                        content={() => {\r\n                            return (\r\n                                componentRef.current\r\n                            )\r\n                        }}\r\n                        documentTitle=\"dd\"\r\n                    />\r\n                    <IconButton\r\n                        icon='fa-sharp fa-regular fa-file-excel'\r\n                        onClick={onExcel}\r\n                        hidden={!canExcel}\r\n                        disabled={!canExcel}\r\n                    />\r\n                </Flex>\r\n                <Skeleton isLoaded={!loading} fadeDuration={0} >\r\n                    <Box overflowY=\"auto\" height={height}>\r\n                        <ChakraTable\r\n                            //@ts-ignore\r\n                            ref={componentRef}\r\n                        >\r\n                            <Thead top={0} position=\"sticky\" bgColor=\"#3edae6\">\r\n                                <Tr>\r\n                                    {columns.map((item: any) => {\r\n                                        return (\r\n                                            <Th maxWidth={item.width} minWidth={item.width}>\r\n                                                {t(item.title)}\r\n                                            </Th>\r\n                                        )\r\n                                    })}\r\n                                    <Th hidden={!actionColumn}>{t(\"actn\")}</Th>\r\n                                </Tr>\r\n                            </Thead>\r\n                            <Tbody>\r\n                                {dataSource?.map((item: any) => {\r\n                                    return (\r\n                                        <Tr key={item[rowKey]} onClick={handleSelectedRow(item)} onDoubleClick={handleDouble(item)} background={`${rowSelected === item ? \"#dbffbf\" : \"\"}`} >\r\n                                            {columns.map((column: any) => {\r\n                                                return (\r\n                                                    <Td maxWidth={column.width} minWidth={column.width}>\r\n                                                        {item[column.dataIndex]}\r\n                                                    </Td>\r\n                                                )\r\n                                            })}\r\n                                            <Td hidden={!actionColumn}>\r\n                                                <Button\r\n                                                    label={actionLabel}\r\n                                                    onClick={() => { onAction(item) }}\r\n                                                />\r\n                                            </Td>\r\n                                        </Tr>\r\n                                    )\r\n                                })}\r\n                            </Tbody>\r\n\r\n                            {/* <Tfoot>\r\n                        <Tr>\r\n                        <Th>To convert</Th>\r\n                        <Th>into</Th>\r\n                        <Th isNumeric>multiply by</Th>\r\n                        </Tr>\r\n                    </Tfoot> */}\r\n\r\n                        </ChakraTable>\r\n\r\n                        {!Array.isArray(dataSource) || dataSource.length === 0 && !loading ? <Flex justifyContent='center' width='100%'>\r\n                            <Text as='b' fontSize='md' color='red'>No Data</Text>\r\n                        </Flex> : <></>}\r\n                    </Box>\r\n                </Skeleton>\r\n            </TableContainer>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Table;","import { useCallback } from \"react\";\r\nimport { useMutation } from \"@commons/hooks\";\r\n\r\nconst useTableControlsButtons = ({ api = \"\", runFetch }: any) => {\r\n  const { setRow: newRecord } = useMutation({\r\n    link: api,\r\n    additionalFunctionToRun: runFetch,\r\n    method: \"POST\",\r\n  });\r\n  const { setRow: updateRecord } = useMutation({\r\n    link: api,\r\n    additionalFunctionToRun: runFetch,\r\n    method: \"PUT\",\r\n  });\r\n  const { setRow: deleteRecord } = useMutation({\r\n    link: api,\r\n    additionalFunctionToRun: runFetch,\r\n    method: \"Delete\",\r\n  });\r\n\r\n  const onSaveAndInsertion = useCallback(\r\n    (record: any) => {\r\n      if (record.query_status === \"n\") {\r\n        newRecord(record);\r\n      } else if (record.query_status === \"u\") {\r\n        updateRecord(record);\r\n      } else if (record.query_status === \"d\") {\r\n        deleteRecord(record);\r\n      }\r\n    },\r\n    [newRecord, updateRecord, deleteRecord]\r\n  );\r\n\r\n  return { onSaveAndInsertion };\r\n};\r\n\r\nexport default useTableControlsButtons;\r\n","import { useState, useCallback } from \"react\";\r\nimport { useLocalStorage } from \"@commons/hooks\";\r\nimport { API_ID } from \"@commons/global\";\r\nimport { useToast } from \"@chakra-ui/react\";\r\n\r\ninterface useMutationProps {\r\n  link: string;\r\n  noAuthorization?: boolean;\r\n  additionalFunctionToRun?: () => void;\r\n  runOnSuccess?: () => void;\r\n  runOnFail?: () => void;\r\n  method?: string;\r\n}\r\ninterface successType {\r\n  response: string;\r\n}\r\n\r\nconst useMutation = ({\r\n  link = \"\",\r\n  noAuthorization = false,\r\n  additionalFunctionToRun,\r\n  runOnSuccess,\r\n  runOnFail,\r\n  method = \"POST\",\r\n}: useMutationProps) => {\r\n  const toast = useToast();\r\n  //@ts-ignore\r\n  const url = `http://144.24.209.19:9090/api/${API_ID[link]}`;\r\n  const [success, setSuccess] = useState<successType>();\r\n  const { authorization } = useLocalStorage();\r\n  const postData = useCallback(\r\n    async (dataToPost: any) => {\r\n      if (authorization || noAuthorization) {\r\n        const settings = {\r\n          method: method,\r\n          headers: {\r\n            Accept: \"application/json\",\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: `Bearer ${authorization}`,\r\n          },\r\n          body: JSON.stringify(dataToPost),\r\n        };\r\n        try {\r\n          const fetchResponse = await fetch(url, settings);\r\n          const data = await fetchResponse.json();\r\n          if (data.response === \"success\") {\r\n            toast({\r\n              position: \"top-right\",\r\n              title: \"Success\",\r\n              description: `${data.response}`,\r\n              status: \"success\",\r\n              duration: 5000,\r\n              isClosable: true,\r\n            });\r\n            if (runOnSuccess) runOnSuccess();\r\n          } else {\r\n            toast({\r\n              position: \"top-right\",\r\n              title: \"Error\",\r\n              description: `${data.message}`,\r\n              status: \"error\",\r\n              duration: 9000,\r\n              isClosable: true,\r\n            });\r\n            if (runOnFail) runOnFail();\r\n          }\r\n          setSuccess(data);\r\n          if (additionalFunctionToRun) {\r\n            additionalFunctionToRun();\r\n          }\r\n          return data;\r\n        } catch (e) {}\r\n      }\r\n    },\r\n    [\r\n      additionalFunctionToRun,\r\n      authorization,\r\n      method,\r\n      noAuthorization,\r\n      runOnFail,\r\n      runOnSuccess,\r\n      toast,\r\n      url,\r\n    ]\r\n  );\r\n\r\n  const setRow = useCallback(\r\n    (row: any) => {\r\n      postData(row);\r\n    },\r\n    [postData]\r\n  );\r\n\r\n  return { success, setRow };\r\n};\r\n\r\nexport default useMutation;\r\n","import React, { memo } from \"react\";\r\nimport 'chart.js/auto';\r\nimport { Chart } from 'react-chartjs-2';\r\nimport { useTranslation } from 'react-i18next';\r\nimport Flex from \"@commons/flex\";\r\nimport { barChartProp } from \"./interface\";\r\n\r\nconst BarChart = ({\r\n  mode = 'bar',\r\n  width,\r\n  height,\r\n  margin,\r\n  padding,\r\n  label = \"chart\",\r\n  dataSource\r\n}: barChartProp) => {\r\n  const { t } = useTranslation()\r\n  const view = () => {\r\n\r\n    switch (mode) {\r\n      case \"line\":\r\n        return <Chart type='line' data={dataSource} />;\r\n      case \"pie\":\r\n        return <Chart type='pie' data={dataSource} />;\r\n      case \"bar\":\r\n        return <Chart type='bar' data={dataSource} />;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Flex\r\n        flexDirection=\"column\"\r\n        width={width}\r\n        height={height}\r\n        margin={margin}\r\n        padding={padding}\r\n      >\r\n        <Flex width=\"100%\" justifyContent=\"center\">\r\n          <p>{t(label)}</p>\r\n        </Flex>\r\n        {dataSource && view()}\r\n      </Flex>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default memo(BarChart)","import React, { memo, useEffect, useState } from \"react\";\r\nimport { useFetch } from \"@commons/hooks\"\r\nimport BarChart from \"./chart\";\r\nimport { chartWithApi } from \"./interface\"\r\n\r\nconst ChartWithApi = ({\r\n    api,\r\n    params,\r\n    ...prop\r\n}: chartWithApi) => {\r\n\r\n    const [dataSource, setDataSource] = useState({\r\n        labels: [],\r\n        datasets: [\r\n            {\r\n                label: '',\r\n                data: [],\r\n            },\r\n        ],\r\n    })\r\n\r\n    const { data } = useFetch({\r\n        link: api,\r\n        fetchOnFirstRun: true,\r\n        params: params\r\n    })\r\n\r\n    useEffect(() => {\r\n        if (!Array.isArray(data)) {\r\n            setDataSource(data)\r\n        }\r\n    }, [data])\r\n\r\n    return (\r\n        <>\r\n            <BarChart\r\n                dataSource={dataSource}\r\n                {...prop}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default memo(ChartWithApi);","export const customerTableColumns = [\r\n  {\r\n    title: \"no\",\r\n    dataIndex: \"customer_invoice_id\",\r\n    width: \"5%\",\r\n  },\r\n  {\r\n    title: \"nm\",\r\n    dataIndex: \"invoice_holder_name\",\r\n    width: \"10%\",\r\n  },\r\n  {\r\n    title: \"total\",\r\n    dataIndex: \"customer_invoice_total\",\r\n    width: \"5%\",\r\n  },\r\n  {\r\n    title: \"discount\",\r\n    dataIndex: \"customer_invoice_discount\",\r\n    width: \"5%\",\r\n  },\r\n  {\r\n    title: \"total after\",\r\n    dataIndex: \"customer_invoice_after_discount\",\r\n    width: \"5%\",\r\n  },\r\n  {\r\n    title: \"paid\",\r\n    dataIndex: \"customer_invoice_paid\",\r\n    width: \"5%\",\r\n  },\r\n  {\r\n    title: \"credit\",\r\n    dataIndex: \"customer_invoice_credit\",\r\n    width: \"5%\",\r\n  },\r\n];\r\n\r\nexport const supplierTableColumns = [\r\n  {\r\n    title: \"no\",\r\n    dataIndex: \"supplier_invoice_id\",\r\n    width: \"5%\",\r\n  },\r\n  {\r\n    title: \"nm\",\r\n    dataIndex: \"invoice_holder_name\",\r\n    width: \"10%\",\r\n  },\r\n  {\r\n    title: \"total\",\r\n    dataIndex: \"supplier_invoice_total\",\r\n    width: \"5%\",\r\n  },\r\n  {\r\n    title: \"discount\",\r\n    dataIndex: \"supplier_invoice_discount\",\r\n    width: \"5%\",\r\n  },\r\n  {\r\n    title: \"total after\",\r\n    dataIndex: \"supplier_invoice_after_discount\",\r\n    width: \"5%\",\r\n  },\r\n  {\r\n    title: \"paid\",\r\n    dataIndex: \"supplier_invoice_paid\",\r\n    width: \"5%\",\r\n  },\r\n  {\r\n    title: \"credit\",\r\n    dataIndex: \"supplier_invoice_credit\",\r\n    width: \"5%\",\r\n  }\r\n];\r\n","import React, { memo } from 'react';\r\nimport { ChartWithApi } from \"@pages/chart-js\";\r\nimport Flex from \"@commons/flex\";\r\nimport { TableWithApi } from \"@commons/table\";\r\nimport { supplierTableColumns, customerTableColumns } from \"./constants\"\r\n\r\nconst DashBoard = () => {\r\n\r\n    return (\r\n        <>\r\n            <Flex width='100%'>\r\n                <Flex width='75%' flexDirection='column'>\r\n                    <TableWithApi\r\n                        api='QUERY_CUSTOMERS_INVOICES_FOR_TODAY'\r\n                        rowKey='customer_invoice_id'\r\n                        columns={customerTableColumns}\r\n                        fetchOnFirstRun\r\n                        label='cstmrs'\r\n                    />\r\n                    <TableWithApi\r\n                        api='QUERY_SUPPLIERS_INVOICES_FOR_TODAY'\r\n                        rowKey='supplier_invoice_id'\r\n                        columns={supplierTableColumns}\r\n                        fetchOnFirstRun\r\n                        label='splrs'\r\n                    />\r\n                </Flex>\r\n                <Flex width='25%' flexDirection=\"column\">\r\n                    <ChartWithApi\r\n                        api=\"QUERY_INVOICES_CHART_DATA\"\r\n                        label=\"invcs\"\r\n                        mode=\"pie\"\r\n                        width=\"100%\"\r\n                    />\r\n                    <ChartWithApi\r\n                        api=\"QUERY_MAIN_CHART_DATA\"\r\n                        label=\"vault\"\r\n                        mode=\"pie\"\r\n                        width=\"100%\"\r\n                    />\r\n                </Flex>\r\n            </Flex>\r\n\r\n        </>\r\n    )\r\n};\r\n\r\nexport default memo(DashBoard);\r\n"],"names":["Flex","_ref","children","justifyContent","width","height","_ref$padding","padding","margin","_ref$bordered","bordered","backgroundColor","_ref$borderColor","borderColor","_ref$borderWidth","borderWidth","_ref$borderRadius","borderRadius","_ref$flexDirection","flexDirection","_ref$textAlign","textAlign","_ref$hidden","hidden","wrap","prop","_objectWithoutProperties","_excluded","_useState","useState","_useState2","_slicedToArray","setBorder","useEffect","concat","_jsx","_Fragment","ChackraFlex","_objectSpread","background","memo","Modal","_ref$visible","visible","label","onClose","onOK","_ref$submitTitle","submitTitle","_ref$width","_ref$hideSaveButton","hideSaveButton","_ref$hideCloseButton","hideCloseButton","t","useTranslation","_jsxs","ModalView","isOpen","size","ModalOverlay","ModalContent","ModalHeader","ModalCloseButton","ModalBody","w","ModalFooter","Button","colorScheme","mr","onClick","TableWithApi","ref","api","postApi","columns","_ref$fetchOnFirstRun","fetchOnFirstRun","params","tableProps","checkForParams","_useFetch","useFetch","link","data","runFetch","loading","onSaveAndInsertion","useTableControlsButtons","selectedRow","setSelectedRow","_useState3","_useState4","modal","setModal","handleAdd","useCallback","query_status","handleEdit","handleCloseModal","useImperativeHandle","refreshTable","Table","dataSource","onAdd","onEdit","onDelete","onSelectedRow","row","forwardRef","IconButton","icon","_ref$disabled","disabled","_ref$height","color","_ref$margin","style","border","className","_ref$rowKey","rowKey","_ref$hideTools","hideTools","_ref$canEdit","canEdit","_ref$canAdd","canAdd","_ref$canDelete","canDelete","_ref$canExcel","canExcel","_ref$actionColumn","actionColumn","onAction","_ref$actionLabel","actionLabel","_ref$canPrint","canPrint","additionalButtons","onPrint","onSave","_ref$canSave","canSave","_ref$loading","_ref$onDoubleClick","onDoubleClick","e","console","log","pathname","useLocation","rowSelected","setRowSelected","handleSelectedRow","item","handleDouble","onExcel","pathName","replace","wb","XLSX","book_new","ws","json_to_sheet","book_append_sheet","Date","toUTCString","componentRef","useRef","TableContainer","Text","marginBottom","fontSize","fontWeight","map","button","ReactToPrint","trigger","content","current","documentTitle","Skeleton","isLoaded","fadeDuration","Box","overflowY","ChakraTable","Thead","top","position","bgColor","Tr","Th","maxWidth","minWidth","title","Tbody","column","Td","dataIndex","Array","isArray","length","as","_ref$api","newRecord","useMutation","additionalFunctionToRun","method","setRow","updateRecord","deleteRecord","record","_ref2","_ref$link","_ref$noAuthorization","noAuthorization","runOnSuccess","runOnFail","_ref$method","toast","useToast","url","API_ID","success","setSuccess","authorization","useLocalStorage","postData","_x","_asyncToGenerator","_regeneratorRuntime","mark","_callee","dataToPost","settings","fetchResponse","_context","prev","next","headers","Accept","Authorization","body","JSON","stringify","fetch","sent","json","response","description","status","duration","isClosable","message","abrupt","t0","stop","apply","arguments","BarChart","_ref$mode","mode","_ref$label","Chart","type","view","ChartWithApi","labels","datasets","setDataSource","customerTableColumns","supplierTableColumns","DashBoard"],"sourceRoot":""}