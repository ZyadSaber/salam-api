{"version":3,"file":"static/js/7.c398e0d3.chunk.js","mappings":"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","sources":["../common/button/src/saveButton.tsx","../common/hooks/src/usePrevious.ts","../common/hooks/src/useFormManager.ts","../common/hooks/src/useValidateForm.ts","../common/input-text/src/styled.ts","../common/input-text/src/inputText.tsx","../pages/items-page/src/Partials/ModalView.tsx","../pages/items-page/src/constants.ts","../pages/items-page/src/component.tsx","../node_modules/@chakra-ui/form-control/src/form-label.tsx","../node_modules/@chakra-ui/form-control/src/form-control.tsx"],"sourcesContent":["import React, { memo } from \"react\";\r\nimport Button from \"./button\"\r\nimport { saveButtonProp } from \"./interface\"\r\n\r\nconst SaveButton = ({\r\n    onOK,\r\n    width=\"40%\",\r\n    label = \"sv\",\r\n    ...props\r\n}: saveButtonProp) => {\r\n    return (\r\n        <>\r\n            <Button onClick={onOK} label=\"sv\" width={width} {...props} />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default memo(SaveButton)","import { useRef, useEffect } from \"react\";\r\n\r\nconst usePrevious = <T>(value: T): T => {\r\n  const ref = useRef<T>();\r\n\r\n  useEffect(() => {\r\n    ref.current = value;\r\n  });\r\n\r\n  return ref.current as T;\r\n};\r\n\r\nexport default usePrevious;\r\n","import { useState, useCallback, useEffect, useRef } from \"react\";\r\nimport usePrevious from \"./usePrevious\";\r\n\r\ninterface useFormManagerProps {\r\n  initialValues?: any;\r\n}\r\n\r\nconst useFormManager = ({ initialValues }: useFormManagerProps) => {\r\n  const [state, setState] = useState<typeof initialValues>(initialValues);\r\n\r\n  const hasAnyFieldChangedRef = useRef(false);\r\n  const preValues = usePrevious(initialValues);\r\n\r\n  const areInitialValuesChanged = useCallback(\r\n    () => !Object.is(JSON.stringify(preValues), JSON.stringify(initialValues)),\r\n    [initialValues, preValues]\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (areInitialValuesChanged()) {\r\n      setState({ ...initialValues });\r\n    }\r\n  }, [areInitialValuesChanged, initialValues]);\r\n\r\n  const resetForm = useCallback(() => {\r\n    hasAnyFieldChangedRef.current = false;\r\n    setState(() => initialValues);\r\n    // @ts-ignore\r\n  }, [initialValues]);\r\n\r\n  useEffect(\r\n    () => {\r\n      return resetForm;\r\n    },\r\n    // eslint-disable-next-line\r\n    []\r\n  );\r\n\r\n  const onChange = useCallback(\r\n    (eventData: any) => {\r\n      const { name, value } = eventData;\r\n      setState({ ...state, [name]: value });\r\n    },\r\n    [state]\r\n  );\r\n\r\n  const handleMultiInput = useCallback((e:any)=>{\r\n    setState({\r\n      ...state,\r\n      ...e\r\n    })\r\n  },[state])\r\n\r\n  const handleSelectWithLabelChange = useCallback(\r\n    (eventData: any) => {\r\n      setState({\r\n        ...state,\r\n        [eventData.name]: eventData.value,\r\n        [eventData.selectLabelName]: eventData.label,\r\n      });\r\n    },\r\n    [state]\r\n  );\r\n\r\n  const handleArrayChange = useCallback(\r\n    ({ name, value }: any) => {\r\n      setState({ ...state, [name]: [...state[name], value] });\r\n    },\r\n    [state]\r\n  );\r\n\r\n  return {\r\n    state,\r\n    onChange,\r\n    resetForm,\r\n    handleRootState: setState,\r\n    handleSelectWithLabelChange,\r\n    handleArrayChange,\r\n    handleMultiInput\r\n  };\r\n};\r\n\r\nexport default useFormManager;\r\n","import { useCallback } from \"react\";\r\nimport { useToast } from \"@chakra-ui/react\";\r\n\r\ninterface useValidateFormProp{\r\n  validateFelids: string[],\r\n  functionToRun: ()=>void,\r\n  stateToValidate: any\r\n}\r\n\r\nconst useValidateForm = ({\r\n    validateFelids,\r\n    functionToRun,\r\n    stateToValidate\r\n  }: useValidateFormProp) => {\r\n    const toast = useToast();\r\n\r\n  const handleValidateFelids = useCallback(()=>{\r\n    let newARR: string[] = []\r\n    validateFelids.forEach((felid)=>{\r\n      if(stateToValidate[felid] !== undefined &&  !stateToValidate[felid]){\r\n        newARR.push(felid)\r\n      }\r\n    })\r\n\r\n    newARR.length !== 0 ? \r\n    toast({\r\n      position: \"top-right\",\r\n      title: \"Error\",\r\n      description: `\r\n      Make sure to fill this required fields\r\n      ${newARR.toString()}\r\n      `,\r\n      status: \"info\",\r\n      duration: 5000,\r\n      isClosable: true,\r\n    }):\r\n    functionToRun()\r\n\r\n  },[functionToRun, stateToValidate, toast, validateFelids])\r\n\r\n  return handleValidateFelids;\r\n};\r\n\r\nexport default useValidateForm;\r\n","import styled from '@emotion/styled';\r\n\r\nexport const StyledInput = styled.input<any>`\r\nbackground: #fdfdfd;\r\nborder: 0.5px solid #cbd5e0;\r\nheight: 100%;\r\nwidth: 100%;\r\nborder-radius: 7px;\r\npadding: 0 16px;\r\n`\r\n\r\n//`border:  ${required ? `0.5px solid red` : `0.5px solid #cbd5e0`};`","import React, { memo, useCallback } from \"react\";\r\nimport { useTranslation } from 'react-i18next';\r\nimport { FormLabel, Flex } from '@chakra-ui/react'\r\nimport { StyledInput } from \"./styled\"\r\nimport { InputTextProps } from \"./interface\";\r\n\r\nconst InputText = ({\r\n    disabled,\r\n    value,\r\n    name,\r\n    label = \"\",\r\n    onChange,\r\n    height = \"65px\",\r\n    width = \"200px\",\r\n    type = \"text\",\r\n    placeHolder,\r\n    padding,\r\n    margin = \"10px\",\r\n    className = \"\",\r\n    required,\r\n    ...props\r\n}: InputTextProps) => {\r\n    const { t } = useTranslation();\r\n\r\n    const handleChange = useCallback((event: { target: { value: string; }; }) => {\r\n        onChange({ name: name, value: event.target.value })\r\n    }, [name, onChange]);\r\n\r\n    return (\r\n        <>\r\n            <Flex\r\n                direction=\"column\"\r\n                width={width}\r\n                padding={padding}\r\n                margin={margin}\r\n                height={height}\r\n            >\r\n                <FormLabel>{t(label)}</FormLabel>\r\n                <StyledInput\r\n                    placeholder={placeHolder}\r\n                    disabled={disabled}\r\n                    required={required}\r\n                    onChange={handleChange}\r\n                    width=\"100%\"\r\n                    className={className}\r\n                    value={value}\r\n                    type={type}\r\n                    {...props}\r\n                />\r\n            </Flex>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default memo(InputText)","import React, { memo, useCallback } from 'react';\r\nimport { InputText } from \"@commons/input-text\";\r\nimport { useFormManager,useValidateForm } from \"@commons/hooks\";\r\nimport { ModalViewProp } from \"@commons/global\"\r\nimport { useTableControlsButtons } from \"@commons/table\";\r\nimport { SaveButton } from \"@commons/button\"\r\n\r\nconst ModalView = ({\r\n    onClose,\r\n    selectedRow,\r\n    refreshTable\r\n}: ModalViewProp) => {\r\n\r\n    const {\r\n        state,\r\n        onChange,\r\n    } = useFormManager({\r\n            initialValues: {\r\n                ...selectedRow\r\n            }\r\n        })\r\n        \r\n        const { onSaveAndInsertion } = useTableControlsButtons({ api: \"POST_ITEMS_TABLE_DATA\", runFetch: refreshTable })\r\n        \r\n        const handleSave = useCallback(() => {\r\n            onSaveAndInsertion(state)\r\n            onClose()\r\n        }, [onClose, onSaveAndInsertion, state])\r\n        const handleValidateFelids = useValidateForm({\r\n            validateFelids:[\"item_name\", \"item_unit\"],\r\n            functionToRun:handleSave,\r\n            stateToValidate:state\r\n        })\r\n        const { item_name, item_unit, item_description } = state\r\n    return (\r\n        <>\r\n            <InputText\r\n                name=\"item_name\"\r\n                label='Name'\r\n                onChange={onChange}\r\n                value={item_name}\r\n            />\r\n            <InputText\r\n                name=\"item_unit\"\r\n                label='Unit'\r\n                onChange={onChange}\r\n                value={item_unit}\r\n            />\r\n            <InputText\r\n                name=\"item_description\"\r\n                label='nts'\r\n                onChange={onChange}\r\n                value={item_description}\r\n            />\r\n            <SaveButton\r\n                onOK={handleValidateFelids}\r\n            />\r\n        </>\r\n    )\r\n};\r\n\r\nexport default memo(ModalView)","export const columns = [\r\n  {\r\n    title: \"itmnm\",\r\n    dataIndex: \"item_name\",\r\n    width: \"20%\",\r\n  },\r\n  {\r\n    title: \"unt\",\r\n    dataIndex: \"item_unit\",\r\n    width: \"20%\",\r\n  },\r\n  {\r\n    title: \"nts\",\r\n    dataIndex: \"item_description\",\r\n    width: \"20%\",\r\n  },\r\n  {\r\n    title: \"created_at\",\r\n    dataIndex: \"created_at\",\r\n    width: \"20%\",\r\n  },\r\n  {\r\n    title: \"updated_at\",\r\n    dataIndex: \"updated_at\",\r\n    width: \"20%\",\r\n  },\r\n];\r\n","import React, { memo } from 'react';\r\nimport ModalView from \"./Partials/ModalView\";\r\nimport { TableWithApi } from \"@commons/table\";\r\nimport { columns } from \"./constants\"\r\n\r\n\r\nconst Items = () => {\r\n    return (\r\n        <>\r\n            <TableWithApi\r\n                api={\"QUERY_ITEMS_TABLE_DATA\"}\r\n                postApi={\"POST_ITEMS_TABLE_DATA\"}\r\n                columns={columns}\r\n                hideTools={false}\r\n                canEdit={true}\r\n                canAdd={true}\r\n                canDelete={true}\r\n                rowKey={\"item_id\"}\r\n                ModalContent={ModalView}\r\n                fetchOnFirstRun\r\n                canExcel\r\n            />\r\n        </>\r\n    )\r\n};\r\n\r\nexport default memo(Items);\r\n","import {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { useFormControlContext, useFormControlStyles } from \"./form-control\"\n\nexport interface FormLabelProps\n  extends HTMLChakraProps<\"label\">,\n    ThemingProps<\"FormLabel\"> {\n  /**\n   * @type React.ReactElement\n   */\n  requiredIndicator?: React.ReactElement\n  /**\n   * @type React.ReactNode\n   */\n  optionalIndicator?: React.ReactNode\n}\n\n/**\n * Used to enhance the usability of form controls.\n *\n * It is used to inform users as to what information\n * is requested for a form field.\n *\n * ♿️ Accessibility: Every form field should have a form label.\n */\nexport const FormLabel = forwardRef<FormLabelProps, \"label\">(function FormLabel(\n  passedProps,\n  ref,\n) {\n  const styles = useStyleConfig(\"FormLabel\", passedProps)\n  const props = omitThemingProps(passedProps)\n\n  const {\n    className,\n    children,\n    requiredIndicator = <RequiredIndicator />,\n    optionalIndicator = null,\n    ...rest\n  } = props\n\n  const field = useFormControlContext()\n  const ownProps = field?.getLabelProps(rest, ref) ?? { ref, ...rest }\n\n  return (\n    <chakra.label\n      {...ownProps}\n      className={cx(\"chakra-form__label\", props.className)}\n      __css={{\n        display: \"block\",\n        textAlign: \"start\",\n        ...styles,\n      }}\n    >\n      {children}\n      {field?.isRequired ? requiredIndicator : optionalIndicator}\n    </chakra.label>\n  )\n})\n\nFormLabel.displayName = \"FormLabel\"\n\nexport interface RequiredIndicatorProps extends HTMLChakraProps<\"span\"> {}\n\n/**\n * Used to show a \"required\" text or an asterisks (*) to indicate that\n * a field is required.\n */\nexport const RequiredIndicator = forwardRef<RequiredIndicatorProps, \"span\">(\n  function RequiredIndicator(props, ref) {\n    const field = useFormControlContext()\n    const styles = useFormControlStyles()\n\n    if (!field?.isRequired) return null\n\n    const className = cx(\"chakra-form__required-indicator\", props.className)\n\n    return (\n      <chakra.span\n        {...field?.getRequiredIndicatorProps(props, ref)}\n        __css={styles.requiredIndicator}\n        className={className}\n      />\n    )\n  },\n)\n\nRequiredIndicator.displayName = \"RequiredIndicator\"\n","import { createContext } from \"@chakra-ui/react-context\"\nimport { PropGetter } from \"@chakra-ui/react-types\"\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx, dataAttr } from \"@chakra-ui/shared-utils\"\nimport { useCallback, useId, useState } from \"react\"\n\nconst [FormControlStylesProvider, useFormControlStyles] = createContext<\n  Record<string, SystemStyleObject>\n>({\n  name: `FormControlStylesContext`,\n  errorMessage: `useFormControlStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<FormControl />\" `,\n})\n\nexport { useFormControlContext, useFormControlStyles }\n\nexport interface FormControlOptions {\n  /**\n   * If `true`, the form control will be required. This has 2 side effects:\n   * - The `FormLabel` will show a required indicator\n   * - The form element (e.g, Input) will have `aria-required` set to `true`\n   *\n   * @default false\n   */\n  isRequired?: boolean\n  /**\n   * If `true`, the form control will be disabled. This has 2 side effects:\n   * - The `FormLabel` will have `data-disabled` attribute\n   * - The form element (e.g, Input) will be disabled\n   *\n   * @default false\n   */\n  isDisabled?: boolean\n  /**\n   * If `true`, the form control will be invalid. This has 2 side effects:\n   * - The `FormLabel` and `FormErrorIcon` will have `data-invalid` set to `true`\n   * - The form element (e.g, Input) will have `aria-invalid` set to `true`\n   *\n   * @default false\n   */\n  isInvalid?: boolean\n  /**\n   * If `true`, the form control will be readonly\n   *\n   * @default false\n   */\n  isReadOnly?: boolean\n}\n\ninterface FormControlContext extends FormControlOptions {\n  /**\n   * The label text used to inform users as to what information is\n   * requested for a text field.\n   */\n  label?: string\n  /**\n   * The custom `id` to use for the form control. This is passed directly to the form element (e.g, Input).\n   * - The form element (e.g. Input) gets the `id`\n   * - The form label id: `form-label-${id}`\n   * - The form error text id: `form-error-text-${id}`\n   * - The form helper text id: `form-helper-text-${id}`\n   */\n  id?: string\n}\n\ntype FormControlProviderContext = Omit<\n  ReturnType<typeof useFormControlProvider>,\n  \"getRootProps\" | \"htmlProps\"\n>\n\nconst [FormControlProvider, useFormControlContext] =\n  createContext<FormControlProviderContext>({\n    strict: false,\n    name: \"FormControlContext\",\n  })\n\nfunction useFormControlProvider(props: FormControlContext) {\n  const {\n    id: idProp,\n    isRequired,\n    isInvalid,\n    isDisabled,\n    isReadOnly,\n    ...htmlProps\n  } = props\n\n  // Generate all the required ids\n  const uuid = useId()\n  const id = idProp || `field-${uuid}`\n\n  const labelId = `${id}-label`\n  const feedbackId = `${id}-feedback`\n  const helpTextId = `${id}-helptext`\n\n  /**\n   * Track whether the `FormErrorMessage` has been rendered.\n   * We use this to append its id the `aria-describedby` of the `input`.\n   */\n  const [hasFeedbackText, setHasFeedbackText] = useState(false)\n\n  /**\n   * Track whether the `FormHelperText` has been rendered.\n   * We use this to append its id the `aria-describedby` of the `input`.\n   */\n  const [hasHelpText, setHasHelpText] = useState(false)\n\n  // Track whether the form element (e.g, `input`) has focus.\n  const [isFocused, setFocus] = useState(false)\n\n  const getHelpTextProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      id: helpTextId,\n      ...props,\n      /**\n       * Notify the field context when the help text is rendered on screen,\n       * so we can apply the correct `aria-describedby` to the field (e.g. input, textarea).\n       */\n      ref: mergeRefs(forwardedRef, (node) => {\n        if (!node) return\n        setHasHelpText(true)\n      }),\n    }),\n    [helpTextId],\n  )\n\n  const getLabelProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ref: forwardedRef,\n      \"data-focus\": dataAttr(isFocused),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-readonly\": dataAttr(isReadOnly),\n      id: props.id !== undefined ? props.id : labelId,\n      htmlFor: props.htmlFor !== undefined ? props.htmlFor : id,\n    }),\n    [id, isDisabled, isFocused, isInvalid, isReadOnly, labelId],\n  )\n\n  const getErrorMessageProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      id: feedbackId,\n      ...props,\n      /**\n       * Notify the field context when the error message is rendered on screen,\n       * so we can apply the correct `aria-describedby` to the field (e.g. input, textarea).\n       */\n      ref: mergeRefs(forwardedRef, (node) => {\n        if (!node) return\n        setHasFeedbackText(true)\n      }),\n      \"aria-live\": \"polite\",\n    }),\n    [feedbackId],\n  )\n\n  const getRootProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ...htmlProps,\n      ref: forwardedRef,\n      role: \"group\",\n    }),\n    [htmlProps],\n  )\n\n  const getRequiredIndicatorProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ref: forwardedRef,\n      role: \"presentation\",\n      \"aria-hidden\": true,\n      children: props.children || \"*\",\n    }),\n    [],\n  )\n\n  return {\n    isRequired: !!isRequired,\n    isInvalid: !!isInvalid,\n    isReadOnly: !!isReadOnly,\n    isDisabled: !!isDisabled,\n    isFocused: !!isFocused,\n    onFocus: () => setFocus(true),\n    onBlur: () => setFocus(false),\n    hasFeedbackText,\n    setHasFeedbackText,\n    hasHelpText,\n    setHasHelpText,\n    id,\n    labelId,\n    feedbackId,\n    helpTextId,\n    htmlProps,\n    getHelpTextProps,\n    getErrorMessageProps,\n    getRootProps,\n    getLabelProps,\n    getRequiredIndicatorProps,\n  }\n}\n\nexport interface FormControlProps\n  extends HTMLChakraProps<\"div\">,\n    ThemingProps<\"FormControl\">,\n    FormControlContext {}\n\n/**\n * FormControl provides context such as\n * `isInvalid`, `isDisabled`, and `isRequired` to form elements.\n *\n * This is commonly used in form elements such as `input`,\n * `select`, `textarea`, etc.\n *\n * @see Docs https://chakra-ui.com/docs/components/form-control\n */\nexport const FormControl = forwardRef<FormControlProps, \"div\">(\n  function FormControl(props, ref) {\n    const styles = useMultiStyleConfig(\"Form\", props)\n    const ownProps = omitThemingProps(props)\n    const {\n      getRootProps,\n      htmlProps: _,\n      ...context\n    } = useFormControlProvider(ownProps)\n\n    const className = cx(\"chakra-form-control\", props.className)\n\n    return (\n      <FormControlProvider value={context}>\n        <FormControlStylesProvider value={styles}>\n          <chakra.div\n            {...getRootProps({}, ref)}\n            className={className}\n            __css={styles[\"container\"]}\n          />\n        </FormControlStylesProvider>\n      </FormControlProvider>\n    )\n  },\n)\n\nFormControl.displayName = \"FormControl\"\n\nexport interface FormHelperTextProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * FormHelperText\n *\n * Assistive component that conveys additional guidance\n * about the field, such as how it will be used and what\n * types in values should be provided.\n */\nexport const FormHelperText = forwardRef<FormHelperTextProps, \"div\">(\n  function FormHelperText(props, ref) {\n    const field = useFormControlContext()\n    const styles = useFormControlStyles()\n    const className = cx(\"chakra-form__helper-text\", props.className)\n    return (\n      <chakra.div\n        {...field?.getHelpTextProps(props, ref)}\n        __css={styles.helperText}\n        className={className}\n      />\n    )\n  },\n)\n\nFormHelperText.displayName = \"FormHelperText\"\n"],"names":["SaveButton","_ref","onOK","_ref$width","width","props","label","_objectWithoutProperties","_excluded","_jsx","_Fragment","children","Button","_objectSpread","onClick","memo","value","ref","useRef","useEffect","current","initialValues","_useState","useState","_useState2","_slicedToArray","state","setState","hasAnyFieldChangedRef","preValues","usePrevious","areInitialValuesChanged","useCallback","Object","is","JSON","stringify","resetForm","onChange","eventData","name","_defineProperty","handleMultiInput","e","handleSelectWithLabelChange","_objectSpread3","selectLabelName","handleArrayChange","_ref2","concat","_toConsumableArray","handleRootState","validateFelids","functionToRun","stateToValidate","toast","useToast","newARR","forEach","felid","undefined","push","length","position","title","description","toString","status","duration","isClosable","StyledInput","styled","input","_templateObject","_taggedTemplateLiteral","InputText","disabled","_ref$label","_ref$height","height","_ref$type","type","placeHolder","padding","_ref$margin","margin","_ref$className","className","required","t","useTranslation","handleChange","event","target","_jsxs","Flex","direction","FormLabel","placeholder","ModalView","onClose","selectedRow","refreshTable","_useFormManager","useFormManager","onSaveAndInsertion","useTableControlsButtons","api","runFetch","handleSave","handleValidateFelids","useValidateForm","item_name","item_unit","item_description","columns","dataIndex","Items","TableWithApi","postApi","hideTools","canEdit","canAdd","canDelete","rowKey","ModalContent","fetchOnFirstRun","canExcel","forwardRef","passedProps","_a","styles","useStyleConfig","omitThemingProps","_props$requiredIndica","requiredIndicator","jsx","RequiredIndicator","_props$optionalIndica","optionalIndicator","rest","field","useFormControlContext","ownProps","getLabelProps","jsxs","chakra","cx","__css","display","textAlign","isRequired","displayName","useFormControlStyles","span","getRequiredIndicatorProps","_createContext","createContext","errorMessage","_createContext2","FormControlStylesProvider","_createContext3","strict","_createContext4","FormControlProvider","FormControl","useMultiStyleConfig","_useFormControlProvid","idProp","id","isInvalid","isDisabled","isReadOnly","htmlProps","uuid","useId","labelId","feedbackId","helpTextId","hasFeedbackText","setHasFeedbackText","_useState3","_useState4","hasHelpText","setHasHelpText","_useState5","_useState6","isFocused","setFocus","getHelpTextProps","props2","arguments","forwardedRef","mergeRefs","node","dataAttr","htmlFor","getErrorMessageProps","getRootProps","role","onFocus","onBlur","useFormControlProvider","context","_excluded2","div","helperText"],"sourceRoot":""}