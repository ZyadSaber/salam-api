{"version":3,"file":"static/js/7.ea4eb1ce.chunk.js","mappings":"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","sources":["../common/button/src/saveButton.tsx","../common/hooks/src/usePrevious.ts","../common/hooks/src/useFormManager.ts","../common/input-text/src/inputText.tsx","../pages/items-page/src/Partials/ModalView.tsx","../pages/items-page/src/constants.ts","../pages/items-page/src/component.tsx"],"sourcesContent":["import React, { memo } from \"react\";\r\nimport { Button } from '@chakra-ui/react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { saveButtonProp } from \"./interface\"\r\n\r\nconst SaveButton = ({\r\n    saveTitle = 'sv',\r\n    onOK,\r\n    disabled,\r\n    width = \"10%\",\r\n    margin = \"5px\",\r\n    padding,\r\n}: saveButtonProp) => {\r\n    const { t } = useTranslation()\r\n    return (\r\n        <>\r\n            <Button colorScheme='blue' onClick={onOK} disabled={disabled} style={{\r\n                width: width,\r\n                margin: margin,\r\n                padding: padding\r\n            }} >{t(saveTitle)}</Button>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default memo(SaveButton)","import { useRef, useEffect } from \"react\";\r\n\r\nconst usePrevious = <T>(value: T): T => {\r\n  const ref = useRef<T>();\r\n\r\n  useEffect(() => {\r\n    ref.current = value;\r\n  });\r\n\r\n  return ref.current as T;\r\n};\r\n\r\nexport default usePrevious;\r\n","import { useState, useCallback, useEffect, useRef } from \"react\";\r\nimport usePrevious from \"./usePrevious\";\r\n\r\ninterface useFormManagerProps {\r\n  initialValues?: any;\r\n  setSelectedRow?: any;\r\n  tableModal?: boolean;\r\n}\r\n\r\nconst useFormManager = ({ initialValues }: useFormManagerProps) => {\r\n  const [state, setState] = useState<typeof initialValues>(initialValues);\r\n\r\n  const hasAnyFieldChangedRef = useRef(false);\r\n  const preValues = usePrevious(initialValues);\r\n\r\n  const areInitialValuesChanged = useCallback(\r\n    () => !Object.is(JSON.stringify(preValues), JSON.stringify(initialValues)),\r\n    [initialValues, preValues]\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (areInitialValuesChanged()) {\r\n      setState({ ...initialValues });\r\n    }\r\n  }, [areInitialValuesChanged, initialValues]);\r\n\r\n  const resetForm = useCallback(() => {\r\n    hasAnyFieldChangedRef.current = false;\r\n    setState(() => initialValues);\r\n    // @ts-ignore\r\n  }, [initialValues]);\r\n\r\n  useEffect(\r\n    () => {\r\n      return resetForm;\r\n    },\r\n    // eslint-disable-next-line\r\n    []\r\n  );\r\n\r\n  const onChange = useCallback(\r\n    (eventData: any) => {\r\n      const { name, value } = eventData;\r\n      setState({ ...state, [name]: value });\r\n    },\r\n    [state]\r\n  );\r\n\r\n  const handleRootState = useCallback((e: any) => {\r\n    setState(e);\r\n  }, []);\r\n\r\n  const handleSelectWithLabelChange = useCallback(\r\n    (eventData: any) => {\r\n      setState({\r\n        ...state,\r\n        [eventData.name]: eventData.value,\r\n        [eventData.selectLabelName]: eventData.label,\r\n      });\r\n    },\r\n    [state]\r\n  );\r\n\r\n  const handleArrayChange = useCallback(\r\n    ({ name, value }: any) => {\r\n      setState({ ...state, [name]: [...state[name], value] });\r\n    },\r\n    [state]\r\n  );\r\n\r\n  return {\r\n    state,\r\n    onChange,\r\n    resetForm,\r\n    handleRootState,\r\n    handleSelectWithLabelChange,\r\n    handleArrayChange,\r\n  };\r\n};\r\n\r\nexport default useFormManager;\r\n","import React, { memo, useCallback } from \"react\";\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Input, FormLabel, Flex } from '@chakra-ui/react'\r\nimport { InputTextProps } from \"./interface\";\r\n\r\nconst InputText = ({\r\n    disabled,\r\n    value,\r\n    name,\r\n    Label = \"\",\r\n    onChange,\r\n    width = \"200px\",\r\n    type = \"text\",\r\n    placeHolder,\r\n    padding,\r\n    margin = \"10px\",\r\n    className = \"\",\r\n    required = false\r\n}: InputTextProps) => {\r\n    const { t } = useTranslation()\r\n\r\n    const handleChange = useCallback((event: { target: { value: string; }; }) => {\r\n        onChange({ name: name, value: event.target.value })\r\n    }, [name, onChange])\r\n\r\n    return (\r\n        <>\r\n            <Flex\r\n                direction=\"column\"\r\n                width={width}\r\n                padding={padding}\r\n                margin={margin}\r\n            >\r\n                <FormLabel>{t(Label)}</FormLabel>\r\n                <Input\r\n                    placeholder={placeHolder}\r\n                    size='md'\r\n                    isDisabled={disabled}\r\n                    isRequired={required}\r\n                    onChange={handleChange}\r\n                    width=\"100%\"\r\n                    className={className}\r\n                    value={value}\r\n                    type={type}\r\n                />\r\n            </Flex>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default memo(InputText)","import React, { memo, useCallback } from 'react';\r\nimport { InputText } from \"@commons/input-text\";\r\nimport { useFormManager } from \"@commons/hooks\";\r\nimport { ModalViewProp } from \"@commons/global\"\r\nimport { useTableControlsButtons } from \"@commons/table\";\r\nimport { SaveButton } from \"@commons/button\"\r\n\r\nconst ModalView = ({\r\n    onClose,\r\n    selectedRow,\r\n    refreshTable\r\n}: ModalViewProp) => {\r\n\r\n    const {\r\n        state,\r\n        onChange,\r\n    }\r\n        = useFormManager({\r\n            initialValues: {\r\n                ...selectedRow\r\n            }\r\n        })\r\n    const { item_id, item_name, item_unit, item_description, query_status } = state\r\n\r\n    const { onSaveAndInsertion } = useTableControlsButtons({ api: \"POST_ITEMS_TABLE_DATA\", runFetch: refreshTable })\r\n\r\n    const handleSave = useCallback(() => {\r\n        const record = {\r\n            item_id,\r\n            item_name,\r\n            item_unit,\r\n            item_description,\r\n            query_status\r\n        }\r\n        onSaveAndInsertion(record)\r\n        onClose()\r\n    }, [item_description, item_id, item_name, item_unit, onClose, onSaveAndInsertion, query_status])\r\n\r\n    return (\r\n        <>\r\n            <InputText\r\n                name=\"item_name\"\r\n                Label='Name'\r\n                onChange={onChange}\r\n                value={item_name}\r\n            />\r\n            <InputText\r\n                name=\"item_unit\"\r\n                Label='Unit'\r\n                onChange={onChange}\r\n                value={item_unit}\r\n            />\r\n            <InputText\r\n                name=\"item_description\"\r\n                Label='nts'\r\n                onChange={onChange}\r\n                value={item_description}\r\n            />\r\n            <SaveButton\r\n                onOK={handleSave}\r\n            />\r\n        </>\r\n    )\r\n};\r\n\r\nexport default memo(ModalView)","export const columns = [\r\n  {\r\n    title: \"itmnm\",\r\n    dataIndex: \"item_name\",\r\n    width: \"20%\",\r\n  },\r\n  {\r\n    title: \"unt\",\r\n    dataIndex: \"item_unit\",\r\n    width: \"20%\",\r\n  },\r\n  {\r\n    title: \"nts\",\r\n    dataIndex: \"item_description\",\r\n    width: \"20%\",\r\n  },\r\n  {\r\n    title: \"created_at\",\r\n    dataIndex: \"created_at\",\r\n    width: \"20%\",\r\n  },\r\n  {\r\n    title: \"updated_at\",\r\n    dataIndex: \"updated_at\",\r\n    width: \"20%\",\r\n  },\r\n];\r\n","import React, { memo } from 'react';\r\nimport ModalView from \"./Partials/ModalView\";\r\nimport { TableWithApi } from \"@commons/table\";\r\nimport { columns } from \"./constants\"\r\n\r\n\r\nconst Items = () => {\r\n    return (\r\n        <>\r\n            <TableWithApi\r\n                api={\"QUERY_ITEMS_TABLE_DATA\"}\r\n                postApi={\"POST_ITEMS_TABLE_DATA\"}\r\n                columns={columns}\r\n                hideTools={false}\r\n                canEdit={true}\r\n                canAdd={true}\r\n                canDelete={true}\r\n                rowKey={\"item_id\"}\r\n                ModalContent={ModalView}\r\n                fetchOnFirstRun\r\n                canExcel\r\n            />\r\n        </>\r\n    )\r\n};\r\n\r\nexport default memo(Items);\r\n"],"names":["SaveButton","saveTitle","onOK","disabled","width","margin","padding","t","useTranslation","colorScheme","onClick","style","memo","value","ref","useRef","useEffect","current","initialValues","useState","state","setState","hasAnyFieldChangedRef","preValues","usePrevious","areInitialValuesChanged","useCallback","Object","is","JSON","stringify","resetForm","onChange","eventData","name","handleRootState","e","handleSelectWithLabelChange","selectLabelName","label","handleArrayChange","InputText","Label","type","placeHolder","className","required","handleChange","event","target","direction","I","placeholder","size","isDisabled","isRequired","ModalView","onClose","selectedRow","refreshTable","useFormManager","item_id","item_name","item_unit","item_description","query_status","onSaveAndInsertion","useTableControlsButtons","api","runFetch","handleSave","columns","title","dataIndex","Items","postApi","hideTools","canEdit","canAdd","canDelete","rowKey","ModalContent","fetchOnFirstRun","canExcel"],"sourceRoot":""}