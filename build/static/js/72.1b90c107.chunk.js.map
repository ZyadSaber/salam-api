{"version":3,"file":"static/js/72.1b90c107.chunk.js","mappings":"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","sources":["../common/Flex/src/index.tsx","../common/button/src/iconButton.tsx","../common/TableView/src/Table.tsx","../common/button/src/saveButton.tsx","../common/hooks/src/usePrevious.ts","../common/hooks/src/useFormManager.ts","../common/input-text/src/styled.ts","../common/input-text/src/inputText.tsx","../pages/pages-parent-page/src/Partials/ModalView.tsx","../pages/pages-parent-page/src/constants.ts","../pages/pages-parent-page/src/component.tsx"],"sourcesContent":["import React, { memo, useEffect, useState } from \"react\";\r\nimport { Flex as ChackraFlex } from \"@chakra-ui/react\"\r\nimport { flexProp } from \"./interface\"\r\n\r\nconst Flex = ({\r\n    children,\r\n    justifyContent,\r\n    width,\r\n    height,\r\n    padding = \"10px\",\r\n    margin,\r\n    bordered = false,\r\n    backgroundColor,\r\n    borderColor = \"#3c8dcf\",\r\n    borderWidth = \"px\",\r\n    borderRadius = \"5px\",\r\n    flexDirection = \"row\",\r\n    textAlign = \"\",\r\n    hidden = false,\r\n    wrap,\r\n    ...prop\r\n}: any) => {\r\n    const [border, setBorder] = useState(\"\")\r\n    useEffect(() => {\r\n        if (bordered) {\r\n            setBorder(`${borderWidth} solid ${borderColor}`)\r\n        }\r\n    }, [borderColor, borderWidth, bordered])\r\n    return (\r\n        <>\r\n            <ChackraFlex\r\n                width={width}\r\n                height={height}\r\n                padding={padding}\r\n                margin={margin}\r\n                background={backgroundColor}\r\n                borderRadius={borderRadius}\r\n                flexDirection={flexDirection}\r\n                textAlign={textAlign}\r\n                justifyContent={justifyContent}\r\n                hidden={hidden}\r\n                //@ts-ignore\r\n                wrap={wrap ? \"wrap\" : \"\"}\r\n                {...prop}\r\n            >\r\n                {children}\r\n            </ChackraFlex>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default memo(Flex)","import React, { memo } from \"react\";\r\nimport { iconButtonProp } from \"./interface\"\r\n\r\nconst IconButton = ({\r\n    icon,\r\n    onClick,\r\n    disabled = false,\r\n    width = \"30px\",\r\n    height = \"30px\",\r\n    color,\r\n    margin = \"10px\",\r\n    padding,\r\n    hidden = false\r\n}: iconButtonProp) => {\r\n    return (\r\n        <>\r\n            <button style={{\r\n                border: \"none\",\r\n                width: width,\r\n                height: height,\r\n                backgroundColor: color,\r\n                padding: padding,\r\n                margin: margin,\r\n                borderRadius: \"20px\"\r\n            }} hidden={hidden} onClick={onClick} disabled={disabled} >\r\n                <i className={icon}></i>\r\n            </button>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default memo(IconButton)","import React, { useState, useCallback, useRef } from 'react';\r\nimport { Button, IconButton } from \"@commons/button\";\r\nimport { useLocation } from 'react-router-dom';\r\nimport * as XLSX from \"xlsx\";\r\nimport { useTranslation } from 'react-i18next';\r\nimport ReactToPrint from 'react-to-print';\r\nimport {\r\n    Table as ChakraTable,\r\n    Thead,\r\n    Tbody,\r\n    // Tfoot,\r\n    Text,\r\n    Box,\r\n    Tr,\r\n    Th,\r\n    Td,\r\n    TableContainer,\r\n    Skeleton,\r\n} from '@chakra-ui/react'\r\nimport Flex from \"@commons/flex\";\r\nimport { TableProps, additionalButtonsType } from \"./interface\";\r\n\r\n\r\nconst Table = ({\r\n    dataSource,\r\n    height = \"300px\",\r\n    rowKey = \"rowKey\",\r\n    columns,\r\n    hideTools = true,\r\n    canEdit = false,\r\n    canAdd = false,\r\n    canDelete = false,\r\n    canExcel = false,\r\n    onAdd,\r\n    onEdit,\r\n    onDelete,\r\n    actionColumn = false,\r\n    onAction,\r\n    actionLabel = \"\",\r\n    onSelectedRow,\r\n    label,\r\n    canPrint = false,\r\n    onPrint,\r\n    additionalButtons,\r\n    onSave,\r\n    canSave = false,\r\n    width = \"100%\",\r\n    margin = \"\",\r\n    padding = \"\",\r\n    loading = false,\r\n    onDoubleClick = (e) => { console.log(e) }\r\n}: TableProps) => {\r\n    const { pathname } = useLocation()\r\n    const { t } = useTranslation()\r\n    const [rowSelected, setRowSelected] = useState()\r\n    const handleSelectedRow = useCallback((item: any) => () => {\r\n        if (onSelectedRow) onSelectedRow(item)\r\n        setRowSelected(item)\r\n    }, [onSelectedRow])\r\n\r\n    const handleDouble = useCallback((item: any) => () => {\r\n        if (onDoubleClick) onDoubleClick(item)\r\n        setRowSelected(item)\r\n    }, [onDoubleClick])\r\n\r\n    const onExcel = useCallback(() => {\r\n        const pathName = pathname.replace(\"/\", \"\")\r\n        const wb = XLSX.utils.book_new(),\r\n            //@ts-ignore\r\n            ws = XLSX.utils.json_to_sheet(dataSource)\r\n        XLSX.utils.book_append_sheet(wb, ws, pathName)\r\n        XLSX.writeFile(wb, `${pathName} ${new Date().toUTCString()}.xlsx`)\r\n    }, [dataSource, pathname])\r\n\r\n    const componentRef = useRef();\r\n\r\n    return (\r\n        <>\r\n            <TableContainer width={width} padding={padding} margin={margin}>\r\n                {label && <Text width=\"100%\" textAlign=\"center\" marginBottom=\"7px\" fontSize='md' fontWeight=\"bold\">{t(label)}</Text>}\r\n                <Flex\r\n                    width='100%'\r\n                    padding='0'\r\n                    margin='5px 0'\r\n                    justifyContent='center'\r\n                    hidden={hideTools}\r\n                >\r\n                    <IconButton\r\n                        icon='fa-sharp fa-solid fa-plus'\r\n                        onClick={onAdd}\r\n                        hidden={!canAdd}\r\n                    />\r\n                    <IconButton\r\n                        icon='fa-sharp fa-solid fa-pen-clip'\r\n                        onClick={onEdit}\r\n                        hidden={!canEdit}\r\n                        disabled={!rowSelected}\r\n                    />\r\n                    <IconButton\r\n                        icon='fa-sharp fa-solid fa-trash'\r\n                        onClick={onDelete}\r\n                        hidden={!canDelete}\r\n                        disabled={!rowSelected}\r\n                    />\r\n                    {additionalButtons && additionalButtons.map((button: additionalButtonsType) => {\r\n                        return (\r\n                            <IconButton\r\n                                icon={button.icon}\r\n                                onClick={button.onClick}\r\n                                disabled={button.disabled}\r\n                                hidden={false}\r\n                            />\r\n                        )\r\n                    })}\r\n                    <IconButton\r\n                        icon='fa-solid fa-floppy-disk'\r\n                        onClick={onSave}\r\n                        hidden={!canSave}\r\n                        disabled={!canSave}\r\n                    />\r\n                    <ReactToPrint\r\n                        trigger={() => <IconButton\r\n                            icon='fa-solid fa-print'\r\n                            hidden={!canPrint}\r\n                            disabled={!canPrint}\r\n                        />}\r\n                        //@ts-ignore\r\n                        content={() => {\r\n                            return (\r\n                                componentRef.current\r\n                            )\r\n                        }}\r\n                        documentTitle=\"dd\"\r\n                    />\r\n                    <IconButton\r\n                        icon='fa-sharp fa-regular fa-file-excel'\r\n                        onClick={onExcel}\r\n                        hidden={!canExcel}\r\n                        disabled={!canExcel}\r\n                    />\r\n                </Flex>\r\n                <Skeleton isLoaded={!loading} fadeDuration={0} >\r\n                    <Box overflowY=\"auto\" height={height}>\r\n                        <ChakraTable\r\n                            //@ts-ignore\r\n                            ref={componentRef}\r\n                        >\r\n                            <Thead top={0} position=\"sticky\" bgColor=\"#3edae6\">\r\n                                <Tr>\r\n                                    {columns.map((item: any) => {\r\n                                        return (\r\n                                            <Th maxWidth={item.width} minWidth={item.width}>\r\n                                                {t(item.title)}\r\n                                            </Th>\r\n                                        )\r\n                                    })}\r\n                                    <Th hidden={!actionColumn}>{t(\"actn\")}</Th>\r\n                                </Tr>\r\n                            </Thead>\r\n                            <Tbody>\r\n                                {dataSource?.map((item: any) => {\r\n                                    return (\r\n                                        <Tr key={item[rowKey]} onClick={handleSelectedRow(item)} onDoubleClick={handleDouble(item)} background={`${rowSelected === item ? \"#dbffbf\" : \"\"}`} >\r\n                                            {columns.map((column: any) => {\r\n                                                return (\r\n                                                    <Td maxWidth={column.width} minWidth={column.width}>\r\n                                                        {item[column.dataIndex]}\r\n                                                    </Td>\r\n                                                )\r\n                                            })}\r\n                                            <Td hidden={!actionColumn}>\r\n                                                <Button\r\n                                                    label={actionLabel}\r\n                                                    onClick={() => { onAction(item) }}\r\n                                                />\r\n                                            </Td>\r\n                                        </Tr>\r\n                                    )\r\n                                })}\r\n                            </Tbody>\r\n\r\n                            {/* <Tfoot>\r\n                        <Tr>\r\n                        <Th>To convert</Th>\r\n                        <Th>into</Th>\r\n                        <Th isNumeric>multiply by</Th>\r\n                        </Tr>\r\n                    </Tfoot> */}\r\n\r\n                        </ChakraTable>\r\n\r\n                        {!Array.isArray(dataSource) || dataSource.length === 0 && !loading ? <Flex justifyContent='center' width='100%'>\r\n                            <Text as='b' fontSize='md' color='red'>No Data</Text>\r\n                        </Flex> : <></>}\r\n                    </Box>\r\n                </Skeleton>\r\n            </TableContainer>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Table;","import React, { memo } from \"react\";\r\nimport Button from \"./button\"\r\nimport { saveButtonProp } from \"./interface\"\r\n\r\nconst SaveButton = ({\r\n    onOK,\r\n    width=\"40%\",\r\n    label = \"sv\",\r\n    ...props\r\n}: saveButtonProp) => {\r\n    return (\r\n        <>\r\n            <Button onClick={onOK} label=\"sv\" width={width} {...props} />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default memo(SaveButton)","import { useRef, useEffect } from \"react\";\r\n\r\nconst usePrevious = <T>(value: T): T => {\r\n  const ref = useRef<T>();\r\n\r\n  useEffect(() => {\r\n    ref.current = value;\r\n  });\r\n\r\n  return ref.current as T;\r\n};\r\n\r\nexport default usePrevious;\r\n","import { useState, useCallback, useEffect, useRef } from \"react\";\r\nimport usePrevious from \"./usePrevious\";\r\n\r\ninterface useFormManagerProps {\r\n  initialValues?: any;\r\n  setSelectedRow?: any;\r\n  tableModal?: boolean;\r\n}\r\n\r\nconst useFormManager = ({ initialValues }: useFormManagerProps) => {\r\n  const [state, setState] = useState<typeof initialValues>(initialValues);\r\n\r\n  const hasAnyFieldChangedRef = useRef(false);\r\n  const preValues = usePrevious(initialValues);\r\n\r\n  const areInitialValuesChanged = useCallback(\r\n    () => !Object.is(JSON.stringify(preValues), JSON.stringify(initialValues)),\r\n    [initialValues, preValues]\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (areInitialValuesChanged()) {\r\n      setState({ ...initialValues });\r\n    }\r\n  }, [areInitialValuesChanged, initialValues]);\r\n\r\n  const resetForm = useCallback(() => {\r\n    hasAnyFieldChangedRef.current = false;\r\n    setState(() => initialValues);\r\n    // @ts-ignore\r\n  }, [initialValues]);\r\n\r\n  useEffect(\r\n    () => {\r\n      return resetForm;\r\n    },\r\n    // eslint-disable-next-line\r\n    []\r\n  );\r\n\r\n  const onChange = useCallback(\r\n    (eventData: any) => {\r\n      const { name, value } = eventData;\r\n      setState({ ...state, [name]: value });\r\n    },\r\n    [state]\r\n  );\r\n\r\n  const handleRootState = useCallback((e: any) => {\r\n    setState(e);\r\n  }, []);\r\n\r\n  const handleSelectWithLabelChange = useCallback(\r\n    (eventData: any) => {\r\n      setState({\r\n        ...state,\r\n        [eventData.name]: eventData.value,\r\n        [eventData.selectLabelName]: eventData.label,\r\n      });\r\n    },\r\n    [state]\r\n  );\r\n\r\n  const handleArrayChange = useCallback(\r\n    ({ name, value }: any) => {\r\n      setState({ ...state, [name]: [...state[name], value] });\r\n    },\r\n    [state]\r\n  );\r\n\r\n  return {\r\n    state,\r\n    onChange,\r\n    resetForm,\r\n    handleRootState,\r\n    handleSelectWithLabelChange,\r\n    handleArrayChange,\r\n  };\r\n};\r\n\r\nexport default useFormManager;\r\n","import styled from '@emotion/styled';\r\n\r\nexport const StyledInput = styled.input<any>`\r\nbackground: #fdfdfd;\r\nborder: 0.5px solid #cbd5e0;\r\nheight: 100%;\r\nwidth: 100%;\r\nborder-radius: 7px;\r\npadding: 0 16px;\r\n`\r\n\r\n//`border:  ${required ? `0.5px solid red` : `0.5px solid #cbd5e0`};`","import React, { memo, useCallback } from \"react\";\r\nimport { useTranslation } from 'react-i18next';\r\nimport { FormLabel, Flex } from '@chakra-ui/react'\r\nimport { StyledInput } from \"./styled\"\r\nimport { InputTextProps } from \"./interface\";\r\n\r\nconst InputText = ({\r\n    disabled,\r\n    value,\r\n    name,\r\n    Label = \"\",\r\n    onChange,\r\n    height = \"65px\",\r\n    width = \"200px\",\r\n    type = \"text\",\r\n    placeHolder,\r\n    padding,\r\n    margin = \"10px\",\r\n    className = \"\",\r\n    required,\r\n    ...props\r\n}: InputTextProps) => {\r\n    const { t } = useTranslation();\r\n\r\n    const handleChange = useCallback((event: { target: { value: string; }; }) => {\r\n        onChange({ name: name, value: event.target.value })\r\n    }, [name, onChange]);\r\n\r\n    return (\r\n        <>\r\n            <Flex\r\n                direction=\"column\"\r\n                width={width}\r\n                padding={padding}\r\n                margin={margin}\r\n                height={height}\r\n            >\r\n                <FormLabel>{t(Label)}</FormLabel>\r\n                <StyledInput\r\n                    placeholder={placeHolder}\r\n                    disabled={disabled}\r\n                    required={required}\r\n                    onChange={handleChange}\r\n                    width=\"100%\"\r\n                    className={className}\r\n                    value={value}\r\n                    type={type}\r\n                    {...props}\r\n                />\r\n            </Flex>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default memo(InputText)","import React, { memo, useCallback } from 'react';\r\nimport { InputText } from \"@commons/input-text\";\r\nimport { useFormManager } from '@commons/hooks';\r\nimport { ModalViewProp } from \"@commons/global\"\r\nimport { useTableControlsButtons } from \"@commons/table\";\r\nimport { SaveButton } from \"@commons/button\";\r\nimport { CheckBox } from \"@commons/check-box\";\r\nimport { Flex } from '@chakra-ui/react';\r\n\r\nconst ModalView = ({\r\n    onClose,\r\n    selectedRow,\r\n    refreshTable\r\n}: ModalViewProp) => {\r\n    const {\r\n        state,\r\n        onChange,\r\n    }\r\n        = useFormManager({\r\n            initialValues: {\r\n                ...selectedRow\r\n            }\r\n        })\r\n    const { onSaveAndInsertion } = useTableControlsButtons({ api: \"POST_PAGES_PARENT_DATA_TABLE\", runFetch: refreshTable })\r\n\r\n    const handleSave = useCallback(() => {\r\n        onSaveAndInsertion(state)\r\n        onClose()\r\n    }, [onSaveAndInsertion, state, onClose])\r\n\r\n    console.log(state.page_name)\r\n\r\n    return (\r\n        <Flex margin={0} padding={0} gap={0} direction=\"column\" width=\"100%\"> \r\n        <Flex width=\"100%\">\r\n            <InputText\r\n                name=\"page_parent_id\"\r\n                Label='page_parent_id'\r\n                onChange={onChange}\r\n                value={state.page_parent_id}\r\n                width=\"20%\"\r\n                disabled\r\n            />\r\n            <InputText\r\n                name=\"page_parent_name\"\r\n                Label='page_parent_name'\r\n                onChange={onChange}\r\n                value={state.page_parent_name}\r\n                width=\"60%\"\r\n            />\r\n            <CheckBox\r\n                name=\"hidden\"\r\n                label='hidden'\r\n                onChange={onChange}\r\n                value={state.hidden}\r\n            />\r\n            </Flex>\r\n            <SaveButton\r\n                onClick={handleSave}\r\n            />\r\n        </Flex>\r\n    )\r\n};\r\n\r\nexport default memo(ModalView)","export const columns = [\r\n  {\r\n    title: \"page_parent_id\",\r\n    dataIndex: \"page_parent_id\",\r\n    width: \"10%\",\r\n  },\r\n  {\r\n    title: \"parent_name\",\r\n    dataIndex: \"page_parent_name\",\r\n    width: \"35%\",\r\n  },\r\n  {\r\n    title: \"hidden\",\r\n    dataIndex: \"hidden\",\r\n    width: \"15%\",\r\n  },\r\n  {\r\n    title: \"created_at\",\r\n    dataIndex: \"created_at\",\r\n    width: \"20%\",\r\n  },\r\n  {\r\n    title: \"updated_at\",\r\n    dataIndex: \"updated_at\",\r\n    width: \"20%\",\r\n  },\r\n];\r\n","import React, { memo } from \"react\";\r\nimport ModalView from \"./Partials/ModalView\";\r\nimport { TableWithApi } from \"@commons/table\";\r\nimport { columns } from \"./constants\"\r\n\r\nconst PagesParent = () => {\r\n    return (\r\n        <>\r\n            <TableWithApi\r\n                api={\"QUERY_PAGES_PARENT_DATA_TABLE\"}\r\n                postApi={\"POST_PAGES_PARENT_DATA_TABLE\"}\r\n                columns={columns}\r\n                hideTools={false}\r\n                canEdit={true}\r\n                canAdd={true}\r\n                canDelete={true}\r\n                canExcel={false}\r\n                rowKey={\"page_parent_id\"}\r\n                ModalContent={ModalView}\r\n                fetchOnFirstRun\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default memo(PagesParent)"],"names":["Flex","_ref","children","justifyContent","width","height","_ref$padding","padding","margin","_ref$bordered","bordered","backgroundColor","_ref$borderColor","borderColor","_ref$borderWidth","borderWidth","_ref$borderRadius","borderRadius","_ref$flexDirection","flexDirection","_ref$textAlign","textAlign","_ref$hidden","hidden","wrap","prop","_objectWithoutProperties","_excluded","_useState","useState","_useState2","_slicedToArray","setBorder","useEffect","concat","_jsx","_Fragment","ChackraFlex","_objectSpread","background","memo","IconButton","icon","onClick","_ref$disabled","disabled","_ref$width","_ref$height","color","_ref$margin","style","border","className","dataSource","_ref$rowKey","rowKey","columns","_ref$hideTools","hideTools","_ref$canEdit","canEdit","_ref$canAdd","canAdd","_ref$canDelete","canDelete","_ref$canExcel","canExcel","onAdd","onEdit","onDelete","_ref$actionColumn","actionColumn","onAction","_ref$actionLabel","actionLabel","onSelectedRow","label","_ref$canPrint","canPrint","additionalButtons","onPrint","onSave","_ref$canSave","canSave","_ref$loading","loading","_ref$onDoubleClick","onDoubleClick","e","console","log","pathname","useLocation","t","useTranslation","rowSelected","setRowSelected","handleSelectedRow","useCallback","item","handleDouble","onExcel","pathName","replace","wb","XLSX","book_new","ws","json_to_sheet","book_append_sheet","Date","toUTCString","componentRef","useRef","_jsxs","TableContainer","Text","marginBottom","fontSize","fontWeight","map","button","ReactToPrint","trigger","content","current","documentTitle","Skeleton","isLoaded","fadeDuration","Box","overflowY","ChakraTable","ref","Thead","top","position","bgColor","Tr","Th","maxWidth","minWidth","title","Tbody","column","Td","dataIndex","Button","Array","isArray","length","as","SaveButton","onOK","props","value","initialValues","state","setState","hasAnyFieldChangedRef","preValues","usePrevious","areInitialValuesChanged","Object","is","JSON","stringify","resetForm","onChange","eventData","name","_defineProperty","handleRootState","handleSelectWithLabelChange","_objectSpread3","selectLabelName","handleArrayChange","_ref2","_toConsumableArray","StyledInput","styled","input","_templateObject","_taggedTemplateLiteral","InputText","_ref$Label","Label","_ref$type","type","placeHolder","_ref$className","required","handleChange","event","target","direction","FormLabel","placeholder","ModalView","onClose","selectedRow","refreshTable","_useFormManager","useFormManager","onSaveAndInsertion","useTableControlsButtons","api","runFetch","handleSave","page_name","gap","page_parent_id","page_parent_name","CheckBox","PagesParent","TableWithApi","postApi","ModalContent","fetchOnFirstRun"],"sourceRoot":""}