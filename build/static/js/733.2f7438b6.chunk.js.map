{"version":3,"file":"static/js/733.2f7438b6.chunk.js","mappings":"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","sources":["../common/TableView/src/hooks/useTableControlsButtons.ts","../common/TableView/src/ApiTable.tsx","../common/button/src/iconButton.tsx","../common/TableView/src/Table.tsx","../common/global/src/api.ts","../common/hooks/src/useFetch.ts","../common/hooks/src/useFormManager.ts","../common/hooks/src/usePost.ts","../common/input-text/src/inputText.tsx","../common/modal/src/index.tsx","../pages/suppliers-page/src/Partials/ModalView.tsx","../pages/suppliers-page/src/constants.ts","../pages/suppliers-page/src/component.tsx"],"sourcesContent":["import { useState, useCallback } from \"react\";\r\nimport {  usePost } from \"@commons/hooks\";\r\n\r\nconst useTableControlsButtons = ({api = \"\"}) => {\r\n\r\n    const [selectedRow, setRows] = useState<any>({})\r\n    const { setRow } = usePost({link: api})\r\n\r\n    const onSaveAndInsertion = ()=>{\r\n        //@ts-ignore\r\n       if(selectedRow.query_status !== undefined){\r\n        setRow(selectedRow)\r\n       }\r\n    }\r\n\r\n    const setSelectedRow = useCallback((v:any)=>{\r\n        setRows(v)\r\n    },[])\r\n    return{setSelectedRow, onSaveAndInsertion, selectedRow}\r\n\r\n}\r\n\r\nexport default useTableControlsButtons","import React, { memo, useState, useCallback } from \"react\";\r\nimport Table from \"./Table\";\r\nimport { useFetch } from \"@commons/hooks\"\r\nimport useTableControlsButtons from \"./hooks/useTableControlsButtons\"\r\n\r\ninterface ApiTableProps {\r\n    api: string;\r\n    postApi?: string;\r\n    columns: {\r\n        title: string,\r\n        dataIndex: string,\r\n        width: number | string\r\n    }[];\r\n    hideTools?: boolean;\r\n    canAdd?: boolean;\r\n    canEdit?: boolean;\r\n    canDelete?: boolean;\r\n    rowKey: string;\r\n    Modal?: any;\r\n    width?: number | string;\r\n    onSelectedRow?: any;\r\n    fetchOnFirstRun?: boolean;\r\n    refreshAfter?: number;\r\n    params?: any;\r\n}\r\n\r\nconst ApiTable = ({\r\n    api,\r\n    postApi,\r\n    columns,\r\n    hideTools,\r\n    canAdd,\r\n    canEdit,\r\n    canDelete,\r\n    rowKey,\r\n    Modal,\r\n    width,\r\n    onSelectedRow,\r\n    fetchOnFirstRun = false,\r\n    params\r\n}: ApiTableProps) => {\r\n    const { data, runFetch } = useFetch({ link: api, fetchOnFirstRun: fetchOnFirstRun, params: params })\r\n    const { setSelectedRow, onSaveAndInsertion, selectedRow } = useTableControlsButtons({ api: postApi })\r\n    const [rows, setRows] = useState({})\r\n    const [modal, setModal] = useState(false)\r\n    const handleAdd = useCallback(() => {\r\n        setSelectedRow({ query_status: \"n\" })\r\n        setModal(true)\r\n    }, [setSelectedRow])\r\n    const handleEdit = useCallback(() => {\r\n        setSelectedRow({ ...rows, query_status: \"u\" })\r\n        setModal(true)\r\n    }, [rows, setSelectedRow])\r\n    const handleDelete = () => {\r\n        setSelectedRow({ ...rows, query_status: \"d\" })\r\n        onSaveAndInsertion()\r\n    }\r\n\r\n    const handleCloseModal = useCallback(() => {\r\n        setModal(false)\r\n    }, [])\r\n\r\n    const handleSaveModal = useCallback(() => {\r\n        setModal(false)\r\n        onSaveAndInsertion()\r\n        runFetch()\r\n    }, [onSaveAndInsertion, runFetch])\r\n\r\n    const handleSelectedRow = (row: any) => {\r\n        setRows(row)\r\n        if (onSelectedRow) onSelectedRow(row)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {Modal && <Modal\r\n                visible={modal}\r\n                onOK={handleSaveModal}\r\n                onClose={handleCloseModal}\r\n                selectedRow={selectedRow}\r\n                setSelectedRow={setSelectedRow}\r\n            />}\r\n            <Table\r\n                dataSource={data}\r\n                columns={columns}\r\n                hideTools={hideTools}\r\n                canAdd={canAdd}\r\n                canEdit={canEdit}\r\n                canDelete={canDelete}\r\n                rowkey={rowKey}\r\n                onAdd={handleAdd}\r\n                onEdit={handleEdit}\r\n                onDelete={handleDelete}\r\n                onSelectedRow={handleSelectedRow}\r\n                width={width}\r\n            >\r\n            </Table>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default memo(ApiTable)","import React, { memo } from \"react\";\n\ninterface iconButtonProp {\n    icon: string;\n    onClick?: () => void;\n    disabled?: boolean;\n    width?: number | string;\n    height?: number | string;\n    color?: string;\n    margin?: number | string;\n    padding?: number | string;\n    hidden?: boolean;\n}\n\nconst IconButton = ({\n    icon,\n    onClick,\n    disabled = false,\n    width = \"30px\",\n    height = \"30px\",\n    color,\n    margin = \"10px\",\n    padding,\n    hidden = false\n}: iconButtonProp) => {\n    return (\n        <>\n            <button style={{\n                border: \"none\",\n                width: width,\n                height: height,\n                backgroundColor: color,\n                padding: padding,\n                margin: margin,\n                borderRadius: \"20px\"\n            }} hidden={!hidden} onClick={onClick} disabled={disabled} >\n                <i className={icon}></i>\n            </button>\n        </>\n    )\n}\n\nexport default memo(IconButton)","import React, { useState, useCallback } from 'react';\r\nimport \"./style.css\";\r\nimport { Button, IconButton } from \"@commons/button\";\r\nimport { TableProps } from \"./interfece\";\r\nimport { useTranslation } from 'react-i18next';\r\nimport Flex from \"@commons/flex\";\r\n\r\n\r\nconst Table = ({\r\n    dataSource,\r\n    rowkey = \"rowkey\",\r\n    columns,\r\n    hideTools = true,\r\n    canEdit = false,\r\n    canAdd = false,\r\n    canDelete = false,\r\n    onAdd,\r\n    onEdit,\r\n    onDelete,\r\n    actionColumn = false,\r\n    onAction,\r\n    actionLabel = \"\",\r\n    onSelectedRow,\r\n    canPrint = false,\r\n    onPrint,\r\n    addionalButtons,\r\n    onSave,\r\n    canSave = false,\r\n    width = \"100%\",\r\n    margin = \"\",\r\n    padding = \"\"\r\n}: TableProps) => {\r\n    const { t } = useTranslation()\r\n    const [rowSelected, setRowSelected] = useState()\r\n    const handleSelectedRow = useCallback((item: any) => () => {\r\n        onSelectedRow(item)\r\n        setRowSelected(item)\r\n    }, [onSelectedRow])\r\n\r\n    return (\r\n        <>\r\n            <div style={{ width: width, padding: padding, margin: margin }}>\r\n                <Flex\r\n                    width='100%'\r\n                    padding='0'\r\n                    margin='5px 0'\r\n                    justifyContent='center'\r\n                    hidden={hideTools}\r\n                >\r\n                    <IconButton\r\n                        icon='fa-sharp fa-solid fa-plus'\r\n                        onClick={onAdd}\r\n                        hidden={canAdd}\r\n                    />\r\n                    <IconButton\r\n                        icon='fa-sharp fa-solid fa-pen-clip'\r\n                        onClick={onEdit}\r\n                        hidden={canEdit}\r\n                        disabled={!rowSelected}\r\n                    />\r\n                    <IconButton\r\n                        icon='fa-sharp fa-solid fa-trash'\r\n                        onClick={onDelete}\r\n                        hidden={canDelete}\r\n                        disabled={!rowSelected}\r\n                    />\r\n                    {addionalButtons && addionalButtons.map((button: any[]) => {\r\n                        return (\r\n                            <IconButton\r\n                                //@ts-ignore\r\n                                icon={button.icon}\r\n                                //@ts-ignore\r\n                                onClick={button.onClick}\r\n                                //@ts-ignore\r\n                                hidden={button.hidden}\r\n                            />\r\n                        )\r\n                    })}\r\n                    <IconButton\r\n                        icon='fa-solid fa-floppy-disk'\r\n                        onClick={onSave}\r\n                        disabled={canSave}\r\n                    />\r\n                    <IconButton\r\n                        icon='fa-solid fa-print'\r\n                        onClick={onPrint}\r\n                        disabled={canPrint}\r\n                    />\r\n                </Flex>\r\n                <table className='table m-0'>\r\n                    <thead>\r\n                        <tr className='table-secondary'>\r\n                            {columns.map((item: any) => {\r\n                                return (\r\n                                    <th scope=\"col\" style={{ width: item.width }}>\r\n                                        {t(item.title)}\r\n                                    </th>\r\n                                )\r\n                            })}\r\n                            <th hidden={!actionColumn}>{t(\"actn\")}</th>\r\n                        </tr>\r\n                    </thead>\r\n                </table>\r\n                <div className=\"tbl-content\">\r\n                    <table className='table '>\r\n                        <tbody>\r\n                            {dataSource?.map((item: any) => {\r\n                                return (\r\n                                    <tr key={item[rowkey]} onClick={handleSelectedRow(item)}>\r\n                                        {columns.map((column: any) => {\r\n                                            return (\r\n                                                <td className={`${rowSelected === item ? \"table-success\" : \"table-light\"} `} style={{ width: column.width }}>\r\n                                                    {item[column.dataIndex]}\r\n                                                </td>\r\n                                            )\r\n                                        })}\r\n                                        <td className={`${rowSelected === item ? \"table-success\" : \"table-light\"} `} hidden={!actionColumn}>\r\n                                            <Button\r\n                                                label={actionLabel}\r\n                                                onClick={() => { onAction(item) }}\r\n                                            />\r\n                                        </td>\r\n                                    </tr>\r\n                                )\r\n                            })}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Table;\r\n","const API_ID = {\n    QUERY_CUSTOMER_TABLE_DATA: \"basicData/customers\",\n    POST_CUSTOMER_TABLE_DATA: \"basicData/customers_dml\",\n    QUERY_SUPPLIER_TABLE_DATA: \"basicData/suppliers\",\n    POST_SUPPLIER_TABLE_DATA: \"basicData/suppliers_dml\",\n    POST_CUSTOMER_INVOICE_DETAILS: \"invoices/customer_invoice_dml\",\n    POST_EMPLOYEE_ATTENDANCE: \"employeesData/employee_attendance_dml\",\n    POST_EMPLOYEE_LEAVING: \"employeesData/employee_leaving_dml\",\n    QUERY_EMPLOYEES_TABLE_DATA: \"employeesData/employees\",\n    POST_EMPLOYEES_TABLE_DATA: \"employeesData/employees_dml\",\n    QUERY_INVOICE_DETAIL_TABLE_DATA: \"invoices/get_invoice_detail\",\n    QUERY_INVOICE_MASTER_TABLE_DATA: \"invoices/get_invoice_master\",\n    QUERY_ITEMS_TABLE_DATA: \"basicData/items\",\n    POST_ITEMS_TABLE_DATA: \"basicData/items_dml\",\n    QUERY_PRINT_OPTIONS_TABLE_DAT: \"basicData/print_options\",\n    POST_PRINT_OPTIONS_TABLE_DATA:\"basicData/print_options_dml\",\n    USER_LOG_IN: \"user_log_in\",\n    POST_SUPPLIER_INVOICE: \"invoices/supplier_invoice_dml\",\n    QUERY_LABELS: \"get_labels\",\n    QUERY_CHUNK_LABELS: \"get_chunk_labels\",\n    QUERY_EMPLOYEE_NAME_LIST: \"employeesData/pop_employee_name\",\n    QUERY_CUSTOMER_AND_SUPPLIER_LIST: \"invoices/get_customer_supplier_list\",\n    QUERY_SUPPLIER_LIST: \"basicData/supplier_pop_data\",\n    QUERY_CUSTOMERS_LIST: \"basicData/customer_pop_data\",\n    QUERY_ITEMS_LIST: \"basicData/items_pop_data\",\n    //http://144.24.209.19:9090/api/v1/employeesData/employee_sheet?employee_id=4\n    QUERY_EMPLOYEE_SHEET_SALARY: \"employeesData/employee_sheet\",\n    //http://144.24.209.19:9090/api/v1/income_expense/get_casher_receipt_voucher_invoices?date_from=2023-04-01&date_to=2023-04-30\n    QUERY_CASHER_RECEIPT_VOUCHER_TABLE_DATA: \"income_expense/get_casher_receipt_voucher_invoices\",\n    //http://144.24.209.19:9090/api/v1/income_expense/post_casher_receipt_voucher_invoices_dml?authorization=1677621781730\n    POST_CASHER_RECEIPT_VOUCHER_TABLE_DATA: \"income_expense/post_casher_receipt_voucher_invoices_dml\",\n    //http://144.24.209.19:9090/api/v1/income_expense/get_casher_payment_voucher_invoices?date_from=2023-04-01&date_to=2023-04-30\n    QUERY_CASHER_PAYMENT_VOUCHER_TABLE_DATA: \"income_expense/get_casher_payment_voucher_invoices\",\n    //http://144.24.209.19:9090/api/v1/income_expense/post_casher_payment_voucher_invoices_dml?authorization=1677621781730\n    POST_CASHER_PAYMENT_VOUCHER_TABLE_DATA: \"income_expense/post_casher_payment_voucher_invoices_dml\"\n};\n\nexport default API_ID","import { useState, useEffect, useCallback } from \"react\";\r\nimport {API_ID} from \"@commons/global\";\r\nimport { useLocalStorage } from \"@commons/hooks\";\r\nimport { useToast } from '@chakra-ui/react';\r\n\r\ninterface useFetchProp {\r\n  link: string;\r\n  fetchOnFirstRun?: boolean;\r\n  refreshTimeout?: number;\r\n  params?: any\r\n  noAuthorization?: boolean\r\n}\r\n\r\nconst useFetch = ({\r\n    link = \"\", \r\n    fetchOnFirstRun,\r\n    refreshTimeout,\r\n    params, \r\n    noAuthorization = false\r\n  }: useFetchProp) => {\r\n    const toast = useToast()\r\n  const { authorization } = useLocalStorage()\r\n  //@ts-ignore\r\n  const url = `http://144.24.209.19:9090/api/v1/${API_ID[link]}`\r\n  const [data, setData] = useState<any>([]);\r\n  const getData = useCallback(async()=>{\r\n    if(authorization || noAuthorization){\r\nconst response = await fetch(`${url}?authorization=${authorization}&${new URLSearchParams(params)}`)\r\n    const apiData=await response.json();  \r\n  setData(apiData);\r\n    }\r\n},[authorization, noAuthorization, params, url])\r\n\r\n\r\n    useEffect(() => {\r\n      if(fetchOnFirstRun){\r\n        getData()\r\n      }\r\n      }, [fetchOnFirstRun, getData, url, params]);\r\n\r\n      useEffect(()=>{\r\n        if (data.response){\r\n          toast({\r\n            position: \"top-right\",\r\n            title: 'error',\r\n            description: `${JSON.stringify(data.response)}`,\r\n            status: 'error',\r\n            duration: 5000,\r\n            isClosable: true,\r\n        })\r\n        }\r\n      }, [data, toast])\r\n\r\n\r\n\r\n      const runFetch = useCallback(()=>{\r\n          getData()\r\n      },[getData])\r\n\r\n      return{data, runFetch, setData}\r\n}\r\n\r\nexport default useFetch","import {useState, useCallback, useEffect} from \"react\";\n\ninterface useFormManagerProps {\n    initialValue?: any\n    setSelectedRow?: any\n}\n\nconst useFormManager =({initialValue, setSelectedRow}: useFormManagerProps)=>{\n    const [initialValues, setInitialValues] = useState()\n    const [state, setState] = useState<typeof initialValue>({})\n\n    const onChange = useCallback((change: any)=>{\n        //@ts-ignore\n            if (setSelectedRow)setSelectedRow({...initialValue, [change.name]: change.value})\n            setState({...state, [change.name]: change.value})\n            setInitialValues(initialValues)\n    },[initialValues, initialValue, setSelectedRow, state])\n\n    useEffect(()=>{\n        if(setSelectedRow){\n            setState(initialValue);\n        }\n    },[initialValue, setSelectedRow])\n\n    useEffect(()=>{\n        setState(initialValue);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    },[])\n\n    const resetState = useCallback(()=>{\n        setSelectedRow(initialValues)\n    },[initialValues, setSelectedRow])\n\n    return{state, onChange, resetState}\n}\n\nexport default useFormManager","import { useState, useCallback } from \"react\";\r\nimport { useLocalStorage } from \"@commons/hooks\";\r\nimport {API_ID} from \"@commons/global\";\r\nimport { useToast } from '@chakra-ui/react';\r\n\r\ninterface usePostProps{\r\n    link: string;\r\n    noAuthorization?: boolean\r\n};\r\ninterface successType{\r\n    response: string;\r\n}\r\n\r\nconst usePost = ({\r\n    link  = \"\",\r\n    noAuthorization = false\r\n}: usePostProps) => {\r\n    const toast = useToast()\r\n    //@ts-ignore\r\n    const url = `http://144.24.209.19:9090/api/v1/${API_ID[link]}`\r\n    const [success, setSuccess] = useState<successType>()\r\n    const { authorization } = useLocalStorage()\r\n    const postData = useCallback(async (dataToPost: any) => {\r\n        if(authorization || noAuthorization){\r\n        dataToPost.authorization = authorization\r\n        const settings = {\r\n            method: 'POST',\r\n            headers: {\r\n                Accept: 'application/json',\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(dataToPost)\r\n        };\r\n        try {\r\n            const fetchResponse = await fetch(url, settings);\r\n            const data = await fetchResponse.json();\r\n            if (data.response === \"success\"){\r\n            toast({\r\n            position: \"top-right\",\r\n            title: 'Success',\r\n            description: `${data.response}`,\r\n            status: 'success',\r\n            duration: 5000,\r\n            isClosable: true,\r\n        })\r\n            } else {\r\n                toast({\r\n            position: \"top-right\",\r\n            title: 'Error',\r\n            description: `${data.response}`,\r\n            status: 'error',\r\n            duration: 9000,\r\n            isClosable: true,\r\n        })\r\n            }\r\n            setSuccess(data)\r\n            return data\r\n        } catch (e) {\r\n            console.log(e)\r\n        }}\r\n    }, [authorization, noAuthorization, toast, url])\r\n\r\n    const setRow = useCallback((row: any) => {\r\n        postData(row)\r\n    }, [postData])\r\n\r\n    return { success, setRow }\r\n}\r\n\r\nexport default usePost","import React, { memo, useCallback, useEffect } from \"react\";\nimport { InputTextProps } from \"./interface\";\nimport { useTranslation } from 'react-i18next';\nimport { Input, FormLabel, Flex } from '@chakra-ui/react'\n\nconst InputText = ({\n    disabled,\n    value,\n    name,\n    Label = \"\",\n    onChange,\n    width = \"200px\",\n    type = \"text\",\n    placeHolder,\n    padding,\n    margin = \"10px\",\n    className = \"\",\n    required = false\n}: InputTextProps) => {\n    const { t } = useTranslation()\n\n    const handleChange = useCallback((event: { target: { value: string; }; }) => {\n        onChange({ name: name, value: event.target.value })\n    }, [name, onChange])\n\n    // console.log(new Date().getFullYear() + \"-\" + ((new Date().getMonth() + 1).length !== 2 ? \"0\" + (new Date().getMonth() + 1) : (new Date().getMonth() + 1)) + \"-\" + (new Date().getDate().length != 2 ? \"0\" + new Date().getDate() : new Date().getDate()))\n\n    return (\n        <>\n            <Flex\n                direction=\"column\"\n                w={width}\n                padding={padding}\n                margin={margin}\n            >\n                <FormLabel>{t(Label)}</FormLabel>\n                <Input\n                    placeholder={placeHolder}\n                    size='md'\n                    isDisabled={disabled}\n                    isRequired={required}\n                    onChange={handleChange}\n                    width=\"100%\"\n                    className={className}\n                    value={value}\n                    type={type}\n                />\n            </Flex>\n        </>\n    )\n}\n\nexport default memo(InputText)","import React, { memo } from 'react';\r\nimport { useTranslation } from 'react-i18next'\r\nimport {\r\n    Modal as ModalView,\r\n    ModalOverlay,\r\n    ModalContent,\r\n    ModalHeader,\r\n    ModalFooter,\r\n    ModalBody,\r\n    ModalCloseButton,\r\n    Button,\r\n    Flex\r\n} from '@chakra-ui/react';\r\n\r\ninterface ModalProp {\r\n    visible?: boolean,\r\n    children?: any,\r\n    label: string,\r\n    onOK?: () => void,\r\n    onClose: () => void,\r\n    submitTitle?: string,\r\n    width?: string;\r\n    hideSaveButton?: boolean;\r\n    hideCloseButton?: boolean;\r\n}\r\n\r\nconst Modal = (\r\n    {\r\n        children,\r\n        visible = false,\r\n        label,\r\n        onClose,\r\n        onOK,\r\n        submitTitle = \"smbt\",\r\n        width = \"3xl\",\r\n        hideSaveButton = false,\r\n        hideCloseButton = false\r\n    }: ModalProp\r\n) => {\r\n    const { t } = useTranslation()\r\n    return (\r\n        <>\r\n\r\n            <ModalView isOpen={visible} onClose={onClose} size={width}>\r\n                <ModalOverlay />\r\n                <ModalContent>\r\n                    <ModalHeader>{t(label)}</ModalHeader>\r\n                    <ModalCloseButton />\r\n                    <ModalBody>\r\n                        <Flex w=\"100%\" padding=\"5px\" wrap=\"wrap\">\r\n                            {children}\r\n                        </Flex>\r\n                    </ModalBody>\r\n                    <ModalFooter>\r\n                        <Flex w=\"25%\" justifyContent=\"space-around\">\r\n                            <Button colorScheme='red' mr={3} onClick={onClose} hidden={hideCloseButton}>\r\n                                {t(\"cls\")}\r\n                            </Button>\r\n                            <Button colorScheme='blue' onClick={onOK} hidden={hideSaveButton} >{t(submitTitle)}</Button>\r\n                        </Flex>\r\n                    </ModalFooter>\r\n                </ModalContent>\r\n            </ModalView>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default memo(Modal);","import React, { memo } from 'react';\r\nimport Modal from \"@commons/modal\";\r\nimport { InputText } from \"@commons/input-text\";\r\nimport { useFormManager } from '@commons/hooks';\r\n// import { ModalViewProp } from \"../../../Types/general\"\r\n\r\nconst ModalView = ({\r\n    visible,\r\n    onOK,\r\n    onClose,\r\n    setSelectedRow,\r\n    selectedRow\r\n}: any) => {\r\n    const { state, onChange } = useFormManager({ initialValue: selectedRow, setSelectedRow: setSelectedRow })\r\n    const { name, email, phone, mobile, address } = state\r\n\r\n    return (\r\n        <Modal\r\n            visible={visible}\r\n            label={\"Details\"}\r\n            onOK={onOK}\r\n            onClose={onClose}\r\n        >\r\n            <InputText\r\n                name=\"name\"\r\n                Label='Name'\r\n                onChange={onChange}\r\n                value={name}\r\n                width=\"47%\"\r\n            />\r\n            <InputText\r\n                name=\"email\"\r\n                Label='Email'\r\n                onChange={onChange}\r\n                value={email}\r\n                width=\"47%\"\r\n            />\r\n            <InputText\r\n                name=\"phone\"\r\n                Label='Phone'\r\n                onChange={onChange}\r\n                value={phone}\r\n                width=\"47%\"\r\n            />\r\n            <InputText\r\n                name=\"mobile\"\r\n                Label='Mobile'\r\n                onChange={onChange}\r\n                value={mobile}\r\n                width=\"47%\"\r\n            />\r\n            <InputText\r\n                name=\"address\"\r\n                Label='Address'\r\n                onChange={onChange}\r\n                value={address}\r\n                width=\"100%\"\r\n            />\r\n        </Modal>\r\n    )\r\n};\r\n\r\nexport default memo(ModalView)","export const columns = [\r\n        {\r\n            title: \"nm\",\r\n            dataIndex: \"name\",\r\n            width: 20\r\n        },\r\n        {\r\n            title: \"eml\",\r\n            dataIndex: \"email\",\r\n            width: 17\r\n        },\r\n        {\r\n            title: \"phn\",\r\n            dataIndex: \"phone\",\r\n            width: 15\r\n        },\r\n        {\r\n            title: \"mbl\",\r\n            dataIndex: \"mobile\",\r\n            width: 15\r\n        },\r\n        {\r\n            title: \"adrs\",\r\n            dataIndex: \"address\",\r\n            width: 20\r\n        }\r\n    ]","import React, { memo } from 'react';\r\nimport ModalView from \"./Partials/ModalView\";\r\nimport { ApiTable } from \"@commons/table\";\r\nimport { columns } from \"./constants\";\r\n\r\nconst Suppliers = () => {\r\n    return (\r\n        <>\r\n            <ApiTable\r\n                api={\"QUERY_SUPPLIER_TABLE_DATA\"}\r\n                postApi={\"POST_SUPPLIER_TABLE_DATA\"}\r\n                columns={columns}\r\n                hideTools={false}\r\n                canEdit={true}\r\n                canAdd={true}\r\n                canDelete={true}\r\n                rowKey={\"supplier_id\"}\r\n                Modal={ModalView}\r\n                fetchOnFirstRun\r\n            />\r\n        </>\r\n    )\r\n};\r\n\r\nexport default memo(Suppliers);\r\n"],"names":["api","useState","selectedRow","setRows","setRow","usePost","link","setSelectedRow","useCallback","v","onSaveAndInsertion","undefined","query_status","ApiTable","postApi","columns","hideTools","canAdd","canEdit","canDelete","rowKey","Modal","width","onSelectedRow","fetchOnFirstRun","params","useFetch","data","runFetch","useTableControlsButtons","rows","modal","setModal","handleAdd","handleEdit","handleCloseModal","handleSaveModal","visible","onOK","onClose","Table","dataSource","rowkey","onAdd","onEdit","onDelete","row","memo","IconButton","icon","onClick","disabled","height","color","margin","padding","hidden","style","border","backgroundColor","borderRadius","className","actionColumn","onAction","actionLabel","canPrint","onPrint","addionalButtons","onSave","canSave","t","useTranslation","rowSelected","setRowSelected","handleSelectedRow","item","justifyContent","map","button","scope","title","column","dataIndex","label","QUERY_CUSTOMER_TABLE_DATA","POST_CUSTOMER_TABLE_DATA","QUERY_SUPPLIER_TABLE_DATA","POST_SUPPLIER_TABLE_DATA","POST_CUSTOMER_INVOICE_DETAILS","POST_EMPLOYEE_ATTENDANCE","POST_EMPLOYEE_LEAVING","QUERY_EMPLOYEES_TABLE_DATA","POST_EMPLOYEES_TABLE_DATA","QUERY_INVOICE_DETAIL_TABLE_DATA","QUERY_INVOICE_MASTER_TABLE_DATA","QUERY_ITEMS_TABLE_DATA","POST_ITEMS_TABLE_DATA","QUERY_PRINT_OPTIONS_TABLE_DAT","POST_PRINT_OPTIONS_TABLE_DATA","USER_LOG_IN","POST_SUPPLIER_INVOICE","QUERY_LABELS","QUERY_CHUNK_LABELS","QUERY_EMPLOYEE_NAME_LIST","QUERY_CUSTOMER_AND_SUPPLIER_LIST","QUERY_SUPPLIER_LIST","QUERY_CUSTOMERS_LIST","QUERY_ITEMS_LIST","QUERY_EMPLOYEE_SHEET_SALARY","QUERY_CASHER_RECEIPT_VOUCHER_TABLE_DATA","POST_CASHER_RECEIPT_VOUCHER_TABLE_DATA","QUERY_CASHER_PAYMENT_VOUCHER_TABLE_DATA","POST_CASHER_PAYMENT_VOUCHER_TABLE_DATA","refreshTimeout","noAuthorization","toast","useToast","authorization","useLocalStorage","url","API_ID","setData","getData","fetch","URLSearchParams","response","json","apiData","useEffect","position","description","JSON","stringify","status","duration","isClosable","initialValue","initialValues","setInitialValues","state","setState","onChange","change","name","value","resetState","success","setSuccess","postData","dataToPost","settings","method","headers","Accept","body","fetchResponse","console","log","InputText","Label","type","placeHolder","required","handleChange","event","target","direction","w","I","placeholder","size","isDisabled","isRequired","children","submitTitle","hideSaveButton","hideCloseButton","isOpen","wrap","colorScheme","mr","ModalView","useFormManager","email","phone","mobile","address","Suppliers"],"sourceRoot":""}