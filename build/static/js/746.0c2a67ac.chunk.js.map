{"version":3,"file":"static/js/746.0c2a67ac.chunk.js","mappings":"6MAsBA,EAnBgC,SAAH,GAAoB,IAAD,IAAdA,IAAAA,OAAG,MAAG,GAAE,EAEtC,GAA+BC,EAAAA,EAAAA,UAAc,CAAC,GAAE,eAAzCC,EAAW,KAAEC,EAAO,KACnBC,GAAWC,EAAAA,EAAAA,GAAQ,CAACC,KAAMN,IAA1BI,OAYR,MAAM,CAACG,gBAHgBC,EAAAA,EAAAA,cAAY,SAACC,GAChCN,EAAQM,EACZ,GAAE,IACqBC,mBAVI,gBAEQC,IAA7BT,EAAYU,cACdR,EAAOF,EAEX,EAK2CA,YAAAA,EAE/C,E,SCMMW,EAAe,SAAH,GAcQ,IAbtBb,EAAG,EAAHA,IACAc,EAAO,EAAPA,QACAC,EAAO,EAAPA,QACAC,EAAS,EAATA,UACAC,EAAM,EAANA,OACAC,EAAO,EAAPA,QACAC,EAAS,EAATA,UACAC,EAAM,EAANA,OACAC,EAAK,EAALA,MACAC,EAAK,EAALA,MACAC,EAAa,EAAbA,cAAc,EAAD,EACbC,gBAAAA,OAAe,OAAQ,EACvBC,EAAM,EAANA,OAEA,GAA2BC,EAAAA,EAAAA,GAAS,CAAEpB,KAAMN,EAAKwB,gBAAiBA,EAAiBC,OAAQA,IAAnFE,EAAI,EAAJA,KAAMC,EAAQ,EAARA,SACd,EAA4DC,EAAwB,CAAE7B,IAAKc,IAAnFP,EAAc,EAAdA,eAAgBG,EAAkB,EAAlBA,mBAAoBR,EAAW,EAAXA,YAC5C,GAAwBD,EAAAA,EAAAA,UAAS,CAAC,GAAE,eAA7B6B,EAAI,KAAE3B,EAAO,KACpB,GAA0BF,EAAAA,EAAAA,WAAS,GAAM,eAAlC8B,EAAK,KAAEC,EAAQ,KAChBC,GAAYzB,EAAAA,EAAAA,cAAY,WAC1BD,EAAe,CAAEK,aAAc,MAC/BoB,GAAS,EACb,GAAG,CAACzB,IACE2B,GAAa1B,EAAAA,EAAAA,cAAY,WAC3BD,GAAe,kBAAKuB,GAAI,IAAElB,aAAc,OACxCoB,GAAS,EACb,GAAG,CAACF,EAAMvB,IAMJ4B,GAAmB3B,EAAAA,EAAAA,cAAY,WACjCwB,GAAS,EACb,GAAG,IAEGI,GAAkB5B,EAAAA,EAAAA,cAAY,WAChCwB,GAAS,GACTtB,IACAkB,GACJ,GAAG,CAAClB,EAAoBkB,IAOxB,OACI,gCACKP,IAAS,SAACA,EAAK,CACZgB,QAASN,EACTO,KAAMF,EACNG,QAASJ,EACTjC,YAAaA,EACbK,eAAgBA,KAEpB,SAACiC,EAAA,EAAK,CACFC,WAAYd,EACZZ,QAASA,EACTC,UAAWA,EACXC,OAAQA,EACRC,QAASA,EACTC,UAAWA,EACXuB,OAAQtB,EACRuB,MAAOV,EACPW,OAAQV,EACRW,SAvCS,WACjBtC,GAAe,kBAAKuB,GAAI,IAAElB,aAAc,OACxCF,GACJ,EAqCYa,cAzBc,SAACuB,GACvB3C,EAAQ2C,GACJvB,GAAeA,EAAcuB,EACrC,EAuBYxB,MAAOA,MAMvB,EAEA,GAAeyB,EAAAA,EAAAA,MAAKlC,E,wFCxFdmC,EAAa,SAAH,GAUO,IATnBC,EAAI,EAAJA,KACAC,EAAO,EAAPA,QAAQ,EAAD,EACPC,SAAAA,OAAQ,OAAQ,MAChB7B,MAAAA,OAAK,MAAG,OAAM,MACd8B,OAAAA,OAAM,MAAG,OAAM,EACfC,EAAK,EAALA,MAAM,EAAD,EACLC,OAAAA,OAAM,MAAG,OAAM,EACfC,EAAO,EAAPA,QAAQ,EAAD,EACPC,OAAAA,OAAM,OAAQ,EAEd,OACI,+BACI,mBAAQC,MAAO,CACXC,OAAQ,OACRpC,MAAOA,EACP8B,OAAQA,EACRO,gBAAiBN,EACjBE,QAASA,EACTD,OAAQA,EACRM,aAAc,QACfJ,QAASA,EAAQN,QAASA,EAASC,SAAUA,EAAS,UACrD,cAAGU,UAAWZ,OAI9B,EAEA,GAAeF,EAAAA,EAAAA,MAAKC,G,6BC2FpB,EA7Hc,SAAH,GAuBQ,IAtBfP,EAAU,EAAVA,WAAW,EAAD,EACVC,OAAAA,OAAM,MAAG,SAAQ,EACjB3B,EAAO,EAAPA,QAAQ,EAAD,EACPC,UAAAA,OAAS,OAAO,MAChBE,QAAAA,OAAO,OAAQ,MACfD,OAAAA,OAAM,OAAQ,MACdE,UAAAA,OAAS,OAAQ,EACjBwB,EAAK,EAALA,MACAC,EAAM,EAANA,OACAC,EAAQ,EAARA,SAAS,EAAD,EACRiB,aAAAA,OAAY,OAAQ,EACpBC,EAAQ,EAARA,SAAS,EAAD,EACRC,YAAAA,OAAW,MAAG,GAAE,EAChBzC,EAAa,EAAbA,cAAc,EAAD,EACb0C,SAAAA,OAAQ,OAAQ,EAChBC,EAAO,EAAPA,QACAC,EAAe,EAAfA,gBACAC,EAAM,EAANA,OAAO,EAAD,EACNC,QAAAA,OAAO,OAAQ,MACf/C,MAAAA,OAAK,MAAG,OAAM,MACdgC,OAAAA,OAAM,MAAG,GAAE,MACXC,QAAAA,OAAO,MAAG,GAAE,EAEJe,GAAMC,EAAAA,EAAAA,MAAND,EACR,GAAsCrE,EAAAA,EAAAA,YAAU,eAAzCuE,EAAW,KAAEC,EAAc,KAC5BC,GAAoBlE,EAAAA,EAAAA,cAAY,SAACmE,GAAS,OAAK,WACjDpD,EAAcoD,GACdF,EAAeE,EACnB,CAAC,GAAE,CAACpD,IAEJ,OACI,+BACI,iBAAKkC,MAAO,CAAEnC,MAAOA,EAAOiC,QAASA,EAASD,OAAQA,GAAS,WAC3D,UAAC,IAAI,CACDhC,MAAM,OACNiC,QAAQ,IACRD,OAAO,QACPsB,eAAe,SACfpB,OAAQxC,EAAU,WAElB,SAAC,EAAU,CACPiC,KAAK,4BACLC,QAASP,EACTa,OAAQvC,KAEZ,SAAC,EAAU,CACPgC,KAAK,gCACLC,QAASN,EACTY,OAAQtC,EACRiC,UAAWqB,KAEf,SAAC,EAAU,CACPvB,KAAK,6BACLC,QAASL,EACTW,OAAQrC,EACRgC,UAAWqB,IAEdL,GAAmBA,EAAgBU,KAAI,SAACC,GACrC,OACI,SAAC,EACG,CACA7B,KAAM6B,EAAO7B,KAEbC,QAAS4B,EAAO5B,QAEhBM,OAAQsB,EAAOtB,QAG3B,KACA,SAAC,EAAU,CACPP,KAAK,0BACLC,QAASkB,EACTjB,SAAUkB,KAEd,SAAC,EAAU,CACPpB,KAAK,oBACLC,QAASgB,EACTf,SAAUc,QAGlB,kBAAOJ,UAAU,YAAW,UACxB,4BACI,gBAAIA,UAAU,kBAAiB,UAC1B9C,EAAQ8D,KAAI,SAACF,GACV,OACI,eAAII,MAAM,MAAMtB,MAAO,CAAEnC,MAAOqD,EAAKrD,OAAQ,SACxCgD,EAAEK,EAAKK,QAGpB,KACA,eAAIxB,QAASM,EAAa,SAAEQ,EAAE,kBAI1C,gBAAKT,UAAU,cAAa,UACxB,kBAAOA,UAAU,SAAQ,UACrB,2BACe,OAAVpB,QAAU,IAAVA,OAAU,EAAVA,EAAYoC,KAAI,SAACF,GACd,OACI,gBAAuBzB,QAASwB,EAAkBC,GAAM,UACnD5D,EAAQ8D,KAAI,SAACI,GACV,OACI,eAAIpB,UAAS,UAAKW,IAAgBG,EAAO,gBAAkB,cAAa,KAAKlB,MAAO,CAAEnC,MAAO2D,EAAO3D,OAAQ,SACvGqD,EAAKM,EAAOC,YAGzB,KACA,eAAIrB,UAAS,UAAKW,IAAgBG,EAAO,gBAAkB,cAAa,KAAKnB,QAASM,EAAa,UAC/F,SAAC,IAAM,CACHqB,MAAOnB,EACPd,QAAS,WAAQa,EAASY,EAAM,QAXnCA,EAAKjC,GAgBtB,cAO5B,C,oBC5FA,IAvCe,CACX0C,0BAA2B,sBAC3BC,yBAA0B,0BAC1BC,0BAA2B,sBAC3BC,yBAA0B,0BAC1BC,8BAA+B,gCAC/BC,yBAA0B,wCAC1BC,sBAAuB,qCACvBC,2BAA4B,0BAC5BC,0BAA2B,8BAC3BC,gCAAiC,8BACjCC,gCAAiC,8BACjCC,uBAAwB,kBACxBC,sBAAuB,sBACvBC,8BAA+B,0BAC/BC,8BAA8B,8BAC9BC,YAAa,cACbC,sBAAuB,gCACvBC,aAAc,aACdC,mBAAoB,mBACpBC,yBAA0B,kCAC1BC,iCAAkC,sCAClCC,oBAAqB,8BACrBC,qBAAsB,8BACtBC,iBAAkB,2BAElBC,4BAA6B,+BAE7BC,wCAAyC,qDAEzCC,uCAAwC,0DAExCC,wCAAyC,qDAEzCC,uCAAwC,0DAExCC,sBAAuB,2B,gGC0B3B,IAjDiB,SAAH,GAMS,IAAD,IALlB3G,KAAAA,OAAI,MAAG,GAAE,EACTkB,EAAe,EAAfA,gBAEAC,GADc,EAAdyF,eACM,EAANzF,QAAO,EAAD,EACN0F,gBAAAA,OAAe,OAAQ,EAEjBC,GAAQC,EAAAA,EAAAA,KACRC,GAAkBC,EAAAA,EAAAA,KAAlBD,cAEFE,EAAG,2CAAuCC,EAAAA,EAAOnH,IACvD,GAAwBL,EAAAA,EAAAA,UAAc,IAAG,eAAlC0B,EAAI,KAAE+F,EAAO,KACdC,GAAUnH,EAAAA,EAAAA,cAAW,uBAAC,+FACvB8G,IAAiBH,EAAe,gCAChBS,MAAM,GAAD,OAAIJ,EAAG,0BAAkBF,EAAa,YAAI,IAAIO,gBAAgBpG,KAAU,OAAtF,OAARqG,EAAQ,gBACUA,EAASC,OAAO,KAAD,EAA7BC,EAAQ,EAAD,KACfN,EAAQM,GAAS,2CAEjB,CAACV,EAAeH,EAAiB1F,EAAQ+F,KAGvCS,EAAAA,EAAAA,YAAU,WACLzG,GACDmG,GAEF,GAAG,CAACnG,EAAiBmG,EAASH,EAAK/F,KAEnCwG,EAAAA,EAAAA,YAAU,WACJtG,EAAKmG,UACPV,EAAM,CACJc,SAAU,YACVlD,MAAO,QACPmD,YAAY,GAAD,OAAKC,KAAKC,UAAU1G,EAAKmG,WACpCQ,OAAQ,QACRC,SAAU,IACVC,YAAY,GAGlB,GAAG,CAAC7G,EAAMyF,IAIV,IAAMxF,GAAWpB,EAAAA,EAAAA,cAAY,WACzBmH,GACJ,GAAE,CAACA,IAEH,MAAM,CAAChG,KAAAA,EAAMC,SAAAA,EAAU8F,QAAAA,EAC7B,C,gGCSA,IAxDgB,SAAH,GAGQ,IAAD,IAFhBpH,KAAAA,OAAI,MAAI,GAAE,MACV6G,gBAAAA,OAAe,OAAQ,EAEjBC,GAAQC,EAAAA,EAAAA,KAERG,EAAG,2CAAuCC,EAAAA,EAAOnH,IACvD,GAA8BL,EAAAA,EAAAA,YAAuB,eAA9CwI,EAAO,KAAEC,EAAU,KAClBpB,GAAkBC,EAAAA,EAAAA,KAAlBD,cACFqB,GAAWnI,EAAAA,EAAAA,aAAW,yCAAC,WAAOoI,GAAe,oFAC5CtB,IAAiBH,EAAe,iBASlC,OARDyB,EAAWtB,cAAgBA,EACrBuB,EAAW,CACbC,OAAQ,OACRC,QAAS,CACLC,OAAQ,mBACR,eAAgB,oBAEpBC,KAAMb,KAAKC,UAAUO,IACvB,EAAD,gBAE+BhB,MAAMJ,EAAKqB,GAAU,KAAD,EAA7B,OAAbK,EAAa,gBACAA,EAAcnB,OAAO,KAAD,EAoBvB,MAnBM,aADhBpG,EAAI,QACDmG,SACTV,EAAM,CACNc,SAAU,YACVlD,MAAO,UACPmD,YAAY,GAAD,OAAKxG,EAAKmG,UACrBQ,OAAQ,UACRC,SAAU,IACVC,YAAY,IAGRpB,EAAM,CACVc,SAAU,YACVlD,MAAO,QACPmD,YAAY,GAAD,OAAKxG,EAAKmG,UACrBQ,OAAQ,QACRC,SAAU,IACVC,YAAY,IAGZE,EAAW/G,GAAK,kBACTA,GAAI,kCAEXwH,QAAQC,IAAI,EAAD,IAAG,0DAErB,mDAtC2B,GAsCzB,CAAC9B,EAAeH,EAAiBC,EAAOI,IAM3C,MAAO,CAAEiB,QAAAA,EAASrI,QAJHI,EAAAA,EAAAA,cAAY,SAACsC,GACxB6F,EAAS7F,EACb,GAAG,CAAC6F,IAGR,C,4IC5DMU,EAAW,SAAH,GAQF,IAAD,IAPTC,KAAAA,OAAI,MAAG,MAAK,EACZhI,EAAK,EAALA,MACA8B,EAAM,EAANA,OACAE,EAAM,EAANA,OACAC,EAAO,EAAPA,QAAQ,EAAD,EACP4B,MAAAA,OAAK,MAAG,QAAO,EACf1C,EAAU,EAAVA,WAEQ6B,GAAMC,EAAAA,EAAAA,MAAND,EAaR,OACE,+BACE,UAAC,IAAI,CACHiF,cAAc,SACdjI,MAAOA,EACP8B,OAAQA,EACRE,OAAQA,EACRC,QAASA,EAAQ,WAEjB,SAAC,IAAI,CAACjC,MAAM,OAAOsD,eAAe,SAAQ,UACxC,uBAAIN,EAAEa,OAtBD,WAEX,OAAQmE,GACN,IAAK,OACH,OAAO,SAAC,KAAK,CAACE,KAAK,OAAO7H,KAAMc,IAClC,IAAK,MACH,OAAO,SAAC,KAAK,CAAC+G,KAAK,MAAM7H,KAAMc,IACjC,IAAK,MACH,OAAO,SAAC,KAAK,CAAC+G,KAAK,MAAM7H,KAAMc,IAErC,CAcOgH,OAIT,EAEA,GAAe1G,EAAAA,EAAAA,MAAKsG,G,UC3CdK,EAAe,SAAH,GASN,IARR1J,EAAG,EAAHA,IACAyB,EAAM,EAANA,OACAH,EAAK,EAALA,MACA8B,EAAM,EAANA,OACAG,EAAO,EAAPA,QACAD,EAAM,EAANA,OACA6B,EAAK,EAALA,MACAmE,EAAI,EAAJA,KAGA,GAAoCrJ,EAAAA,EAAAA,UAAS,CACzC0J,OAAQ,GACRC,SAAU,CACN,CACIzE,MAAO,GACPxD,KAAM,OAGhB,eARKc,EAAU,KAAEoH,EAAa,KAUxBlI,GAASD,EAAAA,EAAAA,GAAS,CACtBpB,KAAMN,EACNwB,iBAAiB,EACjBC,OAAQA,IAHJE,KAYR,OANAsG,EAAAA,EAAAA,YAAU,WACD6B,MAAMC,QAAQpI,IACfkI,EAAclI,EAEtB,GAAG,CAACA,KAGA,+BACI,SAAC,EAAQ,CACLc,WAAYA,EACZnB,MAAOA,EACP8B,OAAQA,EACRG,QAASA,EACTD,OAAQA,EACR6B,MAAOA,EACPmE,KAAMA,KAItB,EAEA,GAAevG,EAAAA,EAAAA,MAAK2G,G,UCpDPM,EAAmB,CACxB,CACIhF,MAAO,KACPE,UAAW,OACX5D,MAAO,OAEX,CACI0D,MAAO,MACPE,UAAW,QACX5D,MAAO,IAEX,CACI0D,MAAO,MACPE,UAAW,QACX5D,MAAO,IAEX,CACI0D,MAAO,MACPE,UAAW,SACX5D,MAAO,IAEX,CACI0D,MAAO,OACPE,UAAW,UACX5D,MAAO,KAIF2I,EAAmB,CAC5B,CACIjF,MAAO,KACPE,UAAW,OACX5D,MAAO,OAEX,CACI0D,MAAO,MACPE,UAAW,QACX5D,MAAO,IAEX,CACI0D,MAAO,MACPE,UAAW,QACX5D,MAAO,IAEX,CACI0D,MAAO,MACPE,UAAW,SACX5D,MAAO,IAEX,CACI0D,MAAO,OACPE,UAAW,UACX5D,MAAO,KC9Cb4I,EAAY,WAEd,OACI,+BACI,UAAC,IAAI,CAAC5I,MAAM,OAAM,WACd,UAAC,IAAI,CAACA,MAAM,MAAMiI,cAAc,SAAQ,WACpC,SAAC,IAAY,CACTvJ,IAAI,GACJoB,OAAO,GACPL,QAASiJ,EACTxI,iBAAe,KAEnB,SAAC,IAAY,CACTxB,IAAI,GACJoB,OAAO,GACPL,QAASkJ,EACTzI,iBAAe,QAGvB,UAAC,IAAI,CAACF,MAAM,MAAMiI,cAAc,SAAQ,WACpC,SAAC,EAAY,CACTvJ,IAAI,wBACJmF,MAAM,QACNmE,KAAK,MACLhI,MAAM,UAEV,SAAC,EAAY,CACTtB,IAAI,wBACJmF,MAAM,QACNmE,KAAK,MACLhI,MAAM,gBAO9B,EAEA,GAAeyB,EAAAA,EAAAA,MAAKmH,E","sources":["../common/TableView/src/hooks/useTableControlsButtons.ts","../common/TableView/src/ApiTable.tsx","../common/button/src/iconButton.tsx","../common/TableView/src/Table.tsx","../common/global/src/api.ts","../common/hooks/src/useFetch.ts","../common/hooks/src/usePost.ts","../common/chart-js/src/chart.tsx","../common/chart-js/src/chartWithApi.tsx","../pages/DashBoard/src/constants.ts","../pages/DashBoard/src/component.tsx"],"sourcesContent":["import { useState, useCallback } from \"react\";\r\nimport {  usePost } from \"@commons/hooks\";\r\n\r\nconst useTableControlsButtons = ({api = \"\"}) => {\r\n\r\n    const [selectedRow, setRows] = useState<any>({})\r\n    const { setRow } = usePost({link: api})\r\n\r\n    const onSaveAndInsertion = ()=>{\r\n        //@ts-ignore\r\n       if(selectedRow.query_status !== undefined){\r\n        setRow(selectedRow)\r\n       }\r\n    }\r\n\r\n    const setSelectedRow = useCallback((v:any)=>{\r\n        setRows(v)\r\n    },[])\r\n    return{setSelectedRow, onSaveAndInsertion, selectedRow}\r\n\r\n}\r\n\r\nexport default useTableControlsButtons","import React, { memo, useState, useCallback } from \"react\";\r\nimport Table from \"./Table\";\r\nimport { useFetch } from \"@commons/hooks\"\r\nimport useTableControlsButtons from \"./hooks/useTableControlsButtons\"\r\n\r\ninterface TableWithApiProps {\r\n    api: string;\r\n    postApi?: string;\r\n    columns: {\r\n        title: string,\r\n        dataIndex: string,\r\n        width: number | string\r\n    }[];\r\n    hideTools?: boolean;\r\n    canAdd?: boolean;\r\n    canEdit?: boolean;\r\n    canDelete?: boolean;\r\n    rowKey: string;\r\n    Modal?: any;\r\n    width?: number | string;\r\n    onSelectedRow?: any;\r\n    fetchOnFirstRun?: boolean;\r\n    refreshAfter?: number;\r\n    params?: any;\r\n}\r\n\r\nconst TableWithApi = ({\r\n    api,\r\n    postApi,\r\n    columns,\r\n    hideTools,\r\n    canAdd,\r\n    canEdit,\r\n    canDelete,\r\n    rowKey,\r\n    Modal,\r\n    width,\r\n    onSelectedRow,\r\n    fetchOnFirstRun = false,\r\n    params\r\n}: TableWithApiProps) => {\r\n    const { data, runFetch } = useFetch({ link: api, fetchOnFirstRun: fetchOnFirstRun, params: params })\r\n    const { setSelectedRow, onSaveAndInsertion, selectedRow } = useTableControlsButtons({ api: postApi })\r\n    const [rows, setRows] = useState({})\r\n    const [modal, setModal] = useState(false)\r\n    const handleAdd = useCallback(() => {\r\n        setSelectedRow({ query_status: \"n\" })\r\n        setModal(true)\r\n    }, [setSelectedRow])\r\n    const handleEdit = useCallback(() => {\r\n        setSelectedRow({ ...rows, query_status: \"u\" })\r\n        setModal(true)\r\n    }, [rows, setSelectedRow])\r\n    const handleDelete = () => {\r\n        setSelectedRow({ ...rows, query_status: \"d\" })\r\n        onSaveAndInsertion()\r\n    }\r\n\r\n    const handleCloseModal = useCallback(() => {\r\n        setModal(false)\r\n    }, [])\r\n\r\n    const handleSaveModal = useCallback(() => {\r\n        setModal(false)\r\n        onSaveAndInsertion()\r\n        runFetch()\r\n    }, [onSaveAndInsertion, runFetch])\r\n\r\n    const handleSelectedRow = (row: any) => {\r\n        setRows(row)\r\n        if (onSelectedRow) onSelectedRow(row)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {Modal && <Modal\r\n                visible={modal}\r\n                onOK={handleSaveModal}\r\n                onClose={handleCloseModal}\r\n                selectedRow={selectedRow}\r\n                setSelectedRow={setSelectedRow}\r\n            />}\r\n            <Table\r\n                dataSource={data}\r\n                columns={columns}\r\n                hideTools={hideTools}\r\n                canAdd={canAdd}\r\n                canEdit={canEdit}\r\n                canDelete={canDelete}\r\n                rowkey={rowKey}\r\n                onAdd={handleAdd}\r\n                onEdit={handleEdit}\r\n                onDelete={handleDelete}\r\n                onSelectedRow={handleSelectedRow}\r\n                width={width}\r\n            >\r\n            </Table>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default memo(TableWithApi)","import React, { memo } from \"react\";\r\n\r\ninterface iconButtonProp {\r\n    icon: string;\r\n    onClick?: () => void;\r\n    disabled?: boolean;\r\n    width?: number | string;\r\n    height?: number | string;\r\n    color?: string;\r\n    margin?: number | string;\r\n    padding?: number | string;\r\n    hidden?: boolean;\r\n}\r\n\r\nconst IconButton = ({\r\n    icon,\r\n    onClick,\r\n    disabled = false,\r\n    width = \"30px\",\r\n    height = \"30px\",\r\n    color,\r\n    margin = \"10px\",\r\n    padding,\r\n    hidden = false\r\n}: iconButtonProp) => {\r\n    return (\r\n        <>\r\n            <button style={{\r\n                border: \"none\",\r\n                width: width,\r\n                height: height,\r\n                backgroundColor: color,\r\n                padding: padding,\r\n                margin: margin,\r\n                borderRadius: \"20px\"\r\n            }} hidden={!hidden} onClick={onClick} disabled={disabled} >\r\n                <i className={icon}></i>\r\n            </button>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default memo(IconButton)","import React, { useState, useCallback } from 'react';\r\nimport \"./style.css\";\r\nimport { Button, IconButton } from \"@commons/button\";\r\nimport { TableProps } from \"./interfece\";\r\nimport { useTranslation } from 'react-i18next';\r\nimport Flex from \"@commons/flex\";\r\n\r\n\r\nconst Table = ({\r\n    dataSource,\r\n    rowkey = \"rowkey\",\r\n    columns,\r\n    hideTools = true,\r\n    canEdit = false,\r\n    canAdd = false,\r\n    canDelete = false,\r\n    onAdd,\r\n    onEdit,\r\n    onDelete,\r\n    actionColumn = false,\r\n    onAction,\r\n    actionLabel = \"\",\r\n    onSelectedRow,\r\n    canPrint = false,\r\n    onPrint,\r\n    addionalButtons,\r\n    onSave,\r\n    canSave = false,\r\n    width = \"100%\",\r\n    margin = \"\",\r\n    padding = \"\"\r\n}: TableProps) => {\r\n    const { t } = useTranslation()\r\n    const [rowSelected, setRowSelected] = useState()\r\n    const handleSelectedRow = useCallback((item: any) => () => {\r\n        onSelectedRow(item)\r\n        setRowSelected(item)\r\n    }, [onSelectedRow])\r\n\r\n    return (\r\n        <>\r\n            <div style={{ width: width, padding: padding, margin: margin }}>\r\n                <Flex\r\n                    width='100%'\r\n                    padding='0'\r\n                    margin='5px 0'\r\n                    justifyContent='center'\r\n                    hidden={hideTools}\r\n                >\r\n                    <IconButton\r\n                        icon='fa-sharp fa-solid fa-plus'\r\n                        onClick={onAdd}\r\n                        hidden={canAdd}\r\n                    />\r\n                    <IconButton\r\n                        icon='fa-sharp fa-solid fa-pen-clip'\r\n                        onClick={onEdit}\r\n                        hidden={canEdit}\r\n                        disabled={!rowSelected}\r\n                    />\r\n                    <IconButton\r\n                        icon='fa-sharp fa-solid fa-trash'\r\n                        onClick={onDelete}\r\n                        hidden={canDelete}\r\n                        disabled={!rowSelected}\r\n                    />\r\n                    {addionalButtons && addionalButtons.map((button: any[]) => {\r\n                        return (\r\n                            <IconButton\r\n                                //@ts-ignore\r\n                                icon={button.icon}\r\n                                //@ts-ignore\r\n                                onClick={button.onClick}\r\n                                //@ts-ignore\r\n                                hidden={button.hidden}\r\n                            />\r\n                        )\r\n                    })}\r\n                    <IconButton\r\n                        icon='fa-solid fa-floppy-disk'\r\n                        onClick={onSave}\r\n                        disabled={canSave}\r\n                    />\r\n                    <IconButton\r\n                        icon='fa-solid fa-print'\r\n                        onClick={onPrint}\r\n                        disabled={canPrint}\r\n                    />\r\n                </Flex>\r\n                <table className='table m-0'>\r\n                    <thead>\r\n                        <tr className='table-secondary'>\r\n                            {columns.map((item: any) => {\r\n                                return (\r\n                                    <th scope=\"col\" style={{ width: item.width }}>\r\n                                        {t(item.title)}\r\n                                    </th>\r\n                                )\r\n                            })}\r\n                            <th hidden={!actionColumn}>{t(\"actn\")}</th>\r\n                        </tr>\r\n                    </thead>\r\n                </table>\r\n                <div className=\"tbl-content\">\r\n                    <table className='table '>\r\n                        <tbody>\r\n                            {dataSource?.map((item: any) => {\r\n                                return (\r\n                                    <tr key={item[rowkey]} onClick={handleSelectedRow(item)}>\r\n                                        {columns.map((column: any) => {\r\n                                            return (\r\n                                                <td className={`${rowSelected === item ? \"table-success\" : \"table-light\"} `} style={{ width: column.width }}>\r\n                                                    {item[column.dataIndex]}\r\n                                                </td>\r\n                                            )\r\n                                        })}\r\n                                        <td className={`${rowSelected === item ? \"table-success\" : \"table-light\"} `} hidden={!actionColumn}>\r\n                                            <Button\r\n                                                label={actionLabel}\r\n                                                onClick={() => { onAction(item) }}\r\n                                            />\r\n                                        </td>\r\n                                    </tr>\r\n                                )\r\n                            })}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Table;\r\n","const API_ID = {\r\n    QUERY_CUSTOMER_TABLE_DATA: \"basicData/customers\",\r\n    POST_CUSTOMER_TABLE_DATA: \"basicData/customers_dml\",\r\n    QUERY_SUPPLIER_TABLE_DATA: \"basicData/suppliers\",\r\n    POST_SUPPLIER_TABLE_DATA: \"basicData/suppliers_dml\",\r\n    POST_CUSTOMER_INVOICE_DETAILS: \"invoices/customer_invoice_dml\",\r\n    POST_EMPLOYEE_ATTENDANCE: \"employeesData/employee_attendance_dml\",\r\n    POST_EMPLOYEE_LEAVING: \"employeesData/employee_leaving_dml\",\r\n    QUERY_EMPLOYEES_TABLE_DATA: \"employeesData/employees\",\r\n    POST_EMPLOYEES_TABLE_DATA: \"employeesData/employees_dml\",\r\n    QUERY_INVOICE_DETAIL_TABLE_DATA: \"invoices/get_invoice_detail\",\r\n    QUERY_INVOICE_MASTER_TABLE_DATA: \"invoices/get_invoice_master\",\r\n    QUERY_ITEMS_TABLE_DATA: \"basicData/items\",\r\n    POST_ITEMS_TABLE_DATA: \"basicData/items_dml\",\r\n    QUERY_PRINT_OPTIONS_TABLE_DAT: \"basicData/print_options\",\r\n    POST_PRINT_OPTIONS_TABLE_DATA:\"basicData/print_options_dml\",\r\n    USER_LOG_IN: \"user_log_in\",\r\n    POST_SUPPLIER_INVOICE: \"invoices/supplier_invoice_dml\",\r\n    QUERY_LABELS: \"get_labels\",\r\n    QUERY_CHUNK_LABELS: \"get_chunk_labels\",\r\n    QUERY_EMPLOYEE_NAME_LIST: \"employeesData/pop_employee_name\",\r\n    QUERY_CUSTOMER_AND_SUPPLIER_LIST: \"invoices/get_customer_supplier_list\",\r\n    QUERY_SUPPLIER_LIST: \"basicData/supplier_pop_data\",\r\n    QUERY_CUSTOMERS_LIST: \"basicData/customer_pop_data\",\r\n    QUERY_ITEMS_LIST: \"basicData/items_pop_data\",\r\n    //http://144.24.209.19:9090/api/v1/employeesData/employee_sheet?employee_id=4\r\n    QUERY_EMPLOYEE_SHEET_SALARY: \"employeesData/employee_sheet\",\r\n    //http://144.24.209.19:9090/api/v1/income_expense/get_casher_receipt_voucher_invoices?date_from=2023-04-01&date_to=2023-04-30\r\n    QUERY_CASHER_RECEIPT_VOUCHER_TABLE_DATA: \"income_expense/get_casher_receipt_voucher_invoices\",\r\n    //http://144.24.209.19:9090/api/v1/income_expense/post_casher_receipt_voucher_invoices_dml?authorization=1677621781730\r\n    POST_CASHER_RECEIPT_VOUCHER_TABLE_DATA: \"income_expense/post_casher_receipt_voucher_invoices_dml\",\r\n    //http://144.24.209.19:9090/api/v1/income_expense/get_casher_payment_voucher_invoices?date_from=2023-04-01&date_to=2023-04-30\r\n    QUERY_CASHER_PAYMENT_VOUCHER_TABLE_DATA: \"income_expense/get_casher_payment_voucher_invoices\",\r\n    //http://144.24.209.19:9090/api/v1/income_expense/post_casher_payment_voucher_invoices_dml?authorization=1677621781730\r\n    POST_CASHER_PAYMENT_VOUCHER_TABLE_DATA: \"income_expense/post_casher_payment_voucher_invoices_dml\",\r\n    //http://144.24.209.19:9090/api/v1/home/dash_board_get_data?authorization=1677621781730\r\n    QUERY_MAIN_CHART_DATA: \"home/dash_board_get_data\"\r\n};\r\n\r\nexport default API_ID","import { useState, useEffect, useCallback } from \"react\";\r\nimport {API_ID} from \"@commons/global\";\r\nimport { useLocalStorage } from \"@commons/hooks\";\r\nimport { useToast } from '@chakra-ui/react';\r\n\r\ninterface useFetchProp {\r\n  link: string;\r\n  fetchOnFirstRun?: boolean;\r\n  refreshTimeout?: number;\r\n  params?: any\r\n  noAuthorization?: boolean\r\n}\r\n\r\nconst useFetch = ({\r\n    link = \"\", \r\n    fetchOnFirstRun,\r\n    refreshTimeout,\r\n    params, \r\n    noAuthorization = false\r\n  }: useFetchProp) => {\r\n    const toast = useToast()\r\n  const { authorization } = useLocalStorage()\r\n  //@ts-ignore\r\n  const url = `http://144.24.209.19:9090/api/v1/${API_ID[link]}`\r\n  const [data, setData] = useState<any>([]);\r\n  const getData = useCallback(async()=>{\r\n    if(authorization || noAuthorization){\r\nconst response = await fetch(`${url}?authorization=${authorization}&${new URLSearchParams(params)}`)\r\n    const apiData=await response.json();  \r\n  setData(apiData);\r\n    }\r\n},[authorization, noAuthorization, params, url])\r\n\r\n\r\n    useEffect(() => {\r\n      if(fetchOnFirstRun){\r\n        getData()\r\n      }\r\n      }, [fetchOnFirstRun, getData, url, params]);\r\n\r\n      useEffect(()=>{\r\n        if (data.response){\r\n          toast({\r\n            position: \"top-right\",\r\n            title: 'error',\r\n            description: `${JSON.stringify(data.response)}`,\r\n            status: 'error',\r\n            duration: 5000,\r\n            isClosable: true,\r\n        })\r\n        }\r\n      }, [data, toast])\r\n\r\n\r\n\r\n      const runFetch = useCallback(()=>{\r\n          getData()\r\n      },[getData])\r\n\r\n      return{data, runFetch, setData}\r\n}\r\n\r\nexport default useFetch","import { useState, useCallback } from \"react\";\r\nimport { useLocalStorage } from \"@commons/hooks\";\r\nimport {API_ID} from \"@commons/global\";\r\nimport { useToast } from '@chakra-ui/react';\r\n\r\ninterface usePostProps{\r\n    link: string;\r\n    noAuthorization?: boolean\r\n};\r\ninterface successType{\r\n    response: string;\r\n}\r\n\r\nconst usePost = ({\r\n    link  = \"\",\r\n    noAuthorization = false\r\n}: usePostProps) => {\r\n    const toast = useToast()\r\n    //@ts-ignore\r\n    const url = `http://144.24.209.19:9090/api/v1/${API_ID[link]}`\r\n    const [success, setSuccess] = useState<successType>()\r\n    const { authorization } = useLocalStorage()\r\n    const postData = useCallback(async (dataToPost: any) => {\r\n        if(authorization || noAuthorization){\r\n        dataToPost.authorization = authorization\r\n        const settings = {\r\n            method: 'POST',\r\n            headers: {\r\n                Accept: 'application/json',\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(dataToPost)\r\n        };\r\n        try {\r\n            const fetchResponse = await fetch(url, settings);\r\n            const data = await fetchResponse.json();\r\n            if (data.response === \"success\"){\r\n            toast({\r\n            position: \"top-right\",\r\n            title: 'Success',\r\n            description: `${data.response}`,\r\n            status: 'success',\r\n            duration: 5000,\r\n            isClosable: true,\r\n        })\r\n            } else {\r\n                toast({\r\n            position: \"top-right\",\r\n            title: 'Error',\r\n            description: `${data.response}`,\r\n            status: 'error',\r\n            duration: 9000,\r\n            isClosable: true,\r\n        })\r\n            }\r\n            setSuccess(data)\r\n            return data\r\n        } catch (e) {\r\n            console.log(e)\r\n        }}\r\n    }, [authorization, noAuthorization, toast, url])\r\n\r\n    const setRow = useCallback((row: any) => {\r\n        postData(row)\r\n    }, [postData])\r\n\r\n    return { success, setRow }\r\n}\r\n\r\nexport default usePost","import React, { memo } from \"react\";\r\nimport 'chart.js/auto';\r\nimport { Chart } from 'react-chartjs-2';\r\nimport { useTranslation } from 'react-i18next';\r\nimport Flex from \"@commons/flex\";\r\nimport { barChartProp } from \"./interface\";\r\n\r\nconst BarChart = ({\r\n  mode = 'bar',\r\n  width,\r\n  height,\r\n  margin,\r\n  padding,\r\n  label = \"chart\",\r\n  dataSource\r\n}: any) => {\r\n  const { t } = useTranslation()\r\n  const view = () => {\r\n\r\n    switch (mode) {\r\n      case \"line\":\r\n        return <Chart type='line' data={dataSource} />;\r\n      case \"pie\":\r\n        return <Chart type='pie' data={dataSource} />;\r\n      case \"bar\":\r\n        return <Chart type='bar' data={dataSource} />;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Flex\r\n        flexDirection=\"column\"\r\n        width={width}\r\n        height={height}\r\n        margin={margin}\r\n        padding={padding}\r\n      >\r\n        <Flex width=\"100%\" justifyContent=\"center\">\r\n          <p>{t(label)}</p>\r\n        </Flex>\r\n        {view()}\r\n      </Flex>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default memo(BarChart)","import React, { memo, useEffect, useState } from \"react\";\r\nimport BarChart from \"./chart\";\r\nimport { useFetch } from \"@commons/hooks\"\r\n\r\nconst ChartWithApi = ({\r\n    api,\r\n    params,\r\n    width,\r\n    height,\r\n    padding,\r\n    margin,\r\n    label,\r\n    mode\r\n}: any) => {\r\n\r\n    const [dataSource, setDataSource] = useState({\r\n        labels: [],\r\n        datasets: [\r\n            {\r\n                label: '',\r\n                data: [],\r\n            },\r\n        ],\r\n    })\r\n\r\n    const { data } = useFetch({\r\n        link: api,\r\n        fetchOnFirstRun: true,\r\n        params: params\r\n    })\r\n\r\n    useEffect(() => {\r\n        if (!Array.isArray(data)) {\r\n            setDataSource(data)\r\n        }\r\n    }, [data])\r\n\r\n    return (\r\n        <>\r\n            <BarChart\r\n                dataSource={dataSource}\r\n                width={width}\r\n                height={height}\r\n                padding={padding}\r\n                margin={margin}\r\n                label={label}\r\n                mode={mode}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default memo(ChartWithApi);","export const suppliersColumns = [\r\n        {\r\n            title: \"nm\",\r\n            dataIndex: \"name\",\r\n            width: \"20%\"\r\n        },\r\n        {\r\n            title: \"eml\",\r\n            dataIndex: \"email\",\r\n            width: 17\r\n        },\r\n        {\r\n            title: \"phn\",\r\n            dataIndex: \"phone\",\r\n            width: 15\r\n        },\r\n        {\r\n            title: \"mbl\",\r\n            dataIndex: \"mobile\",\r\n            width: 15\r\n        },\r\n        {\r\n            title: \"adrs\",\r\n            dataIndex: \"address\",\r\n            width: 20\r\n        }\r\n    ]\r\n\r\n    export const customersColumns = [\r\n        {\r\n            title: \"nm\",\r\n            dataIndex: \"name\",\r\n            width: \"20%\"\r\n        },\r\n        {\r\n            title: \"eml\",\r\n            dataIndex: \"email\",\r\n            width: 17\r\n        },\r\n        {\r\n            title: \"phn\",\r\n            dataIndex: \"phone\",\r\n            width: 15\r\n        },\r\n        {\r\n            title: \"mbl\",\r\n            dataIndex: \"mobile\",\r\n            width: 15\r\n        },\r\n        {\r\n            title: \"adrs\",\r\n            dataIndex: \"address\",\r\n            width: 20\r\n        }\r\n    ]","import React, { memo } from 'react';\r\nimport { ChartWithApi } from \"@pages/chart-js\";\r\nimport Flex from \"@commons/flex\";\r\nimport { TableWithApi } from \"@commons/table\";\r\nimport { suppliersColumns, customersColumns } from \"./constants\"\r\n\r\nconst DashBoard = () => {\r\n\r\n    return (\r\n        <>\r\n            <Flex width='100%'>\r\n                <Flex width='75%' flexDirection='column'>\r\n                    <TableWithApi\r\n                        api=''\r\n                        rowKey=''\r\n                        columns={suppliersColumns}\r\n                        fetchOnFirstRun\r\n                    />\r\n                    <TableWithApi\r\n                        api=''\r\n                        rowKey=''\r\n                        columns={customersColumns}\r\n                        fetchOnFirstRun\r\n                    />\r\n                </Flex>\r\n                <Flex width='25%' flexDirection=\"column\">\r\n                    <ChartWithApi\r\n                        api=\"QUERY_MAIN_CHART_DATA\"\r\n                        label=\"vault\"\r\n                        mode=\"pie\"\r\n                        width=\"100%\"\r\n                    />\r\n                    <ChartWithApi\r\n                        api=\"QUERY_MAIN_CHART_DATA\"\r\n                        label=\"vault\"\r\n                        mode=\"pie\"\r\n                        width=\"100%\"\r\n                    />\r\n                </Flex>\r\n            </Flex>\r\n\r\n        </>\r\n    )\r\n};\r\n\r\nexport default memo(DashBoard);\r\n"],"names":["api","useState","selectedRow","setRows","setRow","usePost","link","setSelectedRow","useCallback","v","onSaveAndInsertion","undefined","query_status","TableWithApi","postApi","columns","hideTools","canAdd","canEdit","canDelete","rowKey","Modal","width","onSelectedRow","fetchOnFirstRun","params","useFetch","data","runFetch","useTableControlsButtons","rows","modal","setModal","handleAdd","handleEdit","handleCloseModal","handleSaveModal","visible","onOK","onClose","Table","dataSource","rowkey","onAdd","onEdit","onDelete","row","memo","IconButton","icon","onClick","disabled","height","color","margin","padding","hidden","style","border","backgroundColor","borderRadius","className","actionColumn","onAction","actionLabel","canPrint","onPrint","addionalButtons","onSave","canSave","t","useTranslation","rowSelected","setRowSelected","handleSelectedRow","item","justifyContent","map","button","scope","title","column","dataIndex","label","QUERY_CUSTOMER_TABLE_DATA","POST_CUSTOMER_TABLE_DATA","QUERY_SUPPLIER_TABLE_DATA","POST_SUPPLIER_TABLE_DATA","POST_CUSTOMER_INVOICE_DETAILS","POST_EMPLOYEE_ATTENDANCE","POST_EMPLOYEE_LEAVING","QUERY_EMPLOYEES_TABLE_DATA","POST_EMPLOYEES_TABLE_DATA","QUERY_INVOICE_DETAIL_TABLE_DATA","QUERY_INVOICE_MASTER_TABLE_DATA","QUERY_ITEMS_TABLE_DATA","POST_ITEMS_TABLE_DATA","QUERY_PRINT_OPTIONS_TABLE_DAT","POST_PRINT_OPTIONS_TABLE_DATA","USER_LOG_IN","POST_SUPPLIER_INVOICE","QUERY_LABELS","QUERY_CHUNK_LABELS","QUERY_EMPLOYEE_NAME_LIST","QUERY_CUSTOMER_AND_SUPPLIER_LIST","QUERY_SUPPLIER_LIST","QUERY_CUSTOMERS_LIST","QUERY_ITEMS_LIST","QUERY_EMPLOYEE_SHEET_SALARY","QUERY_CASHER_RECEIPT_VOUCHER_TABLE_DATA","POST_CASHER_RECEIPT_VOUCHER_TABLE_DATA","QUERY_CASHER_PAYMENT_VOUCHER_TABLE_DATA","POST_CASHER_PAYMENT_VOUCHER_TABLE_DATA","QUERY_MAIN_CHART_DATA","refreshTimeout","noAuthorization","toast","useToast","authorization","useLocalStorage","url","API_ID","setData","getData","fetch","URLSearchParams","response","json","apiData","useEffect","position","description","JSON","stringify","status","duration","isClosable","success","setSuccess","postData","dataToPost","settings","method","headers","Accept","body","fetchResponse","console","log","BarChart","mode","flexDirection","type","view","ChartWithApi","labels","datasets","setDataSource","Array","isArray","suppliersColumns","customersColumns","DashBoard"],"sourceRoot":""}