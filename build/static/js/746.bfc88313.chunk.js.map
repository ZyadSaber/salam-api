{"version":3,"file":"static/js/746.bfc88313.chunk.js","mappings":"gQAOMA,EAAW,SAAH,GAQO,IAAD,IAPlBC,KAAAA,OAAI,MAAG,MAAK,EACZC,EAAK,EAALA,MACAC,EAAM,EAANA,OACAC,EAAM,EAANA,OACAC,EAAO,EAAPA,QAAQ,EAAD,EACPC,MAAAA,OAAK,MAAG,QAAO,EACfC,EAAU,EAAVA,WAEQC,GAAMC,EAAAA,EAAAA,MAAND,EAaR,OACE,+BACE,UAAC,IAAI,CACHE,cAAc,SACdR,MAAOA,EACPC,OAAQA,EACRC,OAAQA,EACRC,QAASA,EAAQ,WAEjB,SAAC,IAAI,CAACH,MAAM,OAAOS,eAAe,SAAQ,UACxC,uBAAIH,EAAEF,OAEPC,GAxBM,WAEX,OAAQN,GACN,IAAK,OACH,OAAO,SAAC,KAAK,CAACW,KAAK,OAAOC,KAAMN,IAClC,IAAK,MACH,OAAO,SAAC,KAAK,CAACK,KAAK,MAAMC,KAAMN,IACjC,IAAK,MACH,OAAO,SAAC,KAAK,CAACK,KAAK,MAAMC,KAAMN,IAErC,CAcqBO,OAIvB,EAEA,GAAeC,EAAAA,EAAAA,MAAKf,G,mBC1CdgB,EAAe,SAAH,GAIG,IAHjBC,EAAG,EAAHA,IACAC,EAAM,EAANA,OACGC,GAAI,YAGP,GAAoCC,EAAAA,EAAAA,UAAS,CACzCC,OAAQ,GACRC,SAAU,CACN,CACIhB,MAAO,GACPO,KAAM,OAGhB,eARKN,EAAU,KAAEgB,EAAa,KAUxBV,GAASW,EAAAA,EAAAA,GAAS,CACtBC,KAAMR,EACNS,iBAAiB,EACjBR,OAAQA,IAHJL,KAYR,OANAc,EAAAA,EAAAA,YAAU,WACDC,MAAMC,QAAQhB,IACfU,EAAcV,EAEtB,GAAG,CAACA,KAGA,+BACI,SAAC,GAAQ,QACLN,WAAYA,GACRY,KAIpB,EAEA,GAAeJ,EAAAA,EAAAA,MAAKC,G,SC3CPc,EAAuB,CAClC,CACEC,MAAO,KACPC,UAAW,sBACX9B,MAAO,MAET,CACE6B,MAAO,KACPC,UAAW,sBACX9B,MAAO,OAET,CACE6B,MAAO,QACPC,UAAW,yBACX9B,MAAO,MAET,CACE6B,MAAO,WACPC,UAAW,4BACX9B,MAAO,MAET,CACE6B,MAAO,cACPC,UAAW,kCACX9B,MAAO,MAET,CACE6B,MAAO,OACPC,UAAW,wBACX9B,MAAO,MAET,CACE6B,MAAO,SACPC,UAAW,0BACX9B,MAAO,OAIE+B,EAAmB,CAC9B,CACEF,MAAO,KACPC,UAAW,aACX9B,MAAO,OAET,CACE6B,MAAO,KACPC,UAAW,sBACX9B,MAAO,OAET,CACE6B,MAAO,KACPC,UAAW,eACX9B,MAAO,OAET,CACE6B,MAAO,QACPC,UAAW,yBACX9B,MAAO,QCnDLgC,EAAY,WAEd,OACI,+BACI,UAAC,IAAI,CAAChC,MAAM,OAAM,WACd,UAAC,IAAI,CAACA,MAAM,MAAMQ,cAAc,SAAQ,WACpC,SAAC,IAAY,CACTO,IAAI,qCACJkB,OAAO,GACPC,QAASN,EACTJ,iBAAe,EACfpB,MAAM,YAEV,SAAC,IAAY,CACTW,IAAI,qCACJkB,OAAO,GACPC,QAASH,EACTP,iBAAe,EACfpB,MAAM,cAGd,UAAC,IAAI,CAACJ,MAAM,MAAMQ,cAAc,SAAQ,WACpC,SAAC,EAAY,CACTO,IAAI,4BACJX,MAAM,QACNL,KAAK,MACLC,MAAM,UAEV,SAAC,EAAY,CACTe,IAAI,wBACJX,MAAM,QACNL,KAAK,MACLC,MAAM,gBAO9B,EAEA,GAAea,EAAAA,EAAAA,MAAKmB,E","sources":["../common/chart-js/src/chart.tsx","../common/chart-js/src/chartWithApi.tsx","../pages/DashBoard/src/constants.ts","../pages/DashBoard/src/component.tsx"],"sourcesContent":["import React, { memo } from \"react\";\nimport 'chart.js/auto';\nimport { Chart } from 'react-chartjs-2';\nimport { useTranslation } from 'react-i18next';\nimport Flex from \"@commons/flex\";\nimport { barChartProp } from \"./interface\";\n\nconst BarChart = ({\n  mode = 'bar',\n  width,\n  height,\n  margin,\n  padding,\n  label = \"chart\",\n  dataSource\n}: barChartProp) => {\n  const { t } = useTranslation()\n  const view = () => {\n\n    switch (mode) {\n      case \"line\":\n        return <Chart type='line' data={dataSource} />;\n      case \"pie\":\n        return <Chart type='pie' data={dataSource} />;\n      case \"bar\":\n        return <Chart type='bar' data={dataSource} />;\n    }\n  }\n\n  return (\n    <>\n      <Flex\n        flexDirection=\"column\"\n        width={width}\n        height={height}\n        margin={margin}\n        padding={padding}\n      >\n        <Flex width=\"100%\" justifyContent=\"center\">\n          <p>{t(label)}</p>\n        </Flex>\n        {dataSource && view()}\n      </Flex>\n    </>\n  )\n}\n\nexport default memo(BarChart)","import React, { memo, useEffect, useState } from \"react\";\nimport { useFetch } from \"@commons/hooks\"\nimport BarChart from \"./chart\";\nimport { chartWithApi } from \"./interface\"\n\nconst ChartWithApi = ({\n    api,\n    params,\n    ...prop\n}: chartWithApi) => {\n\n    const [dataSource, setDataSource] = useState({\n        labels: [],\n        datasets: [\n            {\n                label: '',\n                data: [],\n            },\n        ],\n    })\n\n    const { data } = useFetch({\n        link: api,\n        fetchOnFirstRun: true,\n        params: params\n    })\n\n    useEffect(() => {\n        if (!Array.isArray(data)) {\n            setDataSource(data)\n        }\n    }, [data])\n\n    return (\n        <>\n            <BarChart\n                dataSource={dataSource}\n                {...prop}\n            />\n        </>\n    )\n}\n\nexport default memo(ChartWithApi);","export const customerTableColumns = [\n  {\n    title: \"no\",\n    dataIndex: \"customer_invoice_id\",\n    width: \"5%\",\n  },\n  {\n    title: \"nm\",\n    dataIndex: \"invoice_holder_name\",\n    width: \"10%\",\n  },\n  {\n    title: \"total\",\n    dataIndex: \"customer_invoice_total\",\n    width: \"5%\",\n  },\n  {\n    title: \"discount\",\n    dataIndex: \"customer_invoice_discount\",\n    width: \"5%\",\n  },\n  {\n    title: \"total after\",\n    dataIndex: \"customer_invoice_after_discount\",\n    width: \"5%\",\n  },\n  {\n    title: \"paid\",\n    dataIndex: \"customer_invoice_paid\",\n    width: \"5%\",\n  },\n  {\n    title: \"credit\",\n    dataIndex: \"customer_invoice_credit\",\n    width: \"5%\",\n  },\n];\n\nexport const mainTableColumns = [\n  {\n    title: \"no\",\n    dataIndex: \"invoice_id\",\n    width: \"15%\",\n  },\n  {\n    title: \"nm\",\n    dataIndex: \"invoice_holder_name\",\n    width: \"20%\",\n  },\n  {\n    title: \"dt\",\n    dataIndex: \"invoice_date\",\n    width: \"10%\",\n  },\n  {\n    title: \"total\",\n    dataIndex: \"invoice_after_discount\",\n    width: \"10%\",\n  },\n];\n","import React, { memo } from 'react';\r\nimport { ChartWithApi } from \"@pages/chart-js\";\r\nimport Flex from \"@commons/flex\";\r\nimport { TableWithApi } from \"@commons/table\";\r\nimport { mainTableColumns, customerTableColumns } from \"./constants\"\r\n\r\nconst DashBoard = () => {\r\n\r\n    return (\r\n        <>\r\n            <Flex width='100%'>\r\n                <Flex width='75%' flexDirection='column'>\r\n                    <TableWithApi\r\n                        api='QUERY_CUSTOMERS_INVOICES_FOT_TODAY'\r\n                        rowKey=''\r\n                        columns={customerTableColumns}\r\n                        fetchOnFirstRun\r\n                        label='cstmrs'\r\n                    />\r\n                    <TableWithApi\r\n                        api='QUERY_SUPPLIERS_INVOICES_FOT_TODAY'\r\n                        rowKey=''\r\n                        columns={mainTableColumns}\r\n                        fetchOnFirstRun\r\n                        label='splrs'\r\n                    />\r\n                </Flex>\r\n                <Flex width='25%' flexDirection=\"column\">\r\n                    <ChartWithApi\r\n                        api=\"QUERY_INVOICES_CHART_DATA\"\r\n                        label=\"invcs\"\r\n                        mode=\"pie\"\r\n                        width=\"100%\"\r\n                    />\r\n                    <ChartWithApi\r\n                        api=\"QUERY_MAIN_CHART_DATA\"\r\n                        label=\"vault\"\r\n                        mode=\"pie\"\r\n                        width=\"100%\"\r\n                    />\r\n                </Flex>\r\n            </Flex>\r\n\r\n        </>\r\n    )\r\n};\r\n\r\nexport default memo(DashBoard);\r\n"],"names":["BarChart","mode","width","height","margin","padding","label","dataSource","t","useTranslation","flexDirection","justifyContent","type","data","view","memo","ChartWithApi","api","params","prop","useState","labels","datasets","setDataSource","useFetch","link","fetchOnFirstRun","useEffect","Array","isArray","customerTableColumns","title","dataIndex","mainTableColumns","DashBoard","rowKey","columns"],"sourceRoot":""}