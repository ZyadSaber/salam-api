{"version":3,"file":"static/js/746.d5b457fa.chunk.js","mappings":"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","sources":["../common/TableView/src/hooks/useTableControlsButtons.ts","../common/TableView/src/ApiTable.tsx","../common/button/src/iconButton.tsx","../common/TableView/src/Table.tsx","../common/global/src/api.ts","../common/hooks/src/useFetch.ts","../common/hooks/src/usePost.ts","../common/chart-js/src/chart.tsx","../common/chart-js/src/chartWithApi.tsx","../pages/DashBoard/src/constants.ts","../pages/DashBoard/src/component.tsx"],"sourcesContent":["import { useState, useCallback } from \"react\";\r\nimport {  usePost } from \"@commons/hooks\";\r\n\r\nconst useTableControlsButtons = ({api = \"\", runFetch}:any) => {\r\n\r\n    const [selectedRow, setRows] = useState<any>({})\r\n    const { setRow } = usePost({link: api, additionalFunctionToRun:runFetch})\r\n\r\n    const onSaveAndInsertion = ()=>{\r\n        //@ts-ignore\r\n       if(selectedRow.query_status !== undefined){\r\n        setRow(selectedRow)\r\n       }\r\n    }\r\n\r\n    const setSelectedRow = useCallback((v:any)=>{\r\n        setRows(v)\r\n    },[])\r\n    return{setSelectedRow, onSaveAndInsertion, selectedRow}\r\n\r\n}\r\n\r\nexport default useTableControlsButtons","import React, { memo, useState, useCallback } from \"react\";\r\nimport Table from \"./Table\";\r\nimport { useFetch } from \"@commons/hooks\"\r\nimport useTableControlsButtons from \"./hooks/useTableControlsButtons\"\r\n\r\ninterface TableWithApiProps {\r\n    api: string;\r\n    postApi?: string;\r\n    columns: {\r\n        title: string,\r\n        dataIndex: string,\r\n        width: number | string\r\n    }[];\r\n    hideTools?: boolean;\r\n    canAdd?: boolean;\r\n    canEdit?: boolean;\r\n    canDelete?: boolean;\r\n    rowKey: string;\r\n    Modal?: any;\r\n    width?: number | string;\r\n    onSelectedRow?: any;\r\n    fetchOnFirstRun?: boolean;\r\n    refreshAfter?: number;\r\n    params?: any;\r\n}\r\n\r\nconst TableWithApi = ({\r\n    api,\r\n    postApi,\r\n    columns,\r\n    hideTools,\r\n    canAdd,\r\n    canEdit,\r\n    canDelete,\r\n    rowKey,\r\n    Modal,\r\n    width,\r\n    onSelectedRow,\r\n    fetchOnFirstRun = false,\r\n    params\r\n}: TableWithApiProps) => {\r\n    const { data, runFetch } = useFetch({ link: api, fetchOnFirstRun: fetchOnFirstRun, params: params })\r\n    const { setSelectedRow, onSaveAndInsertion, selectedRow } = useTableControlsButtons({ api: postApi, runFetch: runFetch })\r\n    const [rows, setRows] = useState({})\r\n    const [modal, setModal] = useState(false)\r\n    const handleAdd = useCallback(() => {\r\n        setSelectedRow({ query_status: \"n\" })\r\n        setModal(true)\r\n    }, [setSelectedRow])\r\n    const handleEdit = useCallback(() => {\r\n        setSelectedRow({ ...rows, query_status: \"u\" })\r\n        setModal(true)\r\n    }, [rows, setSelectedRow])\r\n    const handleDelete = () => {\r\n        setSelectedRow({ ...rows, query_status: \"d\" })\r\n        onSaveAndInsertion()\r\n    }\r\n\r\n    const handleCloseModal = useCallback(() => {\r\n        setModal(false)\r\n    }, [])\r\n\r\n    const handleSaveModal = useCallback(() => {\r\n        setModal(false)\r\n        onSaveAndInsertion()\r\n        // runFetch()\r\n    }, [onSaveAndInsertion])\r\n\r\n    const handleSelectedRow = (row: any) => {\r\n        setRows(row)\r\n        if (onSelectedRow) onSelectedRow(row)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {Modal && <Modal\r\n                visible={modal}\r\n                onOK={handleSaveModal}\r\n                onClose={handleCloseModal}\r\n                selectedRow={selectedRow}\r\n                setSelectedRow={setSelectedRow}\r\n            />}\r\n            <Table\r\n                dataSource={data}\r\n                columns={columns}\r\n                hideTools={hideTools}\r\n                canAdd={canAdd}\r\n                canEdit={canEdit}\r\n                canDelete={canDelete}\r\n                rowKey={rowKey}\r\n                onAdd={handleAdd}\r\n                onEdit={handleEdit}\r\n                onDelete={handleDelete}\r\n                onSelectedRow={handleSelectedRow}\r\n                width={width}\r\n            >\r\n            </Table>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default memo(TableWithApi)","import React, { memo } from \"react\";\nimport { iconButtonProp } from \"./interface\"\n\nconst IconButton = ({\n    icon,\n    onClick,\n    disabled = false,\n    width = \"30px\",\n    height = \"30px\",\n    color,\n    margin = \"10px\",\n    padding,\n    hidden = false\n}: iconButtonProp) => {\n    return (\n        <>\n            <button style={{\n                border: \"none\",\n                width: width,\n                height: height,\n                backgroundColor: color,\n                padding: padding,\n                margin: margin,\n                borderRadius: \"20px\"\n            }} hidden={hidden} onClick={onClick} disabled={disabled} >\n                <i className={icon}></i>\n            </button>\n        </>\n    )\n}\n\nexport default memo(IconButton)","import React, { useState, useCallback } from 'react';\r\nimport \"./style.css\";\r\nimport { Button, IconButton } from \"@commons/button\";\r\nimport { TableProps, additionalButtonsType } from \"./interface\";\r\nimport { useTranslation } from 'react-i18next';\r\nimport Flex from \"@commons/flex\";\r\n\r\n\r\nconst Table = ({\r\n    dataSource,\r\n    rowKey = \"rowKey\",\r\n    columns,\r\n    hideTools = true,\r\n    canEdit = false,\r\n    canAdd = false,\r\n    canDelete = false,\r\n    onAdd,\r\n    onEdit,\r\n    onDelete,\r\n    actionColumn = false,\r\n    onAction,\r\n    actionLabel = \"\",\r\n    onSelectedRow,\r\n    canPrint = false,\r\n    onPrint,\r\n    additionalButtons,\r\n    onSave,\r\n    canSave = false,\r\n    width = \"100%\",\r\n    margin = \"\",\r\n    padding = \"\"\r\n}: TableProps) => {\r\n    const { t } = useTranslation()\r\n    const [rowSelected, setRowSelected] = useState()\r\n    const handleSelectedRow = useCallback((item: any) => () => {\r\n        onSelectedRow(item)\r\n        setRowSelected(item)\r\n    }, [onSelectedRow])\r\n\r\n    return (\r\n        <>\r\n            <div style={{ width: width, padding: padding, margin: margin }}>\r\n                <Flex\r\n                    width='100%'\r\n                    padding='0'\r\n                    margin='5px 0'\r\n                    justifyContent='center'\r\n                    hidden={hideTools}\r\n                >\r\n                    <IconButton\r\n                        icon='fa-sharp fa-solid fa-plus'\r\n                        onClick={onAdd}\r\n                        hidden={!canAdd}\r\n                    />\r\n                    <IconButton\r\n                        icon='fa-sharp fa-solid fa-pen-clip'\r\n                        onClick={onEdit}\r\n                        hidden={!canEdit}\r\n                        disabled={!rowSelected}\r\n                    />\r\n                    <IconButton\r\n                        icon='fa-sharp fa-solid fa-trash'\r\n                        onClick={onDelete}\r\n                        hidden={!canDelete}\r\n                        disabled={!rowSelected}\r\n                    />\r\n                    {additionalButtons && additionalButtons.map((button: additionalButtonsType) => {\r\n                        return (\r\n                            <IconButton\r\n                                icon={button.icon}\r\n                                onClick={button.onClick}\r\n                                disabled={button.disabled}\r\n                                hidden={false}\r\n                            />\r\n                        )\r\n                    })}\r\n                    <IconButton\r\n                        icon='fa-solid fa-floppy-disk'\r\n                        onClick={onSave}\r\n                        hidden={!canSave}\r\n                        disabled={!canSave}\r\n                    />\r\n                    <IconButton\r\n                        icon='fa-solid fa-print'\r\n                        onClick={onPrint}\r\n                        hidden={!canPrint}\r\n                        disabled={!canPrint}\r\n                    />\r\n                </Flex>\r\n                <table className='table m-0'>\r\n                    <thead>\r\n                        <tr className='table-secondary'>\r\n                            {columns.map((item: any) => {\r\n                                return (\r\n                                    <th scope=\"col\" style={{ width: item.width }}>\r\n                                        {t(item.title)}\r\n                                    </th>\r\n                                )\r\n                            })}\r\n                            <th hidden={!actionColumn}>{t(\"actn\")}</th>\r\n                        </tr>\r\n                    </thead>\r\n                </table>\r\n                <div className=\"tbl-content\">\r\n                    <table className='table '>\r\n                        <tbody>\r\n                            {dataSource?.map((item: any) => {\r\n                                return (\r\n                                    <tr key={item[rowKey]} onClick={handleSelectedRow(item)}>\r\n                                        {columns.map((column: any) => {\r\n                                            return (\r\n                                                <td className={`${rowSelected === item ? \"table-success\" : \"table-light\"} `} style={{ width: column.width }}>\r\n                                                    {item[column.dataIndex]}\r\n                                                </td>\r\n                                            )\r\n                                        })}\r\n                                        <td className={`${rowSelected === item ? \"table-success\" : \"table-light\"} `} hidden={!actionColumn}>\r\n                                            <Button\r\n                                                label={actionLabel}\r\n                                                onClick={() => { onAction(item) }}\r\n                                            />\r\n                                        </td>\r\n                                    </tr>\r\n                                )\r\n                            })}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Table;\r\n","const API_ID = {\n    QUERY_CUSTOMER_TABLE_DATA: \"basicData/customers\",\n    POST_CUSTOMER_TABLE_DATA: \"basicData/customers_dml\",\n    QUERY_SUPPLIER_TABLE_DATA: \"basicData/suppliers\",\n    POST_SUPPLIER_TABLE_DATA: \"basicData/suppliers_dml\",\n    POST_CUSTOMER_INVOICE_DETAILS: \"invoices/customer_invoice_dml\",\n    POST_EMPLOYEE_ATTENDANCE: \"employeesData/employee_attendance_dml\",\n    POST_EMPLOYEE_LEAVING: \"employeesData/employee_leaving_dml\",\n    QUERY_EMPLOYEES_TABLE_DATA: \"employeesData/employees\",\n    POST_EMPLOYEES_TABLE_DATA: \"employeesData/employees_dml\",\n    QUERY_INVOICE_DETAIL_TABLE_DATA: \"invoices/get_invoice_detail\",\n    QUERY_INVOICE_MASTER_TABLE_DATA: \"invoices/get_invoice_master\",\n    QUERY_ITEMS_TABLE_DATA: \"basicData/items\",\n    POST_ITEMS_TABLE_DATA: \"basicData/items_dml\",\n    QUERY_PRINT_OPTIONS_TABLE_DAT: \"basicData/print_options\",\n    POST_PRINT_OPTIONS_TABLE_DATA:\"basicData/print_options_dml\",\n    USER_LOG_IN: \"user_log_in\",\n    POST_SUPPLIER_INVOICE: \"invoices/supplier_invoice_dml\",\n    QUERY_LABELS: \"get_labels\",\n    QUERY_CHUNK_LABELS: \"get_chunk_labels\",\n    QUERY_EMPLOYEE_NAME_LIST: \"employeesData/pop_employee_name\",\n    QUERY_CUSTOMER_AND_SUPPLIER_LIST: \"invoices/get_customer_supplier_list\",\n    QUERY_SUPPLIER_LIST: \"basicData/supplier_pop_data\",\n    QUERY_CUSTOMERS_LIST: \"basicData/customer_pop_data\",\n    QUERY_ITEMS_LIST: \"basicData/items_pop_data\",\n    QUERY_PRINT_OPTIONS_LIST: \"basicData/print_options_pop_data\",\n    //http://144.24.209.19:9090/api/v1/employeesData/employee_sheet?employee_id=4\n    QUERY_EMPLOYEE_SHEET_SALARY: \"employeesData/employee_sheet\",\n    //http://144.24.209.19:9090/api/v1/income_expense/get_casher_receipt_voucher_invoices?date_from=2023-04-01&date_to=2023-04-30\n    QUERY_CASHER_RECEIPT_VOUCHER_TABLE_DATA: \"income_expense/get_casher_receipt_voucher_invoices\",\n    //http://144.24.209.19:9090/api/v1/income_expense/post_casher_receipt_voucher_invoices_dml?authorization=1677621781730\n    POST_CASHER_RECEIPT_VOUCHER_TABLE_DATA: \"income_expense/post_casher_receipt_voucher_invoices_dml\",\n    //http://144.24.209.19:9090/api/v1/income_expense/get_casher_payment_voucher_invoices?date_from=2023-04-01&date_to=2023-04-30\n    QUERY_CASHER_PAYMENT_VOUCHER_TABLE_DATA: \"income_expense/get_casher_payment_voucher_invoices\",\n    //http://144.24.209.19:9090/api/v1/income_expense/post_casher_payment_voucher_invoices_dml?authorization=1677621781730\n    POST_CASHER_PAYMENT_VOUCHER_TABLE_DATA: \"income_expense/post_casher_payment_voucher_invoices_dml\",\n    //http://144.24.209.19:9090/api/v1/home/dash_board_get_data?authorization=1677621781730\n    QUERY_MAIN_CHART_DATA: \"home/dash_board_get_data\",\n    //http://144.24.209.19:9090/api/v1/basicData/expenses_types_data?authorization=1684527411581&\n    QUERY_EXPENSES_TYPES_TABLE_DATA: \"basicData/expenses_types_data\",\n    //http://144.24.209.19:9090/api/v1/basicData/expenses_types_data?authorization=1684527411581&\n    POST_EXPENSES_TYPES_TABLE_DATA: \"basicData/expenses_types_dml\",\n};\n\nexport default API_ID","import { useState, useEffect, useCallback } from \"react\";\r\nimport {API_ID} from \"@commons/global\";\r\nimport { useLocalStorage } from \"@commons/hooks\";\r\nimport { useToast } from '@chakra-ui/react';\r\n\r\ninterface useFetchProp {\r\n  link: string;\r\n  fetchOnFirstRun?: boolean;\r\n  refreshTimeout?: number;\r\n  params?: any\r\n  noAuthorization?: boolean\r\n}\r\n\r\nconst useFetch = ({\r\n    link = \"\", \r\n    fetchOnFirstRun,\r\n    refreshTimeout,\r\n    params, \r\n    noAuthorization = false\r\n  }: useFetchProp) => {\r\n    const toast = useToast()\r\n  const { authorization } = useLocalStorage()\r\n  //@ts-ignore\r\n  const url = `http://144.24.209.19:9090/api/v1/${API_ID[link]}`\r\n  const [data, setData] = useState<any>([]);\r\n  const getData = useCallback(async()=>{\r\n    if(authorization || noAuthorization){\r\nconst response = await fetch(`${url}?authorization=${authorization}&${new URLSearchParams(params)}`)\r\n    const apiData=await response.json();  \r\n  setData(apiData);\r\n    }\r\n},[authorization, noAuthorization, params, url])\r\n\r\n\r\n    useEffect(() => {\r\n      if(fetchOnFirstRun){\r\n        getData()\r\n      }\r\n      }, [fetchOnFirstRun, getData, url, params]);\r\n\r\n      useEffect(()=>{\r\n        if (data.response){\r\n          toast({\r\n            position: \"top-right\",\r\n            title: 'error',\r\n            description: `${JSON.stringify(data.response)}`,\r\n            status: 'error',\r\n            duration: 5000,\r\n            isClosable: true,\r\n        })\r\n        }\r\n      }, [data, toast])\r\n\r\n\r\n\r\n      const runFetch = useCallback(()=>{\r\n          getData()\r\n      },[getData])\r\n\r\n      return{data, runFetch, setData}\r\n}\r\n\r\nexport default useFetch","import { useState, useCallback } from \"react\";\r\nimport { useLocalStorage } from \"@commons/hooks\";\r\nimport {API_ID} from \"@commons/global\";\r\nimport { useToast } from '@chakra-ui/react';\r\n\r\ninterface usePostProps{\r\n    link: string;\r\n    noAuthorization?: boolean;\r\n    additionalFunctionToRun?: ()=>void;\r\n    runOnSuccess?: ()=>void;\r\n    runOnFail?: ()=>void;\r\n};\r\ninterface successType{\r\n    response: string;\r\n}\r\n\r\nconst usePost = ({\r\n    link  = \"\",\r\n    noAuthorization = false,\r\n    additionalFunctionToRun,\r\n    runOnSuccess,\r\n    runOnFail\r\n}: usePostProps) => {\r\n    const toast = useToast()\r\n    //@ts-ignore\r\n    const url = `http://144.24.209.19:9090/api/v1/${API_ID[link]}`\r\n    const [success, setSuccess] = useState<successType>()\r\n    const { authorization } = useLocalStorage()\r\n    const postData = useCallback(async (dataToPost: any) => {\r\n        if(authorization || noAuthorization){\r\n        dataToPost.authorization = authorization\r\n        const settings = {\r\n            method: 'POST',\r\n            headers: {\r\n                Accept: 'application/json',\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(dataToPost)\r\n        };\r\n        try {\r\n            const fetchResponse = await fetch(url, settings);\r\n            const data = await fetchResponse.json();\r\n            if (data.response === \"success\"){\r\n            toast({\r\n            position: \"top-right\",\r\n            title: 'Success',\r\n            description: `${data.response}`,\r\n            status: 'success',\r\n            duration: 5000,\r\n            isClosable: true,\r\n        })\r\n        if(runOnSuccess)runOnSuccess()\r\n            } else {\r\n                toast({\r\n            position: \"top-right\",\r\n            title: 'Error',\r\n            description: `${data.response}`,\r\n            status: 'error',\r\n            duration: 9000,\r\n            isClosable: true,\r\n        })\r\n        if(runOnFail)runOnFail()\r\n            }\r\n            setSuccess(data)\r\n            if(additionalFunctionToRun){\r\n                additionalFunctionToRun()\r\n            }\r\n            return data\r\n        } catch (e) {\r\n        }}\r\n    }, [additionalFunctionToRun, authorization, noAuthorization, runOnFail, runOnSuccess, toast, url])\r\n\r\n    const setRow = useCallback((row: any) => {\r\n        postData(row)\r\n    }, [postData])\r\n\r\n    return { success, setRow }\r\n}\r\n\r\nexport default usePost","import React, { memo } from \"react\";\nimport 'chart.js/auto';\nimport { Chart } from 'react-chartjs-2';\nimport { useTranslation } from 'react-i18next';\nimport Flex from \"@commons/flex\";\nimport { barChartProp } from \"./interface\";\n\nconst BarChart = ({\n  mode = 'bar',\n  width,\n  height,\n  margin,\n  padding,\n  label = \"chart\",\n  dataSource\n}: any) => {\n  const { t } = useTranslation()\n  const view = () => {\n\n    switch (mode) {\n      case \"line\":\n        return <Chart type='line' data={dataSource} />;\n      case \"pie\":\n        return <Chart type='pie' data={dataSource} />;\n      case \"bar\":\n        return <Chart type='bar' data={dataSource} />;\n    }\n  }\n\n  return (\n    <>\n      <Flex\n        flexDirection=\"column\"\n        width={width}\n        height={height}\n        margin={margin}\n        padding={padding}\n      >\n        <Flex width=\"100%\" justifyContent=\"center\">\n          <p>{t(label)}</p>\n        </Flex>\n        {view()}\n      </Flex>\n    </>\n  )\n}\n\nexport default memo(BarChart)","import React, { memo, useEffect, useState } from \"react\";\nimport BarChart from \"./chart\";\nimport { useFetch } from \"@commons/hooks\"\n\nconst ChartWithApi = ({\n    api,\n    params,\n    width,\n    height,\n    padding,\n    margin,\n    label,\n    mode\n}: any) => {\n\n    const [dataSource, setDataSource] = useState({\n        labels: [],\n        datasets: [\n            {\n                label: '',\n                data: [],\n            },\n        ],\n    })\n\n    const { data } = useFetch({\n        link: api,\n        fetchOnFirstRun: true,\n        params: params\n    })\n\n    useEffect(() => {\n        if (!Array.isArray(data)) {\n            setDataSource(data)\n        }\n    }, [data])\n\n    return (\n        <>\n            <BarChart\n                dataSource={dataSource}\n                width={width}\n                height={height}\n                padding={padding}\n                margin={margin}\n                label={label}\n                mode={mode}\n            />\n        </>\n    )\n}\n\nexport default memo(ChartWithApi);","export const suppliersColumns = [\n        {\n            title: \"nm\",\n            dataIndex: \"name\",\n            width: \"20%\"\n        },\n        {\n            title: \"eml\",\n            dataIndex: \"email\",\n            width: 17\n        },\n        {\n            title: \"phn\",\n            dataIndex: \"phone\",\n            width: 15\n        },\n        {\n            title: \"mbl\",\n            dataIndex: \"mobile\",\n            width: 15\n        },\n        {\n            title: \"adrs\",\n            dataIndex: \"address\",\n            width: 20\n        }\n    ]\n\n    export const customersColumns = [\n        {\n            title: \"nm\",\n            dataIndex: \"name\",\n            width: \"20%\"\n        },\n        {\n            title: \"eml\",\n            dataIndex: \"email\",\n            width: 17\n        },\n        {\n            title: \"phn\",\n            dataIndex: \"phone\",\n            width: 15\n        },\n        {\n            title: \"mbl\",\n            dataIndex: \"mobile\",\n            width: 15\n        },\n        {\n            title: \"adrs\",\n            dataIndex: \"address\",\n            width: 20\n        }\n    ]","import React, { memo } from 'react';\r\nimport { ChartWithApi } from \"@pages/chart-js\";\r\nimport Flex from \"@commons/flex\";\r\nimport { TableWithApi } from \"@commons/table\";\r\nimport { suppliersColumns, customersColumns } from \"./constants\"\r\n\r\nconst DashBoard = () => {\r\n\r\n    return (\r\n        <>\r\n            <Flex width='100%'>\r\n                <Flex width='75%' flexDirection='column'>\r\n                    <TableWithApi\r\n                        api=''\r\n                        rowKey=''\r\n                        columns={suppliersColumns}\r\n                        fetchOnFirstRun\r\n                    />\r\n                    <TableWithApi\r\n                        api=''\r\n                        rowKey=''\r\n                        columns={customersColumns}\r\n                        fetchOnFirstRun\r\n                    />\r\n                </Flex>\r\n                <Flex width='25%' flexDirection=\"column\">\r\n                    <ChartWithApi\r\n                        api=\"QUERY_MAIN_CHART_DATA\"\r\n                        label=\"vault\"\r\n                        mode=\"pie\"\r\n                        width=\"100%\"\r\n                    />\r\n                    <ChartWithApi\r\n                        api=\"QUERY_MAIN_CHART_DATA\"\r\n                        label=\"vault\"\r\n                        mode=\"pie\"\r\n                        width=\"100%\"\r\n                    />\r\n                </Flex>\r\n            </Flex>\r\n\r\n        </>\r\n    )\r\n};\r\n\r\nexport default memo(DashBoard);\r\n"],"names":["api","runFetch","useState","selectedRow","setRows","setRow","usePost","link","additionalFunctionToRun","setSelectedRow","useCallback","v","onSaveAndInsertion","undefined","query_status","TableWithApi","postApi","columns","hideTools","canAdd","canEdit","canDelete","rowKey","Modal","width","onSelectedRow","fetchOnFirstRun","params","useFetch","data","useTableControlsButtons","rows","modal","setModal","handleAdd","handleEdit","handleCloseModal","handleSaveModal","visible","onOK","onClose","Table","dataSource","onAdd","onEdit","onDelete","row","memo","IconButton","icon","onClick","disabled","height","color","margin","padding","hidden","style","border","backgroundColor","borderRadius","className","actionColumn","onAction","actionLabel","canPrint","onPrint","additionalButtons","onSave","canSave","t","useTranslation","rowSelected","setRowSelected","handleSelectedRow","item","justifyContent","map","button","scope","title","column","dataIndex","label","QUERY_CUSTOMER_TABLE_DATA","POST_CUSTOMER_TABLE_DATA","QUERY_SUPPLIER_TABLE_DATA","POST_SUPPLIER_TABLE_DATA","POST_CUSTOMER_INVOICE_DETAILS","POST_EMPLOYEE_ATTENDANCE","POST_EMPLOYEE_LEAVING","QUERY_EMPLOYEES_TABLE_DATA","POST_EMPLOYEES_TABLE_DATA","QUERY_INVOICE_DETAIL_TABLE_DATA","QUERY_INVOICE_MASTER_TABLE_DATA","QUERY_ITEMS_TABLE_DATA","POST_ITEMS_TABLE_DATA","QUERY_PRINT_OPTIONS_TABLE_DAT","POST_PRINT_OPTIONS_TABLE_DATA","USER_LOG_IN","POST_SUPPLIER_INVOICE","QUERY_LABELS","QUERY_CHUNK_LABELS","QUERY_EMPLOYEE_NAME_LIST","QUERY_CUSTOMER_AND_SUPPLIER_LIST","QUERY_SUPPLIER_LIST","QUERY_CUSTOMERS_LIST","QUERY_ITEMS_LIST","QUERY_PRINT_OPTIONS_LIST","QUERY_EMPLOYEE_SHEET_SALARY","QUERY_CASHER_RECEIPT_VOUCHER_TABLE_DATA","POST_CASHER_RECEIPT_VOUCHER_TABLE_DATA","QUERY_CASHER_PAYMENT_VOUCHER_TABLE_DATA","POST_CASHER_PAYMENT_VOUCHER_TABLE_DATA","QUERY_MAIN_CHART_DATA","QUERY_EXPENSES_TYPES_TABLE_DATA","POST_EXPENSES_TYPES_TABLE_DATA","refreshTimeout","noAuthorization","toast","useToast","authorization","useLocalStorage","url","API_ID","setData","getData","fetch","URLSearchParams","response","json","apiData","useEffect","position","description","JSON","stringify","status","duration","isClosable","runOnSuccess","runOnFail","success","setSuccess","postData","dataToPost","settings","method","headers","Accept","body","fetchResponse","BarChart","mode","flexDirection","type","view","ChartWithApi","labels","datasets","setDataSource","Array","isArray","suppliersColumns","customersColumns","DashBoard"],"sourceRoot":""}