{"version":3,"file":"static/js/853.054501bc.chunk.js","mappings":"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","sources":["../common/TableView/src/hooks/useCreateTableActionRef.ts","../common/global/src/appConstants.ts","../common/hooks/src/usePrevious.ts","../common/hooks/src/useFormManager.ts","../common/input-text/src/styled.ts","../common/input-text/src/inputText.tsx","../pages/daily-totals-page/src/constant.ts","../pages/daily-totals-page/src/component.tsx","../node_modules/@chakra-ui/form-control/src/form-label.tsx","../node_modules/@chakra-ui/form-control/src/form-control.tsx"],"sourcesContent":["import { useRef, useCallback } from \"react\";\r\n\r\nconst useCreateTableActionRef = ()=>{\r\n\r\n    const tableRef = useRef()\r\n\r\n    const fetchTableData = useCallback(async (params?: any) =>\r\n    //@ts-ignore\r\n    await tableRef.current?.runFetch(params),\r\n  [tableRef])\r\n\r\n  const getTableData = useCallback(\r\n    //@ts-ignore\r\n    () => tableRef.current?.getCurrentDataSource() || [],\r\n    [tableRef]\r\n  );\r\n\r\n  const setTableData = useCallback(\r\n    //@ts-ignore\r\n    (newTableData: any) => tableRef.current?.setTableData(newTableData) || [],\r\n    [tableRef]\r\n  );\r\n\r\n  const resetTable = useCallback(\r\n    //@ts-ignore\r\n    () => tableRef.current?.resetTableData() || [],\r\n    [tableRef]\r\n  );\r\n\r\n    return {\r\n        tableRef,\r\n        fetchTableData,\r\n        getTableData,\r\n        setTableData,\r\n        resetTable\r\n    }\r\n}\r\n\r\nexport default useCreateTableActionRef","export const month = [\r\n  {\r\n    label: \"1\",\r\n    value: 1,\r\n  },\r\n  {\r\n    label: \"2\",\r\n    value: 2,\r\n  },\r\n  {\r\n    label: \"3\",\r\n    value: 3,\r\n  },\r\n  {\r\n    label: \"4\",\r\n    value: 4,\r\n  },\r\n  {\r\n    label: \"5\",\r\n    value: 5,\r\n  },\r\n  {\r\n    label: \"6\",\r\n    value: 6,\r\n  },\r\n  {\r\n    label: \"7\",\r\n    value: 7,\r\n  },\r\n  {\r\n    label: \"8\",\r\n    value: 8,\r\n  },\r\n  {\r\n    label: \"9\",\r\n    value: 9,\r\n  },\r\n  {\r\n    label: \"10\",\r\n    value: 10,\r\n  },\r\n  {\r\n    label: \"11\",\r\n    value: 11,\r\n  },\r\n  {\r\n    label: \"12\",\r\n    value: 12,\r\n  },\r\n];\r\n\r\nexport const defaultDate = `${new Date().getFullYear()}-${\r\n  new Date().getMonth() + 1\r\n}-${new Date().getDate()}`;\r\n","import { useRef, useEffect } from \"react\";\r\n\r\nconst usePrevious = <T>(value: T): T => {\r\n  const ref = useRef<T>();\r\n\r\n  useEffect(() => {\r\n    ref.current = value;\r\n  });\r\n\r\n  return ref.current as T;\r\n};\r\n\r\nexport default usePrevious;\r\n","import { useState, useCallback, useEffect, useRef } from \"react\";\r\nimport usePrevious from \"./usePrevious\";\r\n\r\ninterface useFormManagerProps {\r\n  initialValues?: any;\r\n}\r\n\r\nconst useFormManager = ({ initialValues }: useFormManagerProps) => {\r\n  const [state, setState] = useState<typeof initialValues>(initialValues);\r\n\r\n  const hasAnyFieldChangedRef = useRef(false);\r\n  const preValues = usePrevious(initialValues);\r\n\r\n  const areInitialValuesChanged = useCallback(\r\n    () => !Object.is(JSON.stringify(preValues), JSON.stringify(initialValues)),\r\n    [initialValues, preValues]\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (areInitialValuesChanged()) {\r\n      setState({ ...initialValues });\r\n    }\r\n  }, [areInitialValuesChanged, initialValues]);\r\n\r\n  const resetForm = useCallback(() => {\r\n    hasAnyFieldChangedRef.current = false;\r\n    setState(() => initialValues);\r\n    // @ts-ignore\r\n  }, [initialValues]);\r\n\r\n  useEffect(\r\n    () => {\r\n      return resetForm;\r\n    },\r\n    // eslint-disable-next-line\r\n    []\r\n  );\r\n\r\n  const onChange = useCallback(\r\n    (eventData: any) => {\r\n      const { name, value } = eventData;\r\n      setState({ ...state, [name]: value });\r\n    },\r\n    [state]\r\n  );\r\n\r\n  const handleMultiInput = useCallback((e:any)=>{\r\n    setState({\r\n      ...state,\r\n      ...e\r\n    })\r\n  },[state])\r\n\r\n  const handleSelectWithLabelChange = useCallback(\r\n    (eventData: any) => {\r\n      setState({\r\n        ...state,\r\n        [eventData.name]: eventData.value,\r\n        [eventData.selectLabelName]: eventData.label,\r\n      });\r\n    },\r\n    [state]\r\n  );\r\n\r\n  const handleArrayChange = useCallback(\r\n    ({ name, value }: any) => {\r\n      setState({ ...state, [name]: [...state[name], value] });\r\n    },\r\n    [state]\r\n  );\r\n\r\n  return {\r\n    state,\r\n    onChange,\r\n    resetForm,\r\n    handleRootState: setState,\r\n    handleSelectWithLabelChange,\r\n    handleArrayChange,\r\n    handleMultiInput\r\n  };\r\n};\r\n\r\nexport default useFormManager;\r\n","import styled from '@emotion/styled';\r\n\r\nexport const StyledInput = styled.input<any>`\r\nbackground: #fdfdfd;\r\nborder: 0.5px solid #cbd5e0;\r\nheight: 100%;\r\nwidth: 100%;\r\nborder-radius: 7px;\r\npadding: 0 16px;\r\n`\r\n\r\n//`border:  ${required ? `0.5px solid red` : `0.5px solid #cbd5e0`};`","import React, { memo, useCallback } from \"react\";\r\nimport { useTranslation } from 'react-i18next';\r\nimport { FormLabel, Flex } from '@chakra-ui/react'\r\nimport { StyledInput } from \"./styled\"\r\nimport { InputTextProps } from \"./interface\";\r\n\r\nconst InputText = ({\r\n    disabled,\r\n    value,\r\n    name,\r\n    label = \"\",\r\n    onChange,\r\n    height = \"65px\",\r\n    width = \"200px\",\r\n    type = \"text\",\r\n    placeHolder,\r\n    padding,\r\n    margin = \"10px\",\r\n    className = \"\",\r\n    required,\r\n    ...props\r\n}: InputTextProps) => {\r\n    const { t } = useTranslation();\r\n\r\n    const handleChange = useCallback((event: { target: { value: string; }; }) => {\r\n        onChange({ name: name, value: event.target.value })\r\n    }, [name, onChange]);\r\n\r\n    return (\r\n        <>\r\n            <Flex\r\n                direction=\"column\"\r\n                width={width}\r\n                padding={padding}\r\n                margin={margin}\r\n                height={height}\r\n            >\r\n                <FormLabel>{t(label)}</FormLabel>\r\n                <StyledInput\r\n                    placeholder={placeHolder}\r\n                    disabled={disabled}\r\n                    required={required}\r\n                    onChange={handleChange}\r\n                    width=\"100%\"\r\n                    className={className}\r\n                    value={value}\r\n                    type={type}\r\n                    {...props}\r\n                />\r\n            </Flex>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default memo(InputText)","export const columns = [\r\n  {\r\n    title: \"id\",\r\n    dataIndex: \"record_id\",\r\n    width: \"10%\",\r\n  },\r\n  {\r\n    title: \"typ\",\r\n    dataIndex: \"type\",\r\n    width: \"10%\",\r\n  },\r\n  {\r\n    title: \"hldrnm\",\r\n    dataIndex: \"holder_name\",\r\n    width: \"20%\",\r\n  },\r\n  {\r\n    title: \"dt\",\r\n    dataIndex: \"date\",\r\n    width: \"10%\",\r\n  },\r\n  {\r\n    title: \"crdt\",\r\n    dataIndex: \"credit\",\r\n    width: \"15%\",\r\n  },\r\n  {\r\n    title: \"dbt\",\r\n    dataIndex: \"debit\",\r\n    width: \"15%\",\r\n  },\r\n  {\r\n    title: \"total\",\r\n    dataIndex: \"total\",\r\n    width: \"15%\",\r\n  },\r\n];\r\n","import React, { memo, useCallback } from \"react\";\r\nimport Flex from \"@commons/flex\";\r\nimport InputText from \"@commons/input-text/src/inputText\";\r\nimport { TableWithApi, useCreateTableActionRef } from \"@commons/table\";\r\nimport { useFormManager } from \"@commons/hooks\";\r\nimport { defaultDate } from \"@commons/global\";\r\nimport { Button } from \"@commons/button\";\r\nimport { columns } from \"./constant\";\r\n\r\nconst DailyTotalPage = () => {\r\n    const { state, onChange } = useFormManager({ initialValues: { date_from: defaultDate, date_to: defaultDate } })\r\n\r\n    const {\r\n        tableRef,\r\n         fetchTableData,\r\n        } = useCreateTableActionRef()\r\n\r\n    const handleSearch = useCallback(() => {\r\n        fetchTableData(\r\n            {\r\n                date_from: state.date_from,\r\n                date_to: state.date_to\r\n            }\r\n        )\r\n    }, [fetchTableData, state.date_from, state.date_to])\r\n\r\n    return (\r\n        <>\r\n            <Flex width=\"100%\" flexDirection=\"column\">\r\n                <Flex width=\"100%\" >\r\n                    <InputText\r\n                        name=\"date_from\"\r\n                        type=\"date\"\r\n                        label=\"frm\"\r\n                        value={state.date_from}\r\n                        onChange={onChange}\r\n                    />\r\n                    <InputText\r\n                        name=\"date_to\"\r\n                        value={state.date_to}\r\n                        type=\"date\"\r\n                        label=\"to\"\r\n                        onChange={onChange}\r\n                    />\r\n                    <Button\r\n                        onClick={handleSearch}\r\n                        label=\"srch\"\r\n                        width=\"10%\"\r\n                    />\r\n                </Flex>\r\n                <TableWithApi\r\n                    ref={tableRef}\r\n                    api={\"QUERY_DAILY_SUMMARY_TABLE\"}\r\n                    columns={columns}\r\n                    rowKey={\"rowKey\"}\r\n                    hideTools={false}\r\n                    canExcel\r\n                />\r\n            </Flex>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default memo(DailyTotalPage)","import {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { useFormControlContext, useFormControlStyles } from \"./form-control\"\n\nexport interface FormLabelProps\n  extends HTMLChakraProps<\"label\">,\n    ThemingProps<\"FormLabel\"> {\n  /**\n   * @type React.ReactElement\n   */\n  requiredIndicator?: React.ReactElement\n  /**\n   * @type React.ReactNode\n   */\n  optionalIndicator?: React.ReactNode\n}\n\n/**\n * Used to enhance the usability of form controls.\n *\n * It is used to inform users as to what information\n * is requested for a form field.\n *\n * ♿️ Accessibility: Every form field should have a form label.\n */\nexport const FormLabel = forwardRef<FormLabelProps, \"label\">(function FormLabel(\n  passedProps,\n  ref,\n) {\n  const styles = useStyleConfig(\"FormLabel\", passedProps)\n  const props = omitThemingProps(passedProps)\n\n  const {\n    className,\n    children,\n    requiredIndicator = <RequiredIndicator />,\n    optionalIndicator = null,\n    ...rest\n  } = props\n\n  const field = useFormControlContext()\n  const ownProps = field?.getLabelProps(rest, ref) ?? { ref, ...rest }\n\n  return (\n    <chakra.label\n      {...ownProps}\n      className={cx(\"chakra-form__label\", props.className)}\n      __css={{\n        display: \"block\",\n        textAlign: \"start\",\n        ...styles,\n      }}\n    >\n      {children}\n      {field?.isRequired ? requiredIndicator : optionalIndicator}\n    </chakra.label>\n  )\n})\n\nFormLabel.displayName = \"FormLabel\"\n\nexport interface RequiredIndicatorProps extends HTMLChakraProps<\"span\"> {}\n\n/**\n * Used to show a \"required\" text or an asterisks (*) to indicate that\n * a field is required.\n */\nexport const RequiredIndicator = forwardRef<RequiredIndicatorProps, \"span\">(\n  function RequiredIndicator(props, ref) {\n    const field = useFormControlContext()\n    const styles = useFormControlStyles()\n\n    if (!field?.isRequired) return null\n\n    const className = cx(\"chakra-form__required-indicator\", props.className)\n\n    return (\n      <chakra.span\n        {...field?.getRequiredIndicatorProps(props, ref)}\n        __css={styles.requiredIndicator}\n        className={className}\n      />\n    )\n  },\n)\n\nRequiredIndicator.displayName = \"RequiredIndicator\"\n","import { createContext } from \"@chakra-ui/react-context\"\nimport { PropGetter } from \"@chakra-ui/react-types\"\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx, dataAttr } from \"@chakra-ui/shared-utils\"\nimport { useCallback, useId, useState } from \"react\"\n\nconst [FormControlStylesProvider, useFormControlStyles] = createContext<\n  Record<string, SystemStyleObject>\n>({\n  name: `FormControlStylesContext`,\n  errorMessage: `useFormControlStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<FormControl />\" `,\n})\n\nexport { useFormControlContext, useFormControlStyles }\n\nexport interface FormControlOptions {\n  /**\n   * If `true`, the form control will be required. This has 2 side effects:\n   * - The `FormLabel` will show a required indicator\n   * - The form element (e.g, Input) will have `aria-required` set to `true`\n   *\n   * @default false\n   */\n  isRequired?: boolean\n  /**\n   * If `true`, the form control will be disabled. This has 2 side effects:\n   * - The `FormLabel` will have `data-disabled` attribute\n   * - The form element (e.g, Input) will be disabled\n   *\n   * @default false\n   */\n  isDisabled?: boolean\n  /**\n   * If `true`, the form control will be invalid. This has 2 side effects:\n   * - The `FormLabel` and `FormErrorIcon` will have `data-invalid` set to `true`\n   * - The form element (e.g, Input) will have `aria-invalid` set to `true`\n   *\n   * @default false\n   */\n  isInvalid?: boolean\n  /**\n   * If `true`, the form control will be readonly\n   *\n   * @default false\n   */\n  isReadOnly?: boolean\n}\n\ninterface FormControlContext extends FormControlOptions {\n  /**\n   * The label text used to inform users as to what information is\n   * requested for a text field.\n   */\n  label?: string\n  /**\n   * The custom `id` to use for the form control. This is passed directly to the form element (e.g, Input).\n   * - The form element (e.g. Input) gets the `id`\n   * - The form label id: `form-label-${id}`\n   * - The form error text id: `form-error-text-${id}`\n   * - The form helper text id: `form-helper-text-${id}`\n   */\n  id?: string\n}\n\ntype FormControlProviderContext = Omit<\n  ReturnType<typeof useFormControlProvider>,\n  \"getRootProps\" | \"htmlProps\"\n>\n\nconst [FormControlProvider, useFormControlContext] =\n  createContext<FormControlProviderContext>({\n    strict: false,\n    name: \"FormControlContext\",\n  })\n\nfunction useFormControlProvider(props: FormControlContext) {\n  const {\n    id: idProp,\n    isRequired,\n    isInvalid,\n    isDisabled,\n    isReadOnly,\n    ...htmlProps\n  } = props\n\n  // Generate all the required ids\n  const uuid = useId()\n  const id = idProp || `field-${uuid}`\n\n  const labelId = `${id}-label`\n  const feedbackId = `${id}-feedback`\n  const helpTextId = `${id}-helptext`\n\n  /**\n   * Track whether the `FormErrorMessage` has been rendered.\n   * We use this to append its id the `aria-describedby` of the `input`.\n   */\n  const [hasFeedbackText, setHasFeedbackText] = useState(false)\n\n  /**\n   * Track whether the `FormHelperText` has been rendered.\n   * We use this to append its id the `aria-describedby` of the `input`.\n   */\n  const [hasHelpText, setHasHelpText] = useState(false)\n\n  // Track whether the form element (e.g, `input`) has focus.\n  const [isFocused, setFocus] = useState(false)\n\n  const getHelpTextProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      id: helpTextId,\n      ...props,\n      /**\n       * Notify the field context when the help text is rendered on screen,\n       * so we can apply the correct `aria-describedby` to the field (e.g. input, textarea).\n       */\n      ref: mergeRefs(forwardedRef, (node) => {\n        if (!node) return\n        setHasHelpText(true)\n      }),\n    }),\n    [helpTextId],\n  )\n\n  const getLabelProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ref: forwardedRef,\n      \"data-focus\": dataAttr(isFocused),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-readonly\": dataAttr(isReadOnly),\n      id: props.id !== undefined ? props.id : labelId,\n      htmlFor: props.htmlFor !== undefined ? props.htmlFor : id,\n    }),\n    [id, isDisabled, isFocused, isInvalid, isReadOnly, labelId],\n  )\n\n  const getErrorMessageProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      id: feedbackId,\n      ...props,\n      /**\n       * Notify the field context when the error message is rendered on screen,\n       * so we can apply the correct `aria-describedby` to the field (e.g. input, textarea).\n       */\n      ref: mergeRefs(forwardedRef, (node) => {\n        if (!node) return\n        setHasFeedbackText(true)\n      }),\n      \"aria-live\": \"polite\",\n    }),\n    [feedbackId],\n  )\n\n  const getRootProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ...htmlProps,\n      ref: forwardedRef,\n      role: \"group\",\n    }),\n    [htmlProps],\n  )\n\n  const getRequiredIndicatorProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ref: forwardedRef,\n      role: \"presentation\",\n      \"aria-hidden\": true,\n      children: props.children || \"*\",\n    }),\n    [],\n  )\n\n  return {\n    isRequired: !!isRequired,\n    isInvalid: !!isInvalid,\n    isReadOnly: !!isReadOnly,\n    isDisabled: !!isDisabled,\n    isFocused: !!isFocused,\n    onFocus: () => setFocus(true),\n    onBlur: () => setFocus(false),\n    hasFeedbackText,\n    setHasFeedbackText,\n    hasHelpText,\n    setHasHelpText,\n    id,\n    labelId,\n    feedbackId,\n    helpTextId,\n    htmlProps,\n    getHelpTextProps,\n    getErrorMessageProps,\n    getRootProps,\n    getLabelProps,\n    getRequiredIndicatorProps,\n  }\n}\n\nexport interface FormControlProps\n  extends HTMLChakraProps<\"div\">,\n    ThemingProps<\"FormControl\">,\n    FormControlContext {}\n\n/**\n * FormControl provides context such as\n * `isInvalid`, `isDisabled`, and `isRequired` to form elements.\n *\n * This is commonly used in form elements such as `input`,\n * `select`, `textarea`, etc.\n *\n * @see Docs https://chakra-ui.com/docs/components/form-control\n */\nexport const FormControl = forwardRef<FormControlProps, \"div\">(\n  function FormControl(props, ref) {\n    const styles = useMultiStyleConfig(\"Form\", props)\n    const ownProps = omitThemingProps(props)\n    const {\n      getRootProps,\n      htmlProps: _,\n      ...context\n    } = useFormControlProvider(ownProps)\n\n    const className = cx(\"chakra-form-control\", props.className)\n\n    return (\n      <FormControlProvider value={context}>\n        <FormControlStylesProvider value={styles}>\n          <chakra.div\n            {...getRootProps({}, ref)}\n            className={className}\n            __css={styles[\"container\"]}\n          />\n        </FormControlStylesProvider>\n      </FormControlProvider>\n    )\n  },\n)\n\nFormControl.displayName = \"FormControl\"\n\nexport interface FormHelperTextProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * FormHelperText\n *\n * Assistive component that conveys additional guidance\n * about the field, such as how it will be used and what\n * types in values should be provided.\n */\nexport const FormHelperText = forwardRef<FormHelperTextProps, \"div\">(\n  function FormHelperText(props, ref) {\n    const field = useFormControlContext()\n    const styles = useFormControlStyles()\n    const className = cx(\"chakra-form__helper-text\", props.className)\n    return (\n      <chakra.div\n        {...field?.getHelpTextProps(props, ref)}\n        __css={styles.helperText}\n        className={className}\n      />\n    )\n  },\n)\n\nFormHelperText.displayName = \"FormHelperText\"\n"],"names":["_ref","tableRef","useRef","fetchTableData","useCallback","_x","_asyncToGenerator","_regeneratorRuntime","mark","_callee","params","_tableRef$current","wrap","_context","prev","next","current","runFetch","abrupt","sent","stop","apply","arguments","getTableData","_tableRef$current2","getCurrentDataSource","setTableData","newTableData","_tableRef$current3","resetTable","_tableRef$current4","resetTableData","defaultDate","concat","Date","getFullYear","getMonth","getDate","value","ref","useEffect","initialValues","_useState","useState","_useState2","_slicedToArray","state","setState","hasAnyFieldChangedRef","preValues","usePrevious","areInitialValuesChanged","Object","is","JSON","stringify","_objectSpread","resetForm","onChange","eventData","name","_defineProperty","handleMultiInput","e","handleSelectWithLabelChange","_objectSpread3","selectLabelName","label","handleArrayChange","_ref2","_toConsumableArray","handleRootState","StyledInput","styled","input","_templateObject","_taggedTemplateLiteral","InputText","disabled","_ref$label","_ref$height","height","_ref$width","width","_ref$type","type","placeHolder","padding","_ref$margin","margin","_ref$className","className","required","props","_objectWithoutProperties","_excluded","t","useTranslation","handleChange","event","target","_jsx","_Fragment","children","_jsxs","Flex","direction","FormLabel","placeholder","memo","columns","title","dataIndex","DailyTotalPage","_useFormManager","useFormManager","date_from","date_to","_useCreateTableAction","useCreateTableActionRef","handleSearch","flexDirection","Button","onClick","TableWithApi","api","rowKey","hideTools","canExcel","forwardRef","passedProps","_a","styles","useStyleConfig","omitThemingProps","_props$requiredIndica","requiredIndicator","jsx","RequiredIndicator","_props$optionalIndica","optionalIndicator","rest","field","useFormControlContext","ownProps","getLabelProps","jsxs","chakra","cx","__css","display","textAlign","isRequired","displayName","useFormControlStyles","span","getRequiredIndicatorProps","_createContext","createContext","errorMessage","_createContext2","FormControlStylesProvider","_createContext3","strict","_createContext4","FormControlProvider","FormControl","useMultiStyleConfig","_useFormControlProvid","idProp","id","isInvalid","isDisabled","isReadOnly","htmlProps","uuid","useId","labelId","feedbackId","helpTextId","hasFeedbackText","setHasFeedbackText","_useState3","_useState4","hasHelpText","setHasHelpText","_useState5","_useState6","isFocused","setFocus","getHelpTextProps","props2","length","undefined","forwardedRef","mergeRefs","node","dataAttr","htmlFor","getErrorMessageProps","getRootProps","role","onFocus","onBlur","useFormControlProvider","context","_excluded2","div","helperText"],"sourceRoot":""}