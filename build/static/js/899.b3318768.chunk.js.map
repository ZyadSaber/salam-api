{"version":3,"file":"static/js/899.b3318768.chunk.js","mappings":"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","sources":["../common/modal/src/index.tsx","../common/TableView/src/ApiTable.tsx","../common/TableView/src/hooks/useCreateTableActionRef.ts","../common/TableView/src/hooks/useTableControlsButtons.ts","../common/hooks/src/useMutation.ts","../pages/customers-summary-page/src/constant.ts","../pages/customers-summary-page/src/component.tsx","../node_modules/@chakra-ui/form-control/src/form-label.tsx","../node_modules/@chakra-ui/form-control/src/form-control.tsx"],"sourcesContent":["import React, { memo } from 'react';\r\nimport { useTranslation } from 'react-i18next'\r\nimport {\r\n    Modal as ModalView,\r\n    ModalOverlay,\r\n    ModalContent,\r\n    ModalHeader,\r\n    ModalFooter,\r\n    ModalBody,\r\n    ModalCloseButton,\r\n    Button,\r\n    Flex\r\n} from '@chakra-ui/react';\r\n\r\ninterface ModalProp {\r\n    visible?: boolean,\r\n    children?: any,\r\n    label: string,\r\n    onOK?: () => void,\r\n    onClose: () => void,\r\n    submitTitle?: string,\r\n    width?: string;\r\n    hideSaveButton?: boolean;\r\n    hideCloseButton?: boolean;\r\n}\r\n\r\nconst Modal = (\r\n    {\r\n        children,\r\n        visible = false,\r\n        label,\r\n        onClose,\r\n        onOK,\r\n        submitTitle = \"smbt\",\r\n        width = \"3xl\",\r\n        hideSaveButton = false,\r\n        hideCloseButton = false\r\n    }: ModalProp\r\n) => {\r\n    const { t } = useTranslation()\r\n    return (\r\n        <>\r\n\r\n            <ModalView isOpen={visible} onClose={onClose} size={width}>\r\n                <ModalOverlay />\r\n                <ModalContent>\r\n                    <ModalHeader>{t(label)}</ModalHeader>\r\n                    <ModalCloseButton />\r\n                    <ModalBody>\r\n                        <Flex w=\"100%\" padding=\"5px\" wrap=\"wrap\">\r\n                            {children}\r\n                        </Flex>\r\n                    </ModalBody>\r\n                    <ModalFooter>\r\n                        <Flex w=\"25%\" justifyContent=\"space-around\">\r\n                            <Button colorScheme='red' mr={3} onClick={onClose} hidden={hideCloseButton}>\r\n                                {t(\"cls\")}\r\n                            </Button>\r\n                            <Button colorScheme='blue' onClick={onOK} hidden={hideSaveButton} >{t(submitTitle)}</Button>\r\n                        </Flex>\r\n                    </ModalFooter>\r\n                </ModalContent>\r\n            </ModalView>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default memo(Modal);","import React, \r\n{ \r\n    memo, \r\n    useState,\r\n    useCallback,\r\n    useImperativeHandle,\r\n    forwardRef\r\n} from \"react\";\r\nimport Table from \"./Table\";\r\nimport { useFetch } from \"@commons/hooks\"\r\nimport Modal from \"@commons/modal\";\r\nimport useTableControlsButtons from \"./hooks/useTableControlsButtons\";\r\nimport { TableWithApiProps } from \"./interface\"\r\n\r\nconst TableWithApi = ({\r\n    api,\r\n    postApi,\r\n    columns,\r\n    ModalContent,\r\n    onClick,\r\n    fetchOnFirstRun = false,\r\n    params,\r\n    checkForParams = false,\r\n    ...tableProps\r\n}: TableWithApiProps,\r\nref: any\r\n) => {\r\n    const { data, runFetch, loading } = useFetch({ link: api, fetchOnFirstRun: fetchOnFirstRun, params: params, checkForParams: true })\r\n    const { onSaveAndInsertion } = useTableControlsButtons({ api: postApi, runFetch: runFetch })\r\n    const [selectedRow, setSelectedRow] = useState({})\r\n    const [modal, setModal] = useState(false);\r\n    const handleAdd = useCallback(() => {\r\n        setSelectedRow({ query_status: \"n\" })\r\n        setModal(true)\r\n    }, [setSelectedRow])\r\n    const handleEdit = useCallback(() => {\r\n        setSelectedRow({ ...selectedRow, query_status: \"u\" })\r\n        setModal(true)\r\n    }, [selectedRow, setSelectedRow])\r\n    const handleDelete = () => {\r\n        onSaveAndInsertion({ ...selectedRow, query_status: \"d\" })\r\n    }\r\n\r\n    const handleCloseModal = useCallback(() => {\r\n        setModal(false)\r\n    }, [])\r\n\r\n\r\n    const handleSelectedRow = (row: any) => {\r\n        setSelectedRow(row)\r\n        if (onClick) onClick(row)\r\n    };\r\n\r\n    useImperativeHandle(ref, () => ({\r\n        runFetch,\r\n        // setTableData: setData,\r\n        // resetTableData,\r\n        // getCurrentDataSource: () => foundDataSource\r\n      }));\r\n\r\n    return (\r\n        <>\r\n            {ModalContent && <Modal\r\n                visible={modal}\r\n                onClose={handleCloseModal}\r\n                hideCloseButton\r\n                hideSaveButton\r\n                label=\"dtls\"\r\n            >\r\n                <ModalContent\r\n                    onClose={handleCloseModal}\r\n                    selectedRow={selectedRow}\r\n                    refreshTable={runFetch}\r\n                />\r\n            </Modal>\r\n            }\r\n            <Table\r\n                dataSource={data?.data}\r\n                columns={columns}\r\n                onAdd={handleAdd}\r\n                onEdit={handleEdit}\r\n                onDelete={handleDelete}\r\n                onSelectedRow={handleSelectedRow}\r\n                loading={loading}\r\n                {...tableProps}\r\n            >\r\n            </Table>\r\n\r\n        </>\r\n    )\r\n}\r\nexport default memo(forwardRef(TableWithApi))","import { useRef, useCallback } from \"react\";\r\n\r\nconst useCreateTableActionRef = ()=>{\r\n\r\n    const tableRef = useRef()\r\n\r\n    const fetchTableData = useCallback(async (params?: any) =>\r\n    //@ts-ignore\r\n    await tableRef.current?.runFetch(params),\r\n  [tableRef])\r\n\r\n    return {\r\n        tableRef,\r\n        fetchTableData\r\n    }\r\n}\r\n\r\nexport default useCreateTableActionRef","import { useCallback } from \"react\";\r\nimport { useMutation } from \"@commons/hooks\";\r\n\r\nconst useTableControlsButtons = ({ api = \"\", runFetch }: any) => {\r\n  const { setRow: newRecord } = useMutation({\r\n    link: api,\r\n    additionalFunctionToRun: runFetch,\r\n    method: \"POST\",\r\n  });\r\n  const { setRow: updateRecord } = useMutation({\r\n    link: api,\r\n    additionalFunctionToRun: runFetch,\r\n    method: \"PUT\",\r\n  });\r\n  const { setRow: deleteRecord } = useMutation({\r\n    link: api,\r\n    additionalFunctionToRun: runFetch,\r\n    method: \"Delete\",\r\n  });\r\n\r\n  const onSaveAndInsertion = useCallback(\r\n    (record: any) => {\r\n      if (record.query_status === \"n\") {\r\n        newRecord(record);\r\n      } else if (record.query_status === \"u\") {\r\n        updateRecord(record);\r\n      } else if (record.query_status === \"d\") {\r\n        deleteRecord(record);\r\n      }\r\n    },\r\n    [newRecord, updateRecord, deleteRecord]\r\n  );\r\n\r\n  return { onSaveAndInsertion };\r\n};\r\n\r\nexport default useTableControlsButtons;\r\n","import { useState, useCallback } from \"react\";\r\nimport { useLocalStorage } from \"@commons/hooks\";\r\nimport { API_ID } from \"@commons/global\";\r\nimport { useToast } from \"@chakra-ui/react\";\r\n\r\ninterface useMutationProps {\r\n  link: string;\r\n  noAuthorization?: boolean;\r\n  additionalFunctionToRun?: () => void;\r\n  runOnSuccess?: () => void;\r\n  runOnFail?: () => void;\r\n  method?: string;\r\n}\r\ninterface successType {\r\n  response: string;\r\n}\r\n\r\nconst useMutation = ({\r\n  link = \"\",\r\n  noAuthorization = false,\r\n  additionalFunctionToRun,\r\n  runOnSuccess,\r\n  runOnFail,\r\n  method = \"POST\",\r\n}: useMutationProps) => {\r\n  const toast = useToast();\r\n  //@ts-ignore\r\n  const url = `http://144.24.209.19:9090/api/${API_ID[link]}`;\r\n  const [success, setSuccess] = useState<successType>();\r\n  const { authorization } = useLocalStorage();\r\n  const postData = useCallback(\r\n    async (dataToPost: any) => {\r\n      if (authorization || noAuthorization) {\r\n        const settings = {\r\n          method: method,\r\n          headers: {\r\n            Accept: \"application/json\",\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: `Bearer ${authorization}`,\r\n          },\r\n          body: JSON.stringify(dataToPost),\r\n        };\r\n        try {\r\n          const fetchResponse = await fetch(url, settings);\r\n          const data = await fetchResponse.json();\r\n          if (data.response === \"success\") {\r\n            toast({\r\n              position: \"top-right\",\r\n              title: \"Success\",\r\n              description: `${data.response}`,\r\n              status: \"success\",\r\n              duration: 5000,\r\n              isClosable: true,\r\n            });\r\n            if (runOnSuccess) runOnSuccess();\r\n          } else {\r\n            toast({\r\n              position: \"top-right\",\r\n              title: \"Error\",\r\n              description: `${data.message}`,\r\n              status: \"error\",\r\n              duration: 9000,\r\n              isClosable: true,\r\n            });\r\n            if (runOnFail) runOnFail();\r\n          }\r\n          setSuccess(data);\r\n          if (additionalFunctionToRun) {\r\n            additionalFunctionToRun();\r\n          }\r\n          return data;\r\n        } catch (e) {}\r\n      }\r\n    },\r\n    [\r\n      additionalFunctionToRun,\r\n      authorization,\r\n      method,\r\n      noAuthorization,\r\n      runOnFail,\r\n      runOnSuccess,\r\n      toast,\r\n      url,\r\n    ]\r\n  );\r\n\r\n  const setRow = useCallback(\r\n    (row: any) => {\r\n      postData(row);\r\n    },\r\n    [postData]\r\n  );\r\n\r\n  return { success, setRow };\r\n};\r\n\r\nexport default useMutation;\r\n","export const columns = [\r\n  {\r\n    title: \"cstmr\",\r\n    dataIndex: \"customer_name\",\r\n    width: \"13%\",\r\n  },\r\n  {\r\n    title: \"dt\",\r\n    dataIndex: \"date\",\r\n    width: \"13%\",\r\n  },\r\n  {\r\n    title: \"crdt\",\r\n    dataIndex: \"credit\",\r\n    width: \"15%\",\r\n  },\r\n  {\r\n    title: \"dbt\",\r\n    dataIndex: \"debit\",\r\n    width: \"15%\",\r\n  },\r\n  {\r\n    title: \"blnc\",\r\n    dataIndex: \"balance\",\r\n    width: \"15%\",\r\n  },\r\n  {\r\n    title: \"dscrptn\",\r\n    dataIndex: \"description\",\r\n    width: \"25%\",\r\n  },\r\n];\r\n","import React, { memo, useCallback } from \"react\";\r\nimport Flex from \"@commons/flex\";\r\nimport InputText from \"@commons/input-text/src/inputText\";\r\nimport { SelectWithApi } from \"@commons/select\";\r\nimport { TableWithApi, useCreateTableActionRef } from \"@commons/table\";\r\nimport { useFormManager } from \"@commons/hooks\";\r\nimport { Button } from \"@commons/button\";\r\nimport { columns } from \"./constant\";\r\n\r\nconst CustomersSummaryPage = () => {\r\n    const { state, onChange } = useFormManager({ initialValues: { date_from: \"\", date_to: \"\", customer_id: \"\" } })\r\n    const {\r\n        tableRef,\r\n         fetchTableData,\r\n        } = useCreateTableActionRef()\r\n\r\n    const handleSearch = useCallback(() => {\r\n        fetchTableData(\r\n            {\r\n                customer_id: state.customer_id,\r\n                // date_from: state.date_from,\r\n                // date_to: state.date_to\r\n            }\r\n        )\r\n    }, [fetchTableData, state.customer_id])\r\n    return (\r\n        <>\r\n            <Flex width=\"100%\" flexDirection=\"column\">\r\n                <Flex width=\"100%\" >\r\n                    <SelectWithApi\r\n                        Label=\"cstmr\"\r\n                        fetchOnFirstRun\r\n                        name=\"customer_id\"\r\n                        value={state.customer_id}\r\n                        onChange={onChange}\r\n                        Api=\"QUERY_CUSTOMERS_LIST\"\r\n                    />\r\n                    <InputText\r\n                        name=\"date_from\"\r\n                        type=\"date\"\r\n                        Label=\"frm\"\r\n                        onChange={onChange}\r\n                    />\r\n                    <InputText\r\n                        name=\"date_to\"\r\n                        type=\"date\"\r\n                        Label=\"to\"\r\n                        onChange={onChange}\r\n                    />\r\n                     <Button\r\n                        onClick={handleSearch}\r\n                        label=\"search\"\r\n                        width=\"10%\"\r\n                    />\r\n                </Flex>\r\n                <TableWithApi\r\n                    ref={tableRef}\r\n                    api={\"QUERY_CUSTOMER_SUMMARY_TABLE\"}\r\n                    columns={columns}\r\n                    rowKey={\"rowKey\"}\r\n                    hideTools={false}\r\n                    canExcel\r\n                />\r\n            </Flex>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default memo(CustomersSummaryPage)","import {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { useFormControlContext, useFormControlStyles } from \"./form-control\"\n\nexport interface FormLabelProps\n  extends HTMLChakraProps<\"label\">,\n    ThemingProps<\"FormLabel\"> {\n  /**\n   * @type React.ReactElement\n   */\n  requiredIndicator?: React.ReactElement\n  /**\n   * @type React.ReactNode\n   */\n  optionalIndicator?: React.ReactNode\n}\n\n/**\n * Used to enhance the usability of form controls.\n *\n * It is used to inform users as to what information\n * is requested for a form field.\n *\n * ♿️ Accessibility: Every form field should have a form label.\n */\nexport const FormLabel = forwardRef<FormLabelProps, \"label\">(function FormLabel(\n  passedProps,\n  ref,\n) {\n  const styles = useStyleConfig(\"FormLabel\", passedProps)\n  const props = omitThemingProps(passedProps)\n\n  const {\n    className,\n    children,\n    requiredIndicator = <RequiredIndicator />,\n    optionalIndicator = null,\n    ...rest\n  } = props\n\n  const field = useFormControlContext()\n  const ownProps = field?.getLabelProps(rest, ref) ?? { ref, ...rest }\n\n  return (\n    <chakra.label\n      {...ownProps}\n      className={cx(\"chakra-form__label\", props.className)}\n      __css={{\n        display: \"block\",\n        textAlign: \"start\",\n        ...styles,\n      }}\n    >\n      {children}\n      {field?.isRequired ? requiredIndicator : optionalIndicator}\n    </chakra.label>\n  )\n})\n\nFormLabel.displayName = \"FormLabel\"\n\nexport interface RequiredIndicatorProps extends HTMLChakraProps<\"span\"> {}\n\n/**\n * Used to show a \"required\" text or an asterisks (*) to indicate that\n * a field is required.\n */\nexport const RequiredIndicator = forwardRef<RequiredIndicatorProps, \"span\">(\n  function RequiredIndicator(props, ref) {\n    const field = useFormControlContext()\n    const styles = useFormControlStyles()\n\n    if (!field?.isRequired) return null\n\n    const className = cx(\"chakra-form__required-indicator\", props.className)\n\n    return (\n      <chakra.span\n        {...field?.getRequiredIndicatorProps(props, ref)}\n        __css={styles.requiredIndicator}\n        className={className}\n      />\n    )\n  },\n)\n\nRequiredIndicator.displayName = \"RequiredIndicator\"\n","import { createContext } from \"@chakra-ui/react-context\"\nimport { PropGetter } from \"@chakra-ui/react-types\"\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx, dataAttr } from \"@chakra-ui/shared-utils\"\nimport { useCallback, useId, useState } from \"react\"\n\nconst [FormControlStylesProvider, useFormControlStyles] = createContext<\n  Record<string, SystemStyleObject>\n>({\n  name: `FormControlStylesContext`,\n  errorMessage: `useFormControlStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<FormControl />\" `,\n})\n\nexport { useFormControlContext, useFormControlStyles }\n\nexport interface FormControlOptions {\n  /**\n   * If `true`, the form control will be required. This has 2 side effects:\n   * - The `FormLabel` will show a required indicator\n   * - The form element (e.g, Input) will have `aria-required` set to `true`\n   *\n   * @default false\n   */\n  isRequired?: boolean\n  /**\n   * If `true`, the form control will be disabled. This has 2 side effects:\n   * - The `FormLabel` will have `data-disabled` attribute\n   * - The form element (e.g, Input) will be disabled\n   *\n   * @default false\n   */\n  isDisabled?: boolean\n  /**\n   * If `true`, the form control will be invalid. This has 2 side effects:\n   * - The `FormLabel` and `FormErrorIcon` will have `data-invalid` set to `true`\n   * - The form element (e.g, Input) will have `aria-invalid` set to `true`\n   *\n   * @default false\n   */\n  isInvalid?: boolean\n  /**\n   * If `true`, the form control will be readonly\n   *\n   * @default false\n   */\n  isReadOnly?: boolean\n}\n\ninterface FormControlContext extends FormControlOptions {\n  /**\n   * The label text used to inform users as to what information is\n   * requested for a text field.\n   */\n  label?: string\n  /**\n   * The custom `id` to use for the form control. This is passed directly to the form element (e.g, Input).\n   * - The form element (e.g. Input) gets the `id`\n   * - The form label id: `form-label-${id}`\n   * - The form error text id: `form-error-text-${id}`\n   * - The form helper text id: `form-helper-text-${id}`\n   */\n  id?: string\n}\n\ntype FormControlProviderContext = Omit<\n  ReturnType<typeof useFormControlProvider>,\n  \"getRootProps\" | \"htmlProps\"\n>\n\nconst [FormControlProvider, useFormControlContext] =\n  createContext<FormControlProviderContext>({\n    strict: false,\n    name: \"FormControlContext\",\n  })\n\nfunction useFormControlProvider(props: FormControlContext) {\n  const {\n    id: idProp,\n    isRequired,\n    isInvalid,\n    isDisabled,\n    isReadOnly,\n    ...htmlProps\n  } = props\n\n  // Generate all the required ids\n  const uuid = useId()\n  const id = idProp || `field-${uuid}`\n\n  const labelId = `${id}-label`\n  const feedbackId = `${id}-feedback`\n  const helpTextId = `${id}-helptext`\n\n  /**\n   * Track whether the `FormErrorMessage` has been rendered.\n   * We use this to append its id the `aria-describedby` of the `input`.\n   */\n  const [hasFeedbackText, setHasFeedbackText] = useState(false)\n\n  /**\n   * Track whether the `FormHelperText` has been rendered.\n   * We use this to append its id the `aria-describedby` of the `input`.\n   */\n  const [hasHelpText, setHasHelpText] = useState(false)\n\n  // Track whether the form element (e.g, `input`) has focus.\n  const [isFocused, setFocus] = useState(false)\n\n  const getHelpTextProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      id: helpTextId,\n      ...props,\n      /**\n       * Notify the field context when the help text is rendered on screen,\n       * so we can apply the correct `aria-describedby` to the field (e.g. input, textarea).\n       */\n      ref: mergeRefs(forwardedRef, (node) => {\n        if (!node) return\n        setHasHelpText(true)\n      }),\n    }),\n    [helpTextId],\n  )\n\n  const getLabelProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ref: forwardedRef,\n      \"data-focus\": dataAttr(isFocused),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-readonly\": dataAttr(isReadOnly),\n      id: props.id !== undefined ? props.id : labelId,\n      htmlFor: props.htmlFor !== undefined ? props.htmlFor : id,\n    }),\n    [id, isDisabled, isFocused, isInvalid, isReadOnly, labelId],\n  )\n\n  const getErrorMessageProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      id: feedbackId,\n      ...props,\n      /**\n       * Notify the field context when the error message is rendered on screen,\n       * so we can apply the correct `aria-describedby` to the field (e.g. input, textarea).\n       */\n      ref: mergeRefs(forwardedRef, (node) => {\n        if (!node) return\n        setHasFeedbackText(true)\n      }),\n      \"aria-live\": \"polite\",\n    }),\n    [feedbackId],\n  )\n\n  const getRootProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ...htmlProps,\n      ref: forwardedRef,\n      role: \"group\",\n    }),\n    [htmlProps],\n  )\n\n  const getRequiredIndicatorProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ref: forwardedRef,\n      role: \"presentation\",\n      \"aria-hidden\": true,\n      children: props.children || \"*\",\n    }),\n    [],\n  )\n\n  return {\n    isRequired: !!isRequired,\n    isInvalid: !!isInvalid,\n    isReadOnly: !!isReadOnly,\n    isDisabled: !!isDisabled,\n    isFocused: !!isFocused,\n    onFocus: () => setFocus(true),\n    onBlur: () => setFocus(false),\n    hasFeedbackText,\n    setHasFeedbackText,\n    hasHelpText,\n    setHasHelpText,\n    id,\n    labelId,\n    feedbackId,\n    helpTextId,\n    htmlProps,\n    getHelpTextProps,\n    getErrorMessageProps,\n    getRootProps,\n    getLabelProps,\n    getRequiredIndicatorProps,\n  }\n}\n\nexport interface FormControlProps\n  extends HTMLChakraProps<\"div\">,\n    ThemingProps<\"FormControl\">,\n    FormControlContext {}\n\n/**\n * FormControl provides context such as\n * `isInvalid`, `isDisabled`, and `isRequired` to form elements.\n *\n * This is commonly used in form elements such as `input`,\n * `select`, `textarea`, etc.\n *\n * @see Docs https://chakra-ui.com/docs/components/form-control\n */\nexport const FormControl = forwardRef<FormControlProps, \"div\">(\n  function FormControl(props, ref) {\n    const styles = useMultiStyleConfig(\"Form\", props)\n    const ownProps = omitThemingProps(props)\n    const {\n      getRootProps,\n      htmlProps: _,\n      ...context\n    } = useFormControlProvider(ownProps)\n\n    const className = cx(\"chakra-form-control\", props.className)\n\n    return (\n      <FormControlProvider value={context}>\n        <FormControlStylesProvider value={styles}>\n          <chakra.div\n            {...getRootProps({}, ref)}\n            className={className}\n            __css={styles[\"container\"]}\n          />\n        </FormControlStylesProvider>\n      </FormControlProvider>\n    )\n  },\n)\n\nFormControl.displayName = \"FormControl\"\n\nexport interface FormHelperTextProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * FormHelperText\n *\n * Assistive component that conveys additional guidance\n * about the field, such as how it will be used and what\n * types in values should be provided.\n */\nexport const FormHelperText = forwardRef<FormHelperTextProps, \"div\">(\n  function FormHelperText(props, ref) {\n    const field = useFormControlContext()\n    const styles = useFormControlStyles()\n    const className = cx(\"chakra-form__helper-text\", props.className)\n    return (\n      <chakra.div\n        {...field?.getHelpTextProps(props, ref)}\n        __css={styles.helperText}\n        className={className}\n      />\n    )\n  },\n)\n\nFormHelperText.displayName = \"FormHelperText\"\n"],"names":["Modal","_ref","children","_ref$visible","visible","label","onClose","onOK","_ref$submitTitle","submitTitle","_ref$width","width","_ref$hideSaveButton","hideSaveButton","_ref$hideCloseButton","hideCloseButton","t","useTranslation","_jsx","_Fragment","_jsxs","ModalView","isOpen","size","ModalOverlay","ModalContent","ModalHeader","ModalCloseButton","ModalBody","Flex","w","padding","wrap","ModalFooter","justifyContent","Button","colorScheme","mr","onClick","hidden","memo","TableWithApi","ref","api","postApi","columns","_ref$fetchOnFirstRun","fetchOnFirstRun","params","tableProps","checkForParams","_objectWithoutProperties","_excluded","_useFetch","useFetch","link","data","runFetch","loading","onSaveAndInsertion","useTableControlsButtons","_useState","useState","_useState2","_slicedToArray","selectedRow","setSelectedRow","_useState3","_useState4","modal","setModal","handleAdd","useCallback","query_status","handleEdit","_objectSpread","handleCloseModal","useImperativeHandle","refreshTable","Table","dataSource","onAdd","onEdit","onDelete","onSelectedRow","row","forwardRef","tableRef","useRef","fetchTableData","_x","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_tableRef$current","_context","prev","next","current","abrupt","sent","stop","apply","arguments","_ref$api","newRecord","useMutation","additionalFunctionToRun","method","setRow","updateRecord","deleteRecord","record","_ref2","_ref$link","_ref$noAuthorization","noAuthorization","runOnSuccess","runOnFail","_ref$method","toast","useToast","url","concat","API_ID","success","setSuccess","authorization","useLocalStorage","postData","dataToPost","settings","fetchResponse","headers","Accept","Authorization","body","JSON","stringify","fetch","json","response","position","title","description","status","duration","isClosable","message","t0","dataIndex","CustomersSummaryPage","_useFormManager","useFormManager","initialValues","date_from","date_to","customer_id","state","onChange","_useCreateTableAction","useCreateTableActionRef","handleSearch","flexDirection","SelectWithApi","Label","name","value","Api","InputText","type","rowKey","hideTools","canExcel","FormLabel","passedProps","_a","styles","useStyleConfig","props","omitThemingProps","className","_props$requiredIndica","requiredIndicator","jsx","RequiredIndicator","_props$optionalIndica","optionalIndicator","rest","field","useFormControlContext","ownProps","getLabelProps","jsxs","chakra","cx","__css","display","textAlign","isRequired","displayName","useFormControlStyles","span","getRequiredIndicatorProps","_createContext","createContext","errorMessage","_createContext2","FormControlStylesProvider","_createContext3","strict","_createContext4","FormControlProvider","FormControl","useMultiStyleConfig","_useFormControlProvid","idProp","id","isInvalid","isDisabled","isReadOnly","htmlProps","uuid","useId","labelId","feedbackId","helpTextId","hasFeedbackText","setHasFeedbackText","hasHelpText","setHasHelpText","_useState5","_useState6","isFocused","setFocus","getHelpTextProps","props2","length","undefined","forwardedRef","mergeRefs","node","dataAttr","htmlFor","getErrorMessageProps","getRootProps","role","onFocus","onBlur","useFormControlProvider","context","_excluded2","div","helperText"],"sourceRoot":""}